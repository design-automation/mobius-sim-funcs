{
	"id": 0,
	"name": "@design-automation/mobius-sim-funcs",
	"kind": 1,
	"kindString": "Project",
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 1716,
			"name": "_model",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 1740,
					"name": "__checkModel__",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "model_api/_model.ts",
							"line": 118,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1741,
							"name": "__checkModel__",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks the model for internal consistency."
							},
							"parameters": [
								{
									"id": 1742,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "\n"
									},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					]
				},
				{
					"id": 1729,
					"name": "__clone__",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "model_api/_model.ts",
							"line": 55,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1730,
							"name": "__clone__",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Clone a model."
							},
							"parameters": [
								{
									"id": 1731,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The model to clone.\n"
									},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "GIModel",
								"package": "@design-automation/mobius-sim",
								"name": "GIModel"
							}
						}
					]
				},
				{
					"id": 1725,
					"name": "__merge__",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "model_api/_model.ts",
							"line": 45,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1726,
							"name": "__merge__",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Merges the second model into the first model. The geometry, attribues, and groups are all merged.\nIf the models contain contain groups with the same names, then the groups will be merged."
							},
							"parameters": [
								{
									"id": 1727,
									"name": "model1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The model to merge into."
									},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1728,
									"name": "model2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The model to merge from    .\n"
									},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1717,
					"name": "__new__",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "model_api/_model.ts",
							"line": 11,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1718,
							"name": "__new__",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a new empty model.",
								"returns": "New model empty.\n"
							},
							"type": {
								"type": "reference",
								"qualifiedName": "GIModel",
								"package": "@design-automation/mobius-sim",
								"name": "GIModel"
							}
						}
					]
				},
				{
					"id": 1722,
					"name": "__postprocess__",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "model_api/_model.ts",
							"line": 33,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1723,
							"name": "__postprocess__",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function to postprocess the model, after it enters the node."
							},
							"parameters": [
								{
									"id": 1724,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1719,
					"name": "__preprocess__",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "model_api/_model.ts",
							"line": 24,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1720,
							"name": "__preprocess__",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A function to preprocess the model, before it enters the node.\nIn cases where there is more than one model connected to a node,\nthe preprocess function will be called before the merge function."
							},
							"parameters": [
								{
									"id": 1721,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1735,
					"name": "__select__",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "model_api/_model.ts",
							"line": 73,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1736,
							"name": "__select__",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Select entities in the model."
							},
							"parameters": [
								{
									"id": 1737,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "\n"
									},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1738,
									"name": "ents_id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								},
								{
									"id": 1739,
									"name": "var_name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1732,
					"name": "__stringify__",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "model_api/_model.ts",
							"line": 64,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1733,
							"name": "__stringify__",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a string representation of this model."
							},
							"parameters": [
								{
									"id": 1734,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "\n"
									},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1740,
						1729,
						1725,
						1717,
						1722,
						1719,
						1735,
						1732
					]
				}
			],
			"sources": [
				{
					"fileName": "model_api/_model.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "analyze",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "The `analysis` module has functions for performing various types of analysis with entities in\nthe model. These functions all return dictionaries containing the results of the analysis."
			},
			"children": [
				{
					"id": 118,
					"name": "AnalyzeFunc",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 119,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/analyze/index.ts",
									"line": 87,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 120,
									"name": "new AnalyzeFunc",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 121,
											"name": "model",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "GIModel",
												"package": "@design-automation/mobius-sim",
												"name": "GIModel"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 118,
										"name": "AnalyzeFunc"
									}
								}
							]
						},
						{
							"id": 122,
							"name": "__enum__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/analyze/index.ts",
									"line": 61,
									"character": 4
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 123,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 124,
											"name": "Centrality",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/analyze/index.ts",
													"line": 62,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 125,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 127,
															"name": "cen_type",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/analyze/index.ts",
																	"line": 63,
																	"character": 45
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_ECentralityType"
																}
															},
															"defaultValue": "Enum._ECentralityType"
														},
														{
															"id": 126,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/analyze/index.ts",
																	"line": 63,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_ECentralityMethod"
																}
															},
															"defaultValue": "Enum._ECentralityMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																127,
																126
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 128,
											"name": "ClosestPath",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/analyze/index.ts",
													"line": 65,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 129,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 130,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/analyze/index.ts",
																	"line": 66,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EShortestPathMethod"
																}
															},
															"defaultValue": "Enum._EShortestPathMethod"
														},
														{
															"id": 131,
															"name": "result",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/analyze/index.ts",
																	"line": 66,
																	"character": 47
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EShortestPathResult"
																}
															},
															"defaultValue": "Enum._EShortestPathResult"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																130,
																131
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 132,
											"name": "Raytrace",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/analyze/index.ts",
													"line": 68,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 133,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 134,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/analyze/index.ts",
																	"line": 69,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_ERaytraceMethod"
																}
															},
															"defaultValue": "Enum._ERaytraceMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																134
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 135,
											"name": "ShortestPath",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/analyze/index.ts",
													"line": 71,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 136,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 137,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/analyze/index.ts",
																	"line": 72,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EShortestPathMethod"
																}
															},
															"defaultValue": "Enum._EShortestPathMethod"
														},
														{
															"id": 138,
															"name": "result",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/analyze/index.ts",
																	"line": 72,
																	"character": 47
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EShortestPathResult"
																}
															},
															"defaultValue": "Enum._EShortestPathResult"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																137,
																138
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 139,
											"name": "Sky",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/analyze/index.ts",
													"line": 74,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 140,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 141,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/analyze/index.ts",
																	"line": 75,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_ESkyMethod"
																}
															},
															"defaultValue": "Enum._ESkyMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																141
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 142,
											"name": "SkyDome",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/analyze/index.ts",
													"line": 77,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 143,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 144,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/analyze/index.ts",
																	"line": 78,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_ESunPathMethod"
																}
															},
															"defaultValue": "Enum._ESunPathMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																144
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 145,
											"name": "Sun",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/analyze/index.ts",
													"line": 80,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 146,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 147,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/analyze/index.ts",
																	"line": 81,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_ESolarMethod"
																}
															},
															"defaultValue": "Enum._ESolarMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																147
															]
														}
													]
												}
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												124,
												128,
												132,
												135,
												139,
												142,
												145
											]
										}
									]
								}
							},
							"defaultValue": "..."
						},
						{
							"id": 148,
							"name": "__model__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/analyze/index.ts",
									"line": 86,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "GIModel",
								"package": "@design-automation/mobius-sim",
								"name": "GIModel"
							}
						},
						{
							"id": 149,
							"name": "Centrality",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/analyze/index.ts",
									"line": 91,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 150,
									"name": "Centrality",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 151,
											"name": "source",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														}
													}
												]
											}
										},
										{
											"id": 152,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										},
										{
											"id": 153,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_ECentralityMethod"
											}
										},
										{
											"id": 154,
											"name": "cen_type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_ECentralityType"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 155,
							"name": "ClosestPath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/analyze/index.ts",
									"line": 95,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 156,
									"name": "ClosestPath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 157,
											"name": "source",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														}
													}
												]
											}
										},
										{
											"id": 158,
											"name": "target",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										},
										{
											"id": 159,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										},
										{
											"id": 160,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EShortestPathMethod"
											}
										},
										{
											"id": 161,
											"name": "result",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EShortestPathResult"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 162,
							"name": "Degree",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/analyze/index.ts",
									"line": 99,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 163,
									"name": "Degree",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 164,
											"name": "__namedParameters",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 165,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 168,
															"name": "alpha",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/analyze/index.ts",
																	"line": 99,
																	"character": 78
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 167,
															"name": "entities",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/analyze/index.ts",
																	"line": 99,
																	"character": 63
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 169,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/analyze/index.ts",
																	"line": 99,
																	"character": 90
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 166,
															"name": "source",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/analyze/index.ts",
																	"line": 99,
																	"character": 50
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																168,
																167,
																169,
																166
															]
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 228,
							"name": "Irradiance",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/analyze/index.ts",
									"line": 133,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 229,
									"name": "Irradiance",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 230,
											"name": "origins",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "TRay",
															"package": "@design-automation/mobius-sim",
															"name": "TRay"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "TPlane",
															"package": "@design-automation/mobius-sim",
															"name": "TPlane"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "Txyz",
															"package": "@design-automation/mobius-sim",
															"name": "Txyz"
														}
													}
												]
											}
										},
										{
											"id": 231,
											"name": "detail",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 232,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										},
										{
											"id": 233,
											"name": "limits",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												]
											}
										},
										{
											"id": 234,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_ESkyMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 170,
							"name": "Isovist",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/analyze/index.ts",
									"line": 102,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 171,
									"name": "Isovist",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 172,
											"name": "origins",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "TRay",
															"package": "@design-automation/mobius-sim",
															"name": "TRay"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "TPlane",
															"package": "@design-automation/mobius-sim",
															"name": "TPlane"
														}
													}
												]
											}
										},
										{
											"id": 173,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										},
										{
											"id": 174,
											"name": "radius",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 175,
											"name": "num_rays",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 176,
							"name": "Nearest",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/analyze/index.ts",
									"line": 105,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 177,
									"name": "Nearest",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 178,
											"name": "source",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 179,
											"name": "target",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 180,
											"name": "radius",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 181,
											"name": "max_neighbors",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 235,
							"name": "Noise",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/analyze/index.ts",
									"line": 137,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 236,
									"name": "Noise",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 237,
											"name": "origins",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "TRay",
															"package": "@design-automation/mobius-sim",
															"name": "TRay"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "TPlane",
															"package": "@design-automation/mobius-sim",
															"name": "TPlane"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "Txyz",
															"package": "@design-automation/mobius-sim",
															"name": "Txyz"
														}
													}
												]
											}
										},
										{
											"id": 238,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										},
										{
											"id": 239,
											"name": "limits",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												]
											}
										},
										{
											"id": 240,
											"name": "targets",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 182,
							"name": "Raytrace",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/analyze/index.ts",
									"line": 108,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 183,
									"name": "Raytrace",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 184,
											"name": "rays",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "TRay",
														"package": "@design-automation/mobius-sim",
														"name": "TRay"
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "TRay",
															"package": "@design-automation/mobius-sim",
															"name": "TRay"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"qualifiedName": "TRay",
																"package": "@design-automation/mobius-sim",
																"name": "TRay"
															}
														}
													}
												]
											}
										},
										{
											"id": 185,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										},
										{
											"id": 186,
											"name": "dist",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												]
											}
										},
										{
											"id": 187,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_ERaytraceMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 188,
							"name": "ShortestPath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/analyze/index.ts",
									"line": 111,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 189,
									"name": "ShortestPath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 190,
											"name": "source",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														}
													}
												]
											}
										},
										{
											"id": 191,
											"name": "target",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										},
										{
											"id": 192,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										},
										{
											"id": 193,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EShortestPathMethod"
											}
										},
										{
											"id": 194,
											"name": "result",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EShortestPathResult"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 195,
							"name": "Sky",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/analyze/index.ts",
									"line": 115,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 196,
									"name": "Sky",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 197,
											"name": "origins",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "TRay",
															"package": "@design-automation/mobius-sim",
															"name": "TRay"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "TPlane",
															"package": "@design-automation/mobius-sim",
															"name": "TPlane"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "Txyz",
															"package": "@design-automation/mobius-sim",
															"name": "Txyz"
														}
													}
												]
											}
										},
										{
											"id": 198,
											"name": "detail",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 199,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										},
										{
											"id": 200,
											"name": "limits",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												]
											}
										},
										{
											"id": 201,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_ESkyMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 202,
							"name": "SkyDome",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/analyze/index.ts",
									"line": 119,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 203,
									"name": "SkyDome",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 204,
											"name": "origin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "TRay",
														"package": "@design-automation/mobius-sim",
														"name": "TRay"
													},
													{
														"type": "reference",
														"qualifiedName": "TPlane",
														"package": "@design-automation/mobius-sim",
														"name": "TPlane"
													},
													{
														"type": "reference",
														"qualifiedName": "Txyz",
														"package": "@design-automation/mobius-sim",
														"name": "Txyz"
													}
												]
											}
										},
										{
											"id": 205,
											"name": "detail",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 206,
											"name": "radius",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 207,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_ESunPathMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 208,
							"name": "Sun",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/analyze/index.ts",
									"line": 122,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 209,
									"name": "Sun",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 210,
											"name": "origins",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "TRay",
															"package": "@design-automation/mobius-sim",
															"name": "TRay"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "TPlane",
															"package": "@design-automation/mobius-sim",
															"name": "TPlane"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "Txyz",
															"package": "@design-automation/mobius-sim",
															"name": "Txyz"
														}
													}
												]
											}
										},
										{
											"id": 211,
											"name": "detail",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 212,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										},
										{
											"id": 213,
											"name": "limits",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												]
											}
										},
										{
											"id": 214,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_ESolarMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 241,
							"name": "Ventilation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/analyze/index.ts",
									"line": 141,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 242,
									"name": "Ventilation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 243,
											"name": "sensors",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "TRay",
															"package": "@design-automation/mobius-sim",
															"name": "TRay"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "TPlane",
															"package": "@design-automation/mobius-sim",
															"name": "TPlane"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "Txyz",
															"package": "@design-automation/mobius-sim",
															"name": "Txyz"
														}
													}
												]
											}
										},
										{
											"id": 244,
											"name": "detail",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 245,
											"name": "layers",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												]
											}
										},
										{
											"id": 246,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										},
										{
											"id": 247,
											"name": "limits",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 215,
							"name": "View",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/analyze/index.ts",
									"line": 126,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 216,
									"name": "View",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 217,
											"name": "origins",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "TRay",
															"package": "@design-automation/mobius-sim",
															"name": "TRay"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "TPlane",
															"package": "@design-automation/mobius-sim",
															"name": "TPlane"
														}
													}
												]
											}
										},
										{
											"id": 218,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										},
										{
											"id": 219,
											"name": "radius",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 220,
											"name": "num_rays",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 221,
											"name": "view_ang",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 222,
							"name": "Visibility",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/analyze/index.ts",
									"line": 129,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 223,
									"name": "Visibility",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 224,
											"name": "origins",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "TRay",
															"package": "@design-automation/mobius-sim",
															"name": "TRay"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "TPlane",
															"package": "@design-automation/mobius-sim",
															"name": "TPlane"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "Txyz",
															"package": "@design-automation/mobius-sim",
															"name": "Txyz"
														}
													}
												]
											}
										},
										{
											"id": 225,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										},
										{
											"id": 226,
											"name": "radius",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 227,
											"name": "targets",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								119
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								122,
								148
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								149,
								155,
								162,
								228,
								170,
								176,
								235,
								182,
								188,
								195,
								202,
								208,
								241,
								215,
								222
							]
						}
					],
					"sources": [
						{
							"fileName": "modules/functions/analyze/index.ts",
							"line": 56,
							"character": 13
						}
					]
				},
				{
					"id": 73,
					"name": "Centrality",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/analyze/Centrality.ts",
							"line": 54,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 74,
							"name": "Centrality",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculates betweenness, closeness, and harmonic centrality\nfor positions in a network. Values are normalized in the range 0 to 1.\n\\n\nThe network is defined by a set of connected edges, consisting of polylines and/or polygons.\nFor edges to be connected, vertices must be welded.\nFor example, if the network consists of multiple polylines, then the vertcies of those polylines must be welded.\n\\n\nCentralities are calculated based on distances between positions.\nThe distance between two positions is the shortest path between those positions.\nThe shortest path is the path where the sum of the weights of the edges along the path is the minimum.\n\\n\nDefault weight is 1 for all edges. Weights can be specified using an attribute called 'weight' on edges.\n\\n\nCloseness centrality is calculated by inverting the sum of the distances to all other positions.\n\\n\nHarmonic centrality is calculated by summing up the inverted distances to all other positions.\n\\n\nBetweenness centrality is calculated in two steps.\nFirst, the shortest path between every pair of nodes is calculated.\nSecond, the betweenness centrality of each node is then the total number of times the node is traversed\nby the shortest paths.\n\\n\nFor closeness centrality, the network is first split up into connected sub-networks.\nThis is because closeness centrality cannot be calculated on networks that are not fully connected.\nThe closeness centrality is then calculated for each sub-network seperately.\n\\n\nFor harmonic centrality, care must be taken when defining custom weights.\nWeight with zero values or very small values will result in errors or will distort the results.\nThis is due to the inversion operation: 1 / weight.\n\\n\nReturns a dictionary containing the results.\n\\n\n1. 'posis': a list of position IDs.\n2. 'centrality': a list of numbers, the values for centrality, either betweenness, closeness, or harmonic.\n\\n",
								"returns": "A dictionary containing the results (posis and centrality values, between 0 and 1.)\n"
							},
							"parameters": [
								{
									"id": 75,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 76,
									"name": "source",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of positions, or entities from which positions can be extracted.\nThese positions should be part of the network.\nIf null, all positions in the model will be used."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												}
											}
										]
									}
								},
								{
									"id": 77,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The network, edges, or entities from which edges can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								},
								{
									"id": 78,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the method to use: `'directed'` or `'undirected'`."
									},
									"type": {
										"type": "reference",
										"name": "_ECentralityMethod"
									}
								},
								{
									"id": 79,
									"name": "cen_type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the type of centrality: `'betweenness', 'closeness'` or `'harmonic'`."
									},
									"type": {
										"type": "reference",
										"name": "_ECentralityType"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 58,
					"name": "ClosestPath",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/analyze/ClosestPath.ts",
							"line": 67,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 59,
							"name": "ClosestPath",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculates the shortest path from every position in source, to the closest position in target.\n\\n\nThis differs from the 'analyze.ShortestPath()' function. If you specify multiple target positions,\nfor each cource position,\nthe 'analyze.ShortestPath()' function will calculate multiple shortest paths,\ni.e. the shortest path to all targets.\nThis function will caculate just one shortest path,\ni.e. the shortest path to the closest target.\n\\n\nPaths are calculated through a network of connected edges.\nFor edges to be connected, vertices must be welded.\nFor example, if the network consists of multiple polylines, then the vertcies of those polylines must be welded.\n\\n\nIf 'directed' is selected, then the edge direction is taken into account. Each edge will be one-way.\nIf 'undirected' is selected, the edge direction is ignored. Each edge will be two-way.\n\\n\nEach edge can be assigned a weight.\nThe shortest path is the path where the sum of the weights of the edges along the path is the minimum.\n\\n\nBy default, all edges are assigned a weight of 1.\nDefault weights can be overridden by creating a numeric attribute on edges call 'weight'.\n\\n\nReturns a dictionary containing the shortes paths.\n\\n\nIf 'distances' is selected, the dictionary will contain one list:\n1. 'distances': a list of distances.\n\\n\nIf 'counts' is selected, the dictionary will contain four lists:\n1. 'posis': a list of positions traversed by the paths,\n2. 'posis\\_count': a list of numbers that count how often each position was traversed.\n3. 'edges': a list of edges traversed by the paths,\n4. 'edges\\_count': a list of numbers that count how often each edge was traversed.\n\\n\nIf 'paths' is selected, the dictionary will contain two lists of lists:\n1. 'posi\\_paths': a list of lists of positions, one list for each path.\n2. 'edge\\_paths': a list of lists of edges, one list for each path.\n\\n\nIf 'all' is selected, the dictionary will contain all lists just described.\n\\n",
								"returns": "A dictionary containing the results.\n"
							},
							"parameters": [
								{
									"id": 60,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 61,
									"name": "source",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Path source, a list of positions, or entities from which positions can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												}
											}
										]
									}
								},
								{
									"id": 62,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Path source, a list of positions, or entities from which positions can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								},
								{
									"id": 63,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The network, edges, or entities from which edges can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								},
								{
									"id": 64,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the method to use: `'directed'` or `'undirected'`."
									},
									"type": {
										"type": "reference",
										"name": "_EShortestPathMethod"
									}
								},
								{
									"id": 65,
									"name": "result",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the data to return (positions, edges, both): `'distances', 'counts', 'paths'` or `'all'`."
									},
									"type": {
										"type": "reference",
										"name": "_EShortestPathResult"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TClosestPathResult"
							}
						}
					]
				},
				{
					"id": 66,
					"name": "Degree",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/analyze/Degree.ts",
							"line": 49,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 67,
							"name": "Degree",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculates degree centrality for positions in a network. Values are normalized in the range 0 to 1.\n\\n\nThe network is defined by a set of connected edges, consisting of polylines and/or polygons.\nFor edges to be connected, vertices must be welded.\nFor example, if the network consists of multiple polylines, then the vertcies of those polylines must be welded.\n\\n\nDegree centrality is based on the idea that the centrality of a position in a network is related to\nthe number of direct links that it has to other positions.\n\\n\nIf 'undirected' is selected,  degree centrality is calculated by summing up the weights\nof all edges connected to a position.\nIf 'directed' is selected, then two types of centrality are calculated: incoming degree and\noutgoing degree.\nIncoming degree is calculated by summing up the weights of all incoming edges connected to a position.\nOutgoing degree is calculated by summing up the weights of all outgoing edges connected to a position.\n\\n\nDefault weight is 1 for all edges. Weights can be specified using an attribute called 'weight' on edges.\n\\n\nReturns a dictionary containing the results.\n\\n\nIf 'undirected' is selected, the dictionary will contain  the following:\n1. 'posis': a list of position IDs.\n2. 'degree': a list of numbers, the values for degree centrality.\n\\n\nIf 'directed' is selected, the dictionary will contain  the following:\n1. 'posis': a list of position IDs.\n2. 'indegree': a list of numbers, the values for incoming degree centrality.\n3. 'outdegree': a list of numbers, the values for outgoing degree centrality.\n\\n",
								"returns": "A dictionary containing the results.\n"
							},
							"parameters": [
								{
									"id": 68,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 69,
									"name": "source",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of positions, or entities from which positions can be extracted.\nThese positions should be part of the network."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												}
											}
										]
									}
								},
								{
									"id": 70,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The network, edges, or entities from which edges can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								},
								{
									"id": 71,
									"name": "alpha",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The alpha value for the centrality calculation, ranging on [0, 1]. With value 0,\ndisregards edge weights and solely uses number of edges in the centrality calculation. With value 1,\ndisregards number of edges and solely uses the edge weights in the centrality calculation."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 72,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the method to use: `'directed'` or `'undirected'`."
									},
									"type": {
										"type": "reference",
										"name": "_ECentralityMethod"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 95,
					"name": "Irradiance",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/analyze/Irradiance.ts",
							"line": 90,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 96,
							"name": "Irradiance",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculate an approximation of the sky exposure factor, for a set sensors positioned at specified locations.\nThe sky exposure factor for each sensor is a value between 0 and 1, where 0 means that it has no exposure\nand 1 means that it has maximum exposure.\n\\n\nEach sensor has a location and direction, specified using either rays or planes.\nThe direction of the sensor specifies what is infront and what is behind the sensor.\nFor each sensor, only exposure infront of the sensor is calculated.\n\\n\nThe exposure is calculated by shooting rays in reverse.\nfrom the sensor origin to a set of points on the sky dome.\nIf the rays hits an obstruction, then the sky dome is obstructed..\nIf the ray hits no obstructions, then the sky dome is not obstructed.\n\\n\nThe exposure factor at each sensor point is calculated as follows:\n1. Shoot rays to all sky dome points.\n2. If the ray hits an obstruction, assign a weight of 0 to that ray.\n3. If a ray does not hit any obstructions, assign a weight between 0 and 1, depending on the incidence angle.\n4. Calculate the total solar expouse by adding up the weights for all rays.\n5. Divide by the maximum possible exposure for an unobstructed sensor with a direction pointing straight up.\n\\n\nIf 'weighted' is selected, then\nthe exposure calculation takes into account the angle of incidence of the ray to the sensor direction.\nRays parallel to the sensor direction are assigned a weight of 1.\nRays at an oblique angle are assigned a weight equal to the cosine of the angle\nbetweeen the sensor direction and the ray.\n\\n\nIf 'unweighted' is selected, then all rays are assigned a weight of 1, irresepctive of angle.\n\\n\nThe detail parameter spacifies the number of rays that get generated.\nThe higher the level of detail, the more accurate but also the slower the analysis will be.\n\\n\nThe number of rays are as follows:\n0 = 145 rays,\n1 = 580 rays,\n2 = 1303 rays,\n3 = 2302 rays.\n4 = 5220 rays.\n\\n\nReturns a dictionary containing exposure results.\n\\n\n1. 'exposure': A list of numbers, the exposure factors.\n\\n\n\\n",
								"returns": "A dictionary containing solar exposure results.\n"
							},
							"parameters": [
								{
									"id": 97,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 98,
									"name": "origins",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of coordinates, a list of Rays or a list of Planes, to be used as the origins for calculating exposure."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "TRay",
													"package": "@design-automation/mobius-sim",
													"name": "TRay"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "TPlane",
													"package": "@design-automation/mobius-sim",
													"name": "TPlane"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "Txyz",
													"package": "@design-automation/mobius-sim",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 99,
									"name": "detail",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "An integer between 1 and 4 inclusive, specifying the level of detail for the analysis."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 100,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The obstructions, faces, polygons, or collections of faces or polygons."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								},
								{
									"id": 101,
									"name": "limits",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The max distance for raytracing."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										]
									}
								},
								{
									"id": 102,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the sky method: `'weighted', 'unweighted'` or `'all'`."
									},
									"type": {
										"type": "reference",
										"name": "_ESkyMethod"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 9,
					"name": "Isovist",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/analyze/Isovist.ts",
							"line": 72,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 10,
							"name": "Isovist",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculates an approximation of the isovist for a set of origins, defined by XYZ coords.\n\\n\nThe isovist is calculated by shooting rays out from the origins in a radial pattern.\nThe 'radius' argument defines the maximum radius of the isovist.\n(The radius is used to define the maximum distance for shooting the rays.)\nThe 'num_rays' argument defines the number of rays that will be shot,\nin a radial pattern parallel to the XY plane, with equal angle between rays.\nMore rays will result in more accurate result, but will also be slower to execute.\n\\n\nReturns a dictionary containing different isovist metrics.\n\\n\n1. 'avg\\_dist': The average distance from origin to the perimeter.\n2. 'min\\_dist': The minimum distance from the origin to the perimeter.\n3. 'max\\_dist': The minimum distance from the origin to the perimeter.\n4. 'area': The area of the isovist.\n5. 'perimeter': The perimeter of the isovist.\n4. 'area\\_ratio': The ratio of the area of the isovist to the maximum area.\n5. 'perimeter\\_ratio': The ratio of the perimeter of the isovist to the maximum perimeter.\n6. 'circularity': The ratio of the square of the perimeter to area (Davis and Benedikt, 1979).\n7. 'compactness': The ratio of average distance to the maximum distance (Michael Batty, 2001).\n8. 'cluster': The ratio of the radius of an idealized circle with the actual area of the\nisovist to the radius of an idealized circle with the actual perimeter of the circle (Michael Batty, 2001).\n\\n\n\\n",
								"returns": "A dictionary containing metrics.\n"
							},
							"parameters": [
								{
									"id": 11,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 12,
									"name": "origins",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of Rays or a list of Planes, to be used as the origins for calculating the isovists."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "TRay",
													"package": "@design-automation/mobius-sim",
													"name": "TRay"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "TPlane",
													"package": "@design-automation/mobius-sim",
													"name": "TPlane"
												}
											}
										]
									}
								},
								{
									"id": 13,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The obstructions: faces, polygons, or collections."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								},
								{
									"id": 14,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The maximum radius of the isovist."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 15,
									"name": "num_rays",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The number of rays to generate when calculating isovists."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TIsovistResult"
							}
						}
					]
				},
				{
					"id": 39,
					"name": "Nearest",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/analyze/Nearest.ts",
							"line": 47,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 40,
							"name": "Nearest",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Finds the nearest positions within a certain maximum radius.\n\\n\nThe neighbors to each source position is calculated as follows:\n1. Calculate the distance to all target positions.\n2. Creat the neighbors set by filtering out target positions that are further than the maximum radius.\n3. If the number of neighbors is greater than 'max\\_neighbors',\nthen select the 'max\\_neighbors' closest target positions.\n\\n\nReturns a dictionary containing the nearest positions.\n\\n\nIf 'num\\_neighbors' is 1, the dictionary will contain two lists:\n1. 'posis': a list of positions, a subset of positions from the source.\n2. 'neighbors': a list of neighbouring positions, a subset of positions from target.\n\\n\nIf 'num\\_neighbors' is greater than 1, the dictionary will contain two lists:\n1. 'posis': a list of positions, a subset of positions from the source.\n2. 'neighbors': a list of lists of neighbouring positions, a subset of positions from target.\n\\n",
								"returns": "A dictionary containing the results.\n"
							},
							"parameters": [
								{
									"id": 41,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 42,
									"name": "source",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of positions, or entities from which positions can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 43,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of positions, or entities from which positions can be extracted.\nIf null, the positions in source will be used."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 44,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The maximum distance for neighbors. If null, Infinity will be used."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 45,
									"name": "max_neighbors",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The maximum number of neighbors to return.\nIf null, the number of positions in target is used."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 46,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 49,
											"name": "distances",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/analyze/Nearest.ts",
													"line": 53,
													"character": 47
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													}
												]
											}
										},
										{
											"id": 48,
											"name": "neighbors",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/analyze/Nearest.ts",
													"line": 53,
													"character": 19
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "TId",
															"package": "@design-automation/mobius-sim",
															"name": "TId"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"qualifiedName": "TId",
																"package": "@design-automation/mobius-sim",
																"name": "TId"
															}
														}
													}
												]
											}
										},
										{
											"id": 47,
											"name": "posis",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/analyze/Nearest.ts",
													"line": 53,
													"character": 5
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "TId",
													"package": "@design-automation/mobius-sim",
													"name": "TId"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												49,
												48,
												47
											]
										}
									],
									"sources": [
										{
											"fileName": "modules/functions/analyze/Nearest.ts",
											"line": 53,
											"character": 3
										}
									]
								}
							}
						}
					]
				},
				{
					"id": 103,
					"name": "Noise",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/analyze/Noise.ts",
							"line": 67,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 104,
							"name": "Noise",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculates the noise impact on a set of sensors from a set of noise sources.\n\\n\nTypically, the sensors are created as centroids of a set of windows. The noise sources are\ntypically placed along road centrelines.\n\\n\nThe noise impact is calculated by shooting rays out from the sensors towards the noise sources.\nThe 'radius' argument defines the maximum radius of the calculation.\n(The radius is used to define the maximum distance for shooting the rays.)\n\\n\nReturns a dictionary containing different metrics.\n\\n",
								"returns": "A dictionary containing different visibility metrics.\n"
							},
							"parameters": [
								{
									"id": 105,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 106,
									"name": "sensors",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of Rays or Planes, to be used as the origins for calculating the unobstructed views."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "TRay",
													"package": "@design-automation/mobius-sim",
													"name": "TRay"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "TPlane",
													"package": "@design-automation/mobius-sim",
													"name": "TPlane"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "Txyz",
													"package": "@design-automation/mobius-sim",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 107,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The obstructions: faces, polygons, or collections."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								},
								{
									"id": 108,
									"name": "limits",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The maximum radius of the visibility analysis."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										]
									}
								},
								{
									"id": 109,
									"name": "sources",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Positions defining the noise sources."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TNoiseResult"
							}
						}
					]
				},
				{
					"id": 2,
					"name": "Raytrace",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/analyze/Raytrace.ts",
							"line": 88,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 3,
							"name": "Raytrace",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Shoot a set of rays into a set of obstructions, consisting of polygon faces.\nOne can imagine particles being shot from the ray origin in the ray direction, hitting the\nobstructions.\n\\n\nEach ray will either hit an obstruction, or will hit no obstructions.\nThe length of the ray vector is ignored, only the ray origin and direction is taken into account.\nEach particle shot out from a ray will travel a certain distance.\nThe minimum and maximum distance that the particle will travel is defined by the 'dist' argument.\n\\n\nIf a ray particle hits an obstruction, then the 'distance' for that ray is the distance from the * ray origin to the point of intersection.\nIf the ray particle does not hit an obstruction, then the 'distance' for that ray is equal to\nthe max for the 'dist' argument.\n\\n\nReturns a dictionary containing the following data.\n\\n\nIf 'stats' is selected, the dictionary will contain the following numbers:\n1. 'hit\\_count': the total number of rays that hit an obstruction.\n2. 'miss\\_count': the total number of rays that did not hit any obstruction.\n3. 'total\\_dist': the total of all the ray distances.\n4. 'min\\_dist': the minimum distance for all the rays.\n5. 'max\\_dist': the maximum distance for all the rays.\n6. 'avg\\_dist': the average dist for all the rays.\n7. 'dist\\_ratio': the ratio of 'total\\_dist' to the maximum distance if not rays hit any\nobstructions.\n\\n\nIf 'distances' is selected, the dictionary will contain the following list:\n1. 'distances': A list of numbers, the distance travelled for each ray.\n\\n\nIf 'hit\\_pgons' is selected, the dictionary will contain the following list:\n1. 'hit\\_pgons': A list of polygon IDs, the polygons hit for each ray, or 'null' if no polygon\nwas hit.\n\\n\nIf 'intersections' is selected, the dictionary will contain the following list:\n1. 'intersections': A list of XYZ coords, the point of intersection where the ray hit a polygon,\nor 'null' if no polygon was hit.\n\\n\nIf 'all' is selected, the dictionary will contain all of the above.\n\\n\nIf the input is a list of rays, the output will be a single dictionary.\nIf the list is empty (i.e. contains no rays), then 'null' is returned.\nIf the input is a list of lists of rays, then the output will be a list of dictionaries.\n\\n",
								"returns": "A dictionary, a list of dictionaries, or null.\n"
							},
							"parameters": [
								{
									"id": 4,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 5,
									"name": "rays",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A ray, a list of rays, or a list of lists of rays."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "TRay",
												"package": "@design-automation/mobius-sim",
												"name": "TRay"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "TRay",
													"package": "@design-automation/mobius-sim",
													"name": "TRay"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "reference",
														"qualifiedName": "TRay",
														"package": "@design-automation/mobius-sim",
														"name": "TRay"
													}
												}
											}
										]
									}
								},
								{
									"id": 6,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The obstructions, faces, polygons, or collections of faces or polygons."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								},
								{
									"id": 7,
									"name": "dist",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The ray limits, one or two numbers. Either max, or [min, max]."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										]
									}
								},
								{
									"id": 8,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, values to return: `'stats', 'distances', 'hit_pgons', 'intersections'` or `'all'`."
									},
									"type": {
										"type": "reference",
										"name": "_ERaytraceMethod"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "TRaytraceResult"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "TRaytraceResult"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 50,
					"name": "ShortestPath",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/analyze/ShortestPath.ts",
							"line": 60,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 51,
							"name": "ShortestPath",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculates the shortest path from every source position to every target position.\n\\n\nPaths are calculated through a network of connected edges.\nFor edges to be connected, vertices must be welded.\nFor example, if the network consists of multiple polylines, then the vertcies of those polylines must be welded.\n\\n\nIf 'directed' is selected, then the edge direction is taken into account. Each edge will be one-way.\nIf 'undirected' is selected, the edge direction is ignored. Each edge will be two-way.\n\\n\nEach edge can be assigned a weight.\nThe shortest path is the path where the sum of the weights of the edges along the path is the minimum.\n\\n\nBy default, all edges are assigned a weight of 1.\nDefault weights can be overridden by creating a numeric attribute on edges call 'weight'.\n\\n\nReturns a dictionary containing the shortest paths.\n\\n\nIf 'distances' is selected, the dictionary will contain two list:\n1. 'source\\_posis': a list of start positions for each path,\n2. 'distances': a list of distances, one list for each path starting at each source position.\n\\n\nIf 'counts' is selected, the dictionary will contain four lists:\n1. 'posis': a list of positions traversed by the paths,\n2. 'posis\\_count': a list of numbers that count how often each position was traversed,\n3. 'edges': a list of edges traversed by the paths,\n4. 'edges\\_count': a list of numbers that count how often each edge was traversed.\n\\n\nIf 'paths' is selected, the dictionary will contain two lists of lists:\n1. 'posi\\_paths': a list of lists of positions, one list for each path,\n2. 'edge\\_paths': a list of lists of edges, one list for each path.\n\\n\nIf 'all' is selected, the dictionary will contain all lists just described.\n\\n",
								"returns": "A dictionary containing the results.\n"
							},
							"parameters": [
								{
									"id": 52,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 53,
									"name": "source",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Path source, a list of positions, or entities from which positions can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												}
											}
										]
									}
								},
								{
									"id": 54,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Path target, a list of positions, or entities from which positions can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								},
								{
									"id": 55,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The network, edges, or entities from which edges can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								},
								{
									"id": 56,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the method to use: `'directed'` or `'undirected'`."
									},
									"type": {
										"type": "reference",
										"name": "_EShortestPathMethod"
									}
								},
								{
									"id": 57,
									"name": "result",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the data to return (positions, edges, both): `'distances', 'counts', 'paths'` or `'all'`."
									},
									"type": {
										"type": "reference",
										"name": "_EShortestPathResult"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TShortestPathResult"
							}
						}
					]
				},
				{
					"id": 16,
					"name": "Sky",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/analyze/Sky.ts",
							"line": 72,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 17,
							"name": "Sky",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculate an approximation of the sky exposure factor, for a set sensors positioned at specified locations.\nThe sky exposure factor for each sensor is a value between 0 and 1, where 0 means that it has no exposure\nand 1 means that it has maximum exposure.\n\\n\nEach sensor has a location and direction, specified using either rays or planes.\nThe direction of the sensor specifies what is infront and what is behind the sensor.\nFor each sensor, only exposure infront of the sensor is calculated.\n\\n\nThe exposure is calculated by shooting rays in reverse.\nfrom the sensor origin to a set of points on the sky dome.\nIf the rays hits an obstruction, then the sky dome is obstructed..\nIf the ray hits no obstructions, then the sky dome is not obstructed.\n\\n\nThe exposure factor at each sensor point is calculated as follows:\n1. Shoot rays to all sky dome points.\n2. If the ray hits an obstruction, assign a weight of 0 to that ray.\n3. If a ray does not hit any obstructions, assign a weight between 0 and 1, depending on the incidence angle.\n4. Calculate the total solar expouse by adding up the weights for all rays.\n5. Divide by the maximum possible exposure for an unobstructed sensor with a direction pointing straight up.\n\\n\nIf 'weighted' is selected, then\nthe exposure calculation takes into account the angle of incidence of the ray to the sensor direction.\nRays parallel to the sensor direction are assigned a weight of 1.\nRays at an oblique angle are assigned a weight equal to the cosine of the angle\nbetweeen the sensor direction and the ray.\n\\n\nIf 'unweighted' is selected, then all rays are assigned a weight of 1, irresepctive of angle.\n\\n\nThe detail parameter spacifies the number of rays that get generated.\nThe higher the level of detail, the more accurate but also the slower the analysis will be.\n\\n\nThe number of rays are as follows:\n0 = 145 rays,\n1 = 580 rays,\n2 = 1303 rays,\n3 = 2302 rays.\n4 = 5220 rays.\n\\n\nReturns a dictionary containing exposure results.\n\\n\n1. 'exposure': A list of numbers, the exposure factors.\n\\n\n\\n",
								"returns": "A dictionary containing solar exposure results.\n"
							},
							"parameters": [
								{
									"id": 18,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 19,
									"name": "origins",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of coordinates, a list of Rays or a list of Planes, to be used as the origins for calculating exposure."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "TRay",
													"package": "@design-automation/mobius-sim",
													"name": "TRay"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "TPlane",
													"package": "@design-automation/mobius-sim",
													"name": "TPlane"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "Txyz",
													"package": "@design-automation/mobius-sim",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 20,
									"name": "detail",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "An integer between 1 and 4 inclusive, specifying the level of detail for the analysis."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 21,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The obstructions, faces, polygons, or collections of faces or polygons."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								},
								{
									"id": 22,
									"name": "limits",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The max distance for raytracing."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										]
									}
								},
								{
									"id": 23,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the sky method: `'weighted', 'unweighted'` or `'all'`."
									},
									"type": {
										"type": "reference",
										"name": "_ESkyMethod"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 32,
					"name": "SkyDome",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/analyze/SkyDome.ts",
							"line": 45,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 33,
							"name": "SkyDome",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Generates a sun path, oriented according to the geolocation and north direction.\nThe sun path is generated as an aid to visualize the orientation of the sun relative to the model.\nNote that the solar exposure calculations do not require the sub path to be visualized.\n\\n\nThe sun path takes into account the geolocation and the north direction of the model.\nGeolocation is specified by a model attributes as follows:\n- @geolocation={'longitude':123,'latitude':12}.\nNorth direction is specified by a model attribute as follows, using a vector:\n- @north==[1,2].\n  If no north direction is specified, then [0,1] is the default (i.e. north is in the direction\n  of the y-axis)\n\\n",
								"returns": "Entities, a set of positions that are organized into sequences.\nA polyline can then be drawn from these positions.\n"
							},
							"parameters": [
								{
									"id": 34,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 35,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The origins of the rays."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "TRay",
												"package": "@design-automation/mobius-sim",
												"name": "TRay"
											},
											{
												"type": "reference",
												"qualifiedName": "TPlane",
												"package": "@design-automation/mobius-sim",
												"name": "TPlane"
											},
											{
												"type": "reference",
												"qualifiedName": "Txyz",
												"package": "@design-automation/mobius-sim",
												"name": "Txyz"
											}
										]
									}
								},
								{
									"id": 36,
									"name": "detail",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The level of detail for the analysis."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 37,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The radius of the sun path."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 38,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the type of sky to generate: `'direct', 'indirect'` or `'sky'`."
									},
									"type": {
										"type": "reference",
										"name": "_ESunPathMethod"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "TId",
											"package": "@design-automation/mobius-sim",
											"name": "TId"
										}
									},
									{
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"qualifiedName": "TId",
												"package": "@design-automation/mobius-sim",
												"name": "TId"
											}
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 24,
					"name": "Sun",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/analyze/Sun.ts",
							"line": 102,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 25,
							"name": "Sun",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculate an approximation of the solar exposure factor, for a set sensors positioned at specfied locations.\nThe solar exposure factor for each sensor is a value between 0 and 1, where 0 means that it has no exposure\nand 1 means that it has maximum exposure.\n\\n\nThe calculation takes into account the geolocation and the north direction of the model.\nGeolocation is specified by a model attributes as follows:\n - @geolocation={'longitude':123,'latitude':12}.\nNorth direction is specified by a model attribute as follows, using a vector:\n - @north==[1,2]\nIf no north direction is specified, then [0,1] is the default (i.e. north is in the direction of the y-axis);\n\\n\nEach sensor has a location and direction, specified using either rays or planes.\nThe direction of the sensor specifies what is infront and what is behind the sensor.\nFor each sensor, only exposure infront of the sensor is calculated.\n\\n\nThe exposure is calculated by shooting rays in reverse.\nfrom the sensor origin to a set of points on the sky dome.\nIf the rays hits an obstruction, then the sky dome is obstructed..\nIf the ray hits no obstructions, then the sky dome is not obstructed.\n\\n\nThe exposure factor at each sensor point is calculated as follows:\n1. Shoot rays to all sky dome points.\n2. If the ray hits an obstruction, assign a wight of 0 to that ray.\n3. If a ray does not hit any obstructions, assign a weight between 0 and 1, depending on the incidence angle.\n4. Calculate the total solar expouse by adding up the weights for all rays.\n5. Divide by the maximum possible solar exposure for an unobstructed sensor.\n\\n\nThe solar exposure calculation takes into account the angle of incidence of the sun ray to the sensor direction.\nSun rays that are hitting the sensor straight on are assigned a weight of 1.\nSun rays that are hitting the sensor at an oblique angle are assigned a weight equal to the cosine of the angle.\n\\n\nIf 'direct\\_exposure' is selected, then the points on the sky dome will follow the path of the sun throughout the year.\nIf 'indirect\\_exposure' is selected, then the points on the sky dome will consist of points excluded by\nthe path of the sun throughout the year.\n\\n\nThe direct sky dome points cover a strip of sky where the sun travels.\nThe inderect sky dome points cover the segments of sky either side of the direct sun strip.\n\\n\nThe detail parameter spacifies the number of rays that get generated.\nThe higher the level of detail, the more accurate but also the slower the analysis will be.\nThe number of rays differs depending on the latitde.\n\\n\nAt latitude 0, the number of rays for 'direct' are as follows:\n0 = 44 rays,\n1 = 105 rays,\n2 = 510 rays,\n3 = 1287 rays.\n\\n\nAt latitude 0, the number of rays for 'indirect' are as follows:\n0 = 58 rays,\n1 = 204 rays,\n2 = 798 rays,\n3 = 3122 rays.\n\\n\nThe number of rays for 'sky' are as follows:\n0 = 89 rays,\n1 = 337 rays,\n2 = 1313 rays,\n3 = 5185 rays.\n\\n\nReturns a dictionary containing solar exposure results.\n\\n\nIf one  of the 'direct' methods is selected, the dictionary will contain:\n1. 'direct': A list of numbers, the direct exposure factors.\n\\n\nIf one  of the 'indirect' methods is selected, the dictionary will contain:\n1. 'indirect': A list of numbers, the indirect exposure factors.\n\\n\n\\n",
								"returns": "A dictionary containing solar exposure results.\n"
							},
							"parameters": [
								{
									"id": 26,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 27,
									"name": "origins",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of coordinates, a list of Rays or a list of Planes, to be used as the origins for calculating exposure."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "TRay",
													"package": "@design-automation/mobius-sim",
													"name": "TRay"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "TPlane",
													"package": "@design-automation/mobius-sim",
													"name": "TPlane"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "Txyz",
													"package": "@design-automation/mobius-sim",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 28,
									"name": "detail",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "An integer between 1 and 3 inclusive, specifying the level of detail for the analysis."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 29,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The obstructions, faces, polygons, or collections of faces or polygons."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								},
								{
									"id": 30,
									"name": "limits",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The max distance for raytracing."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										]
									}
								},
								{
									"id": 31,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, solar method: `'direct_weighted', 'direct_unweighted', 'indirect_weighted'`, or `'indirect_unweighted'`."
									},
									"type": {
										"type": "reference",
										"name": "_ESolarMethod"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 110,
					"name": "Ventilation",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/analyze/Ventilation.ts",
							"line": 30,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 111,
							"name": "Ventilation",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculate an approximation of the ventilation frequency for a set sensors positioned at specified\nlocations.\n\\n",
								"returns": "A dictionary containing solar exposure results.\n"
							},
							"parameters": [
								{
									"id": 112,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 113,
									"name": "sensors",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of coordinates, a list of Rays or a list of Planes, to be used as the sensors for calculating exposure."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "TRay",
													"package": "@design-automation/mobius-sim",
													"name": "TRay"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "TPlane",
													"package": "@design-automation/mobius-sim",
													"name": "TPlane"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "Txyz",
													"package": "@design-automation/mobius-sim",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 114,
									"name": "detail",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "An integer specifying the number of rays to generate in each wind direction."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 115,
									"name": "layers",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The layers of rays, specified as [start, stop, step] relative to the sensors."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										]
									}
								},
								{
									"id": 116,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The obstructions, faces, polygons, or collections of faces or polygons."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								},
								{
									"id": 117,
									"name": "limits",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The max distance for raytracing."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				},
				{
					"id": 80,
					"name": "View",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/analyze/View.ts",
							"line": 66,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 81,
							"name": "View",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculates an approximation of the unobstructed view for a set of origins.\n\\n\nTypically, the origins are created as centroids of a set of windows.\n\\n\nThe unobstructed view is calculated by shooting rays out from the origins in a fan pattern.\n\\n\nThe 'radius' argument defines the maximum radius of the unobstructed view.\n(The radius is used to define the maximum distance for shooting the rays.)\n\\n\nThe 'num\\_rays' argument defines the number of rays that will be shot,\nin a fan pattern parallel to the XY plane, with equal angle between rays.\nMore rays will result in more accurate result, but will also be slower to execute.\n\\n\nReturns a dictionary containing different unobstructed view metrics.\n\\n\n\\n",
								"returns": "A dictionary containing different unobstructed view metrics.\n"
							},
							"parameters": [
								{
									"id": 82,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 83,
									"name": "origins",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of Rays or Planes, to be used as the origins for calculating the unobstructed views."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "TRay",
													"package": "@design-automation/mobius-sim",
													"name": "TRay"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "TPlane",
													"package": "@design-automation/mobius-sim",
													"name": "TPlane"
												}
											}
										]
									}
								},
								{
									"id": 84,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The obstructions: faces, polygons, or collections."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								},
								{
									"id": 85,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The maximum radius of the uobstructed views."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 86,
									"name": "num_rays",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The number of rays to generate when calculating uobstructed views."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 87,
									"name": "view_ang",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The angle of the unobstructed view, in radians."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TViewResult"
							}
						}
					]
				},
				{
					"id": 88,
					"name": "Visibility",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/analyze/Visibility.ts",
							"line": 61,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 89,
							"name": "Visibility",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculates the visibility of a set of target positions from a set of origins.\n\\n\nTypically, the origins are created as centroids of a set of windows. The targets are a set of positions\nwhose visibility is to be analysed.\n\\n\nThe visibility is calculated by shooting rays out from the origins towards the targets.\nThe 'radius' argument defines the maximum radius of the visibility.\n(The radius is used to define the maximum distance for shooting the rays.)\n\\n\nReturns a dictionary containing different visibility metrics.\n\\n\n\\n",
								"returns": "A dictionary containing different visibility metrics.\n"
							},
							"parameters": [
								{
									"id": 90,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 91,
									"name": "origins",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of Rays or Planes, to be used as the origins for calculating the unobstructed views."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "TRay",
													"package": "@design-automation/mobius-sim",
													"name": "TRay"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "TPlane",
													"package": "@design-automation/mobius-sim",
													"name": "TPlane"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "Txyz",
													"package": "@design-automation/mobius-sim",
													"name": "Txyz"
												}
											}
										]
									}
								},
								{
									"id": 92,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The obstructions: faces, polygons, or collections."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								},
								{
									"id": 93,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The maximum radius of the visibility analysis."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 94,
									"name": "targets",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The target positions."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TVisibilityResult"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						118
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						73,
						58,
						66,
						95,
						9,
						39,
						103,
						2,
						50,
						16,
						32,
						24,
						110,
						80,
						88
					]
				}
			],
			"sources": [
				{
					"fileName": "modules/functions/analyze/index.ts",
					"line": 6,
					"character": 0
				}
			]
		},
		{
			"id": 248,
			"name": "attrib",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "The `attrib` module has functions for working with attributes in the model.\nNote that attributes can also be set and retrieved using the \"@\" symbol."
			},
			"children": [
				{
					"id": 297,
					"name": "AttribFunc",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 298,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/attrib/index.ts",
									"line": 65,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 299,
									"name": "new AttribFunc",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 300,
											"name": "model",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "GIModel",
												"package": "@design-automation/mobius-sim",
												"name": "GIModel"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 297,
										"name": "AttribFunc"
									}
								}
							]
						},
						{
							"id": 301,
							"name": "__enum__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/attrib/index.ts",
									"line": 40,
									"character": 4
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 302,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 303,
											"name": "Add",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/attrib/index.ts",
													"line": 41,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 304,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 306,
															"name": "data_type_sel",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/attrib/index.ts",
																	"line": 42,
																	"character": 48
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EDataType"
																}
															},
															"defaultValue": "Enum._EDataType"
														},
														{
															"id": 305,
															"name": "ent_type_sel",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/attrib/index.ts",
																	"line": 42,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EEntTypeAndMod"
																}
															},
															"defaultValue": "Enum._EEntTypeAndMod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																306,
																305
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 307,
											"name": "Delete",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/attrib/index.ts",
													"line": 44,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 308,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 309,
															"name": "ent_type_sel",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/attrib/index.ts",
																	"line": 45,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EEntTypeAndMod"
																}
															},
															"defaultValue": "Enum._EEntTypeAndMod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																309
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 323,
											"name": "Discover",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/attrib/index.ts",
													"line": 59,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 324,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 325,
															"name": "ent_type_sel",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/attrib/index.ts",
																	"line": 60,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EEntTypeAndMod"
																}
															},
															"defaultValue": "Enum._EEntTypeAndMod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																325
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 316,
											"name": "Push",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/attrib/index.ts",
													"line": 53,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 317,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 318,
															"name": "ent_type_sel",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/attrib/index.ts",
																	"line": 54,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EAttribPushTarget"
																}
															},
															"defaultValue": "Enum._EAttribPushTarget"
														},
														{
															"id": 319,
															"name": "method_sel",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/attrib/index.ts",
																	"line": 54,
																	"character": 51
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EPushMethodSel"
																}
															},
															"defaultValue": "Enum._EPushMethodSel"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																318,
																319
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 310,
											"name": "Rename",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/attrib/index.ts",
													"line": 47,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 311,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 312,
															"name": "ent_type_sel",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/attrib/index.ts",
																	"line": 48,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EEntTypeAndMod"
																}
															},
															"defaultValue": "Enum._EEntTypeAndMod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																312
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 313,
											"name": "Set",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/attrib/index.ts",
													"line": 50,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 314,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 315,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/attrib/index.ts",
																	"line": 51,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_ESet"
																}
															},
															"defaultValue": "Enum._ESet"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																315
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 320,
											"name": "Values",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/attrib/index.ts",
													"line": 56,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 321,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 322,
															"name": "ent_type_sel",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/attrib/index.ts",
																	"line": 57,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EEntTypeAndMod"
																}
															},
															"defaultValue": "Enum._EEntTypeAndMod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																322
															]
														}
													]
												}
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												303,
												307,
												323,
												316,
												310,
												313,
												320
											]
										}
									]
								}
							},
							"defaultValue": "..."
						},
						{
							"id": 326,
							"name": "__model__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/attrib/index.ts",
									"line": 64,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "GIModel",
								"package": "@design-automation/mobius-sim",
								"name": "GIModel"
							}
						},
						{
							"id": 327,
							"name": "Add",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/attrib/index.ts",
									"line": 68,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 328,
									"name": "Add",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 329,
											"name": "ent_type_sel",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EEntTypeAndMod"
											}
										},
										{
											"id": 330,
											"name": "data_type_sel",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EDataType"
											}
										},
										{
											"id": 331,
											"name": "attribs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 332,
							"name": "Delete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/attrib/index.ts",
									"line": 71,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 333,
									"name": "Delete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 334,
											"name": "ent_type_sel",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EEntTypeAndMod"
											}
										},
										{
											"id": 335,
											"name": "attribs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 361,
							"name": "Discover",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/attrib/index.ts",
									"line": 89,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 362,
									"name": "Discover",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 363,
											"name": "ent_type_sel",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EEntTypeAndMod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 336,
							"name": "Get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/attrib/index.ts",
									"line": 74,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 337,
									"name": "Get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 338,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										},
										{
											"id": 339,
											"name": "attrib",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "number"
																	}
																]
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 351,
							"name": "Push",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/attrib/index.ts",
									"line": 83,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 352,
									"name": "Push",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 353,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 354,
											"name": "attrib",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "number"
																	}
																]
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "number"
																	}
																]
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "number"
																	}
																]
															},
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "number"
																	}
																]
															}
														]
													}
												]
											}
										},
										{
											"id": 355,
											"name": "ent_type_sel",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EAttribPushTarget"
											}
										},
										{
											"id": 356,
											"name": "method_sel",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EPushMethodSel"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 340,
							"name": "Rename",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/attrib/index.ts",
									"line": 77,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 341,
									"name": "Rename",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 342,
											"name": "ent_type_sel",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EEntTypeAndMod"
											}
										},
										{
											"id": 343,
											"name": "old_attrib",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 344,
											"name": "new_attrib",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 345,
							"name": "Set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/attrib/index.ts",
									"line": 80,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 346,
									"name": "Set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 347,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										},
										{
											"id": 348,
											"name": "attrib",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "number"
																	}
																]
															}
														]
													}
												]
											}
										},
										{
											"id": 349,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "intrinsic",
														"name": "object"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "TAttribDataTypes",
															"package": "@design-automation/mobius-sim",
															"name": "TAttribDataTypes"
														}
													}
												]
											}
										},
										{
											"id": 350,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_ESet"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 357,
							"name": "Values",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/attrib/index.ts",
									"line": 86,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 358,
									"name": "Values",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 359,
											"name": "ent_type_sel",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EEntTypeAndMod"
											}
										},
										{
											"id": 360,
											"name": "attribs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								298
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								301,
								326
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								327,
								332,
								361,
								336,
								351,
								340,
								345,
								357
							]
						}
					],
					"sources": [
						{
							"fileName": "modules/functions/attrib/index.ts",
							"line": 36,
							"character": 13
						}
					]
				},
				{
					"id": 261,
					"name": "Add",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/attrib/Add.ts",
							"line": 24,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 262,
							"name": "Add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add one or more attributes to the model.\nThe attribute will appear as a new column in the attribute table.\n(At least one entity must have a value for the column to be visible in the attribute table).\nAll attribute values will be set to null.\n\\n",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 263,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 264,
									"name": "ent_type_sel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, select the attribute entity type: `'ps', '_v', '_e', '_w', '_f', 'pt', 'pl',\n'pg', 'co',` or `'mo'`."
									},
									"type": {
										"type": "reference",
										"name": "_EEntTypeAndMod"
									}
								},
								{
									"id": 265,
									"name": "data_type_sel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the method to use for data type for this attribute: `'number', 'string', 'boolean',\n'list'` or `'dict'`."
									},
									"type": {
										"type": "reference",
										"name": "_EDataType"
									}
								},
								{
									"id": 266,
									"name": "attribs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A single attribute name, or a list of attribute names."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 267,
					"name": "Delete",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/attrib/Delete.ts",
							"line": 18,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 268,
							"name": "Delete",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Delete one or more attributes from the model. The column in the attribute table will be deleted.\nAll values will also be deleted. \\n",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 269,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 270,
									"name": "ent_type_sel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the attribute entity type: `'ps', '_v', '_e', '_w', '_f', 'pt', 'pl', 'pg', 'co',` or `'mo'`."
									},
									"type": {
										"type": "reference",
										"name": "_EEntTypeAndMod"
									}
								},
								{
									"id": 271,
									"name": "attribs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A single attribute name, or a list of attribute names. If 'null', all attributes\nwill be deleted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 290,
					"name": "Discover",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/attrib/Discover.ts",
							"line": 16,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 291,
							"name": "Discover",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get all attribute names and attribute types for an entity type.\n\\n",
								"returns": "A list of dictionaries, defining the name and type of each attribute.",
								"tags": [
									{
										"tag": "example",
										"text": "`attribs = attrib.Discover(\"pg\")`"
									},
									{
										"tag": "example_info",
										"text": "An example of `attribs`: `[{name: \"description\", type: \"str\"}, {name: \"area\", type: \"number\"}]`.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 292,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 293,
									"name": "ent_type_sel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the attribute entity type: `'ps', '_v', '_e', '_w', '_f', 'pt', 'pl', 'pg', 'co',` or `'mo'`."
									},
									"type": {
										"type": "reference",
										"name": "_EEntTypeAndMod"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reflection",
									"declaration": {
										"id": 294,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"children": [
											{
												"id": 295,
												"name": "name",
												"kind": 1024,
												"kindString": "Property",
												"flags": {},
												"sources": [
													{
														"fileName": "modules/functions/attrib/Discover.ts",
														"line": 16,
														"character": 84
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"id": 296,
												"name": "type",
												"kind": 1024,
												"kindString": "Property",
												"flags": {},
												"sources": [
													{
														"fileName": "modules/functions/attrib/Discover.ts",
														"line": 16,
														"character": 98
													}
												],
												"type": {
													"type": "reference",
													"qualifiedName": "EAttribDataTypeStrs",
													"package": "@design-automation/mobius-sim",
													"name": "EAttribDataTypeStrs"
												}
											}
										],
										"groups": [
											{
												"title": "Properties",
												"kind": 1024,
												"children": [
													295,
													296
												]
											}
										],
										"sources": [
											{
												"fileName": "modules/functions/attrib/Discover.ts",
												"line": 16,
												"character": 83
											}
										]
									}
								}
							}
						}
					]
				},
				{
					"id": 256,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/attrib/Get.ts",
							"line": 29,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 257,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get attribute values for one or more entities.\n\\n\nIf `entities` is null, then model level attributes will be returned.\n\\n",
								"returns": "One attribute value, or a list of attribute values.\n"
							},
							"parameters": [
								{
									"id": 258,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 259,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Entities, the entities to get the attribute values for."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								},
								{
									"id": 260,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The attribute. Can be `name`, `[name, index]`, or `[name, key]`."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"qualifiedName": "TAttribDataTypes",
										"package": "@design-automation/mobius-sim",
										"name": "TAttribDataTypes"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "TAttribDataTypes",
											"package": "@design-automation/mobius-sim",
											"name": "TAttribDataTypes"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 278,
					"name": "Push",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/attrib/Push.ts",
							"line": 31,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 279,
							"name": "Push",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Push attributes up or down the hierarchy. The original attribute is not changed.\n\\n\nIn addition to the standard topologies, the `ent_type_sel` argument allows `attrib.Push` to\npush attributes to the following:\n- `cop`, short for \"Collection Parent\".\n- `coc`, short for \"Collection Child\".",
								"text": "\\n",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 280,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 281,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Entities, the entities to push the attribute values for."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 282,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The attribute. Can be `name`, `[name, index_or_key]`,\n`[source_name, source_index_or_key, target_name]` or `[source_name, source_index_or_key, target_name, target_index_or_key]`."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												]
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												]
											}
										]
									}
								},
								{
									"id": 283,
									"name": "ent_type_sel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the target entity type where the attribute values should be pushed to:\n`'ps', '_v', '_e', '_w', '_f', 'pt', 'pl', 'pg', 'co', 'cop', 'coc'` or `'mo'`."
									},
									"type": {
										"type": "reference",
										"name": "_EAttribPushTarget"
									}
								},
								{
									"id": 284,
									"name": "method_sel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the method for aggregating attribute values in cases where aggregation is necessary:\n`'first', 'last', 'average', 'median', 'sum', 'min'` or `'max'`."
									},
									"type": {
										"type": "reference",
										"name": "_EPushMethodSel"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 272,
					"name": "Rename",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/attrib/Rename.ts",
							"line": 21,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 273,
							"name": "Rename",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Rename an attribute in the model.\nThe header for the column in the attribute table will be renamed.\nAll values will remain the same.\n\\n",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 274,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 275,
									"name": "ent_type_sel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the attribute entity type: `'ps', '_v', '_e', '_w', '_f', 'pt', 'pl', 'pg', 'co',` or `'mo'`."
									},
									"type": {
										"type": "reference",
										"name": "_EEntTypeAndMod"
									}
								},
								{
									"id": 276,
									"name": "old_attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The old attribute name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 277,
									"name": "new_attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The new attribute name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 249,
					"name": "Set",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/attrib/Set.ts",
							"line": 30,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 250,
							"name": "Set",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Set an attribute value for one or more entities.\n\\n\nIf `entities` is null, then model level attributes will be set.\n\\n",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 251,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 252,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Entities, the entities to set the attribute value for."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								},
								{
									"id": 253,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The attribute. Can be `name`, `[name, index]`, or `[name, key]`."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												]
											}
										]
									}
								},
								{
									"id": 254,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The attribute value, or list of values."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "TAttribDataTypes",
												"package": "@design-automation/mobius-sim",
												"name": "TAttribDataTypes"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "TAttribDataTypes",
													"package": "@design-automation/mobius-sim",
													"name": "TAttribDataTypes"
												}
											}
										]
									}
								},
								{
									"id": 255,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum: `'one_value'` or `'many_values'`."
									},
									"type": {
										"type": "reference",
										"name": "_ESet"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 285,
					"name": "Values",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/attrib/Values.ts",
							"line": 18,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 286,
							"name": "Values",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get a list of unique attribute values for an attribute.\n\\n",
								"returns": "A list of values of the attribute.",
								"tags": [
									{
										"tag": "example",
										"text": "`attribs = attrib.Values(\"pg\")`"
									},
									{
										"tag": "example_info",
										"text": "An example of `attribs`: `[\"True\", \"False\"]`.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 287,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 288,
									"name": "ent_type_sel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the attribute entity type: `'ps', '_v', '_e', '_w', '_f', 'pt', 'pl', 'pg', 'co',` or `'mo'`."
									},
									"type": {
										"type": "reference",
										"name": "_EEntTypeAndMod"
									}
								},
								{
									"id": 289,
									"name": "attribs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A single attribute name, or a list of attribute names."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TAttribDataTypes",
									"package": "@design-automation/mobius-sim",
									"name": "TAttribDataTypes"
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						297
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						261,
						267,
						290,
						256,
						278,
						272,
						249,
						285
					]
				}
			],
			"sources": [
				{
					"fileName": "modules/functions/attrib/index.ts",
					"line": 6,
					"character": 0
				}
			]
		},
		{
			"id": 364,
			"name": "calc",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "The `calc` module has functions for performing various types of calculations with entities in the model.\nThese functions neither make nor modify anything in the model.\nThese functions all return either numbers or lists of numbers."
			},
			"children": [
				{
					"id": 410,
					"name": "CalcFunc",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 411,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/calc/index.ts",
									"line": 56,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 412,
									"name": "new CalcFunc",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 413,
											"name": "model",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "GIModel",
												"package": "@design-automation/mobius-sim",
												"name": "GIModel"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 410,
										"name": "CalcFunc"
									}
								}
							]
						},
						{
							"id": 414,
							"name": "__enum__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/calc/index.ts",
									"line": 46,
									"character": 4
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 415,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 416,
											"name": "Centroid",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/calc/index.ts",
													"line": 47,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 417,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 418,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/calc/index.ts",
																	"line": 48,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_ECentroidMethod"
																}
															},
															"defaultValue": "Enum._ECentroidMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																418
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 419,
											"name": "Distance",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/calc/index.ts",
													"line": 50,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 420,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 421,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/calc/index.ts",
																	"line": 51,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EDistanceMethod"
																}
															},
															"defaultValue": "Enum._EDistanceMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																421
															]
														}
													]
												}
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												416,
												419
											]
										}
									]
								}
							},
							"defaultValue": "..."
						},
						{
							"id": 422,
							"name": "__model__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/calc/index.ts",
									"line": 55,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "GIModel",
								"package": "@design-automation/mobius-sim",
								"name": "GIModel"
							}
						},
						{
							"id": 423,
							"name": "Area",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/calc/index.ts",
									"line": 59,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 424,
									"name": "Area",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 425,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 426,
							"name": "BBox",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/calc/index.ts",
									"line": 62,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 427,
									"name": "BBox",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 428,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 429,
							"name": "Centroid",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/calc/index.ts",
									"line": 65,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 430,
									"name": "Centroid",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 431,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 432,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_ECentroidMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 433,
							"name": "Distance",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/calc/index.ts",
									"line": 68,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 434,
									"name": "Distance",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 435,
											"name": "entities1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 436,
											"name": "entities2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 437,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EDistanceMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 438,
							"name": "Eval",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/calc/index.ts",
									"line": 71,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 439,
									"name": "Eval",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 440,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 441,
											"name": "t_param",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 442,
							"name": "Length",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/calc/index.ts",
									"line": 74,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 443,
									"name": "Length",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 444,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 445,
							"name": "Normal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/calc/index.ts",
									"line": 77,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 446,
									"name": "Normal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 447,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 448,
											"name": "scale",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 449,
							"name": "Plane",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/calc/index.ts",
									"line": 80,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 450,
									"name": "Plane",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 451,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 452,
							"name": "Ray",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/calc/index.ts",
									"line": 83,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 453,
									"name": "Ray",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 454,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 455,
							"name": "Vector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/calc/index.ts",
									"line": 86,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 456,
									"name": "Vector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 457,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								411
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								414,
								422
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								423,
								426,
								429,
								433,
								438,
								442,
								445,
								449,
								452,
								455
							]
						}
					],
					"sources": [
						{
							"fileName": "modules/functions/calc/index.ts",
							"line": 43,
							"character": 13
						}
					]
				},
				{
					"id": 375,
					"name": "Area",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/calc/Area.ts",
							"line": 32,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 376,
							"name": "Area",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculates the area of en entity.\n\\n\nThe entity can be a polygon, a face, a closed polyline, a closed wire, or a collection.\n\\n\nGiven a list of entities, a list of areas are returned.",
								"returns": "A number. Area or a list of areas.",
								"tags": [
									{
										"tag": "example",
										"text": "`area1 = calc.Area (surface1)`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 377,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 378,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Single or list of polygons, closed polylines, closed wires, collections."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 406,
					"name": "BBox",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/calc/BBox.ts",
							"line": 26,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 407,
							"name": "BBox",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the bounding box of the entities.\n\\n\nThe bounding box is an imaginary box that completely contains all the geometry.\nThe box is always aligned with the global x, y, and z axes.\n\\n\nThe bounding box consists of a list of lists, as follows [[x, y, z], [x, y, z], [x, y, z], [x, y, z]].\n- The first [x, y, z] is the coordinates of the centre of the bounding box.\n- The second [x, y, z] is the corner of the bounding box with the lowest x, y, z values.\n- The third [x, y, z] is the corner of the bounding box with the highest x, y, z values.\n- The fourth [x, y, z] is the dimensions of the bounding box.\n\\n\nTo visualize the bounding box, see `Visualize.BBox`.\nTo create polygons of the bounding box, see `poly2d.BBoxPolygon`.",
								"returns": "The bounding box, consisting of a list of four lists.\n"
							},
							"parameters": [
								{
									"id": 408,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 409,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The entities for which to calculate the bounding box."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "TBBox",
								"package": "@design-automation/mobius-sim",
								"name": "TBBox"
							}
						}
					]
				},
				{
					"id": 383,
					"name": "Centroid",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/calc/Centroid.ts",
							"line": 28,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 384,
							"name": "Centroid",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculates the centroid of an entity.\n\\n\nIf 'ps\\_average' is selected, the centroid is the average of the positions that make up that entity.\n\\n\nIf 'center\\_of\\_mass' is selected, the centroid is the centre of mass of the faces that make up that entity.\nNote that only faces are deemed to have mass.\n\\n\nGiven a list of entities, a list of centroids will be returned.\n\\n\nGiven a list of positions, a single centroid that is the average of all those positions will be returned.",
								"returns": "A centroid [x, y, z] or a list of centroids.",
								"tags": [
									{
										"tag": "example",
										"text": "`centroid1 = calc.Centroid (polygon1)`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 385,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 386,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Single or list of entities. (Can be any type of entities.)"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 387,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the method for calculating the centroid: `'ps_average'` or `'center_of_mass'`."
									},
									"type": {
										"type": "reference",
										"name": "_ECentroidMethod"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"qualifiedName": "Txyz",
										"package": "@design-automation/mobius-sim",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "Txyz",
											"package": "@design-automation/mobius-sim",
											"name": "Txyz"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 365,
					"name": "Distance",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/calc/Distance.ts",
							"line": 36,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 366,
							"name": "Distance",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculates the minimum distance from one position to other entities in the model.",
								"returns": "Distance, or list of distances (if position2 is a list).",
								"tags": [
									{
										"tag": "example",
										"text": "`distance1 = calc.Distance(position1, position2, p_to_p_distance)`"
									},
									{
										"tag": "example_info",
										"text": "`position1 = [0,0,0]`, `position2 = [[0,0,10],[0,0,20]]`, Expected value of distance is `10`.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 367,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 368,
									"name": "entities1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Position to calculate distance from."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 369,
									"name": "entities2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "List of entities to calculate distance to."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 370,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, distance method: `'ps_to_ps_distance', 'ps_to_e_distance'` or `'ps_to_w_distance'`."
									},
									"type": {
										"type": "reference",
										"name": "_EDistanceMethod"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 393,
					"name": "Eval",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/calc/Eval.ts",
							"line": 45,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 394,
							"name": "Eval",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculates the xyz coord along an edge, wire, or polyline given a t parameter.\n\\n\nThe 't' parameter varies between 0 and 1, where 0 indicates the start and 1 indicates the end.\nFor example, given a polyline,\n- evaluating at t=0 gives that xyz at the start,\n- evaluating at t=0.5 gives the xyz halfway along the polyline,\n- evaluating at t=1 gives the xyz at the end of the polyline.\n\\n\nGiven a single edge, wire, or polyline, a single xyz coord will be returned.\n\\n\nGiven a list of edges, wires, or polylines, a list of xyz coords will be returned.\n\\n\nGiven any entity that has wires (faces, polygons and collections),\na list of wires will be extracted, and a list of coords will be returned.",
								"returns": "The coordinates [x, y, z], or a list of coordinates.",
								"tags": [
									{
										"tag": "example",
										"text": "`coord1 = calc.Eval(polyline1, 0.25)` will return the coordinate of the point a quarter\ninto polyline1.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 395,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 396,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Single or list of edges, wires, polylines, or faces, polygons, or collections."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 397,
									"name": "t_param",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A value between 0 to 1."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"qualifiedName": "Txyz",
										"package": "@design-automation/mobius-sim",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "Txyz",
											"package": "@design-automation/mobius-sim",
											"name": "Txyz"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 371,
					"name": "Length",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/calc/Length.ts",
							"line": 46,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 372,
							"name": "Length",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculates the length of an entity.\n\\n\nThe entity can be an edge, a wire, a polyline, or anything from which wires can be extracted.\nThis includes polylines, polygons, faces, and collections.\n\\n\nGiven a list of edges, wires, or polylines, a list of lengths are returned.\n\\n\nGiven any types of entities from which wires can be extracted, a list of lengths are returned.\nFor example, given a single polygon, a list of lengths are returned (since a polygon may have multiple wires).",
								"returns": "Lengths, a number or list of numbers.",
								"tags": [
									{
										"tag": "example",
										"text": "`length1 = calc.Length(line1)`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 373,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 374,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Single or list of edges or wires or other entities from which wires can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 388,
					"name": "Normal",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/calc/Normal.ts",
							"line": 57,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 389,
							"name": "Normal",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculates the normal vector of an entity or list of entities. The vector is normalised, and\nscaled by the specified scale factor.\n\\n\nGiven a single entity, a single normal will be returned. Given a list of entities, a list of\nnormals will be returned.\n\\n\nFor polygons, faces, and face wires the normal is calculated by taking the average of all the\nnormals of the face triangles.\n\\n\nFor polylines and polyline wires, the normal is calculated by triangulating the positions, and\nthen taking the average of all the normals of the triangles.\n\\n\nFor edges, the normal is calculated by taking the average of the normals of the two vertices.\n\\n\nFor vertices, the normal is calculated by creating a triangle out of the two adjacent edges, and\nthen calculating the normal of the triangle. (If there is only one edge, or if the two adjacent\nedges are colinear, the the normal of the wire is returned.)\n\\n\nFor positions, the normal is calculated by taking the average of the normals of all the vertices\nlinked to the position.\n\\n\nIf the normal cannot be calculated, `[0, 0, 0]` will be returned.",
								"returns": "The normal vector [x, y, z] or a list of normal vectors.",
								"tags": [
									{
										"tag": "example",
										"text": "`normal1 = calc.Normal(polygon1, 1)`"
									},
									{
										"tag": "example_info",
										"text": "If the input is non-planar, the output vector will be an average of all normals\nvector of the polygon triangles.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 390,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 391,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Single or list of entities. (Can be any type of entities.)"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 392,
									"name": "scale",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The scale factor for the normal vector. (This is equivalent to the length of the\nnormal vector.)"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"qualifiedName": "Txyz",
										"package": "@design-automation/mobius-sim",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "Txyz",
											"package": "@design-automation/mobius-sim",
											"name": "Txyz"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 402,
					"name": "Plane",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/calc/Plane.ts",
							"line": 33,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 403,
							"name": "Plane",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a plane from a polygon, a face, a polyline, or a wire.\nFor polylines or wires, there must be at least three non-colinear vertices.\n\\n\nThe winding order is counter-clockwise.\nThis means that if the vertices are ordered counter-clockwise relative to your point of view,\nthen the z axis of the plane will be pointing towards you.",
								"returns": "The plane.\n"
							},
							"parameters": [
								{
									"id": 404,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 405,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Any entities."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"qualifiedName": "TPlane",
										"package": "@design-automation/mobius-sim",
										"name": "TPlane"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "TPlane",
											"package": "@design-automation/mobius-sim",
											"name": "TPlane"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 398,
					"name": "Ray",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/calc/Ray.ts",
							"line": 43,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 399,
							"name": "Ray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a ray for edges or polygons. Rays have an origin and a direction.\n\\n\nFor edges, it returns a ray along the edge, from the start vertex to the end vertex\n\\n\nFor a polygon, it returns the ray that is the z-axis of the plane.\n\\n\nFor an edge, the ray vector is not normalised. For a polygon, the ray vector is normalised.",
								"returns": "The ray.\n"
							},
							"parameters": [
								{
									"id": 400,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 401,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "An edge, a wire, a polygon, or a list."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"qualifiedName": "TRay",
										"package": "@design-automation/mobius-sim",
										"name": "TRay"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "TRay",
											"package": "@design-automation/mobius-sim",
											"name": "TRay"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 379,
					"name": "Vector",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/calc/Vector.ts",
							"line": 31,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 380,
							"name": "Vector",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a vector along an edge, from the start position to the end position.\nThe vector is not normalized.\n\\n\nGiven a single edge, a single vector will be returned.\nGiven a list of edges, a list of vectors will be returned.\n\\n\nGiven any entity that has edges (collection, polygons, polylines and wires),\na list of edges will be extracted, and a list of vectors will be returned.",
								"returns": "The vector [x, y, z] or a list of vectors.\n"
							},
							"parameters": [
								{
									"id": 381,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 382,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Single edge or list of edges, or any entity from which edges can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"qualifiedName": "Txyz",
										"package": "@design-automation/mobius-sim",
										"name": "Txyz"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "Txyz",
											"package": "@design-automation/mobius-sim",
											"name": "Txyz"
										}
									}
								]
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						410
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						375,
						406,
						383,
						365,
						393,
						371,
						388,
						402,
						398,
						379
					]
				}
			],
			"sources": [
				{
					"fileName": "modules/functions/calc/index.ts",
					"line": 7,
					"character": 0
				}
			]
		},
		{
			"id": 458,
			"name": "collection",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "The `collections` module has functions for creating and modifying collections."
			},
			"children": [
				{
					"id": 482,
					"name": "CollectionFunc",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 483,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/collection/index.ts",
									"line": 29,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 484,
									"name": "new CollectionFunc",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 485,
											"name": "model",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "GIModel",
												"package": "@design-automation/mobius-sim",
												"name": "GIModel"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 482,
										"name": "CollectionFunc"
									}
								}
							]
						},
						{
							"id": 486,
							"name": "__model__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/collection/index.ts",
									"line": 28,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "GIModel",
								"package": "@design-automation/mobius-sim",
								"name": "GIModel"
							}
						},
						{
							"id": 487,
							"name": "Add",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/collection/index.ts",
									"line": 32,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 488,
									"name": "Add",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 489,
											"name": "coll",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 490,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 491,
							"name": "Create",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/collection/index.ts",
									"line": 35,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 492,
									"name": "Create",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 493,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										},
										{
											"id": 494,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 495,
							"name": "Delete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/collection/index.ts",
									"line": 38,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 496,
									"name": "Delete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 497,
											"name": "coll",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 498,
							"name": "Get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/collection/index.ts",
									"line": 41,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 499,
									"name": "Get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 500,
											"name": "names",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 501,
							"name": "Remove",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/collection/index.ts",
									"line": 44,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 502,
									"name": "Remove",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 503,
											"name": "coll",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 504,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								483
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								486
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								487,
								491,
								495,
								498,
								501
							]
						}
					],
					"sources": [
						{
							"fileName": "modules/functions/collection/index.ts",
							"line": 26,
							"character": 13
						}
					]
				},
				{
					"id": 468,
					"name": "Add",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/collection/Add.ts",
							"line": 16,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 469,
							"name": "Add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds entities to a collection.\n\\n",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 470,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 471,
									"name": "coll",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The collection to be updated."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 472,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Points, polylines, polygons, and collections to add."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 459,
					"name": "Create",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/collection/Create.ts",
							"line": 35,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 460,
							"name": "Create",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a new collection.\n\\n\nIf the `entities` argument is null or an empty list, then an empty collection will be created.\n\\n\nIf the `name` argument is null, then no name attribute will be created for the collection.\n\\n\nIf the list of entities contains other collections, these other collections will then become\nchildren of the new collection.",
								"returns": "Entities, new collection, or a list of new collections.",
								"tags": [
									{
										"tag": "example",
										"text": "`collection1 = collection.Create([point1,polyine1,polygon1], 'my_coll')`"
									},
									{
										"tag": "example_info",
										"text": "Creates a collection containing point1, polyline1, polygon1, with an attribute `name = 'my_coll'`.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 461,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 462,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "List or nested lists of points, polylines, polygons, and other colletions, or null."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								},
								{
									"id": 463,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The name to give to this collection, resulting in an attribute called `name`. If `null`, no attribute will be created."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"qualifiedName": "TId",
										"package": "@design-automation/mobius-sim",
										"name": "TId"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "TId",
											"package": "@design-automation/mobius-sim",
											"name": "TId"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 478,
					"name": "Delete",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/collection/Delete.ts",
							"line": 15,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 479,
							"name": "Delete",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Deletes a collection without deleting the entities in the collection.\n\\n",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 480,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 481,
									"name": "coll",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The collection or list of collections to be deleted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 464,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/collection/Get.ts",
							"line": 33,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 465,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get one or more collections from the model, given a name or list of names. Collections with an\nattribute called 'name' and with a value that matches the given value will be returned.\n\\n\nThe value for name can include wildcards: '?' matches any single character and '\\*' matches any\nsequence of characters. For example, 'coll?' will match 'coll1' and 'colla'. 'coll\\*' matches any\nname that starts with 'coll'.\n\\n\nIf a single collection is found, the collection will be returned as a single item (not a list).\nThis is a convenience so that there is no need to get the first item out of the returned list.\n\\n\nIf no collections are found, then an empty list is returned.\n\\n",
								"returns": "The collection, or a list of collections.\n"
							},
							"parameters": [
								{
									"id": 466,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 467,
									"name": "names",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A name or list of names. May include wildcards, '?' and '\\*'."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"qualifiedName": "TId",
										"package": "@design-automation/mobius-sim",
										"name": "TId"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "TId",
											"package": "@design-automation/mobius-sim",
											"name": "TId"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 473,
					"name": "Remove",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/collection/Remove.ts",
							"line": 16,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 474,
							"name": "Remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes entities from a collection.\n\\n",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 475,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 476,
									"name": "coll",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The collection to be updated."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 477,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Points, polylines, polygons, and collections to add. Or null to empty the collection."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						482
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						468,
						459,
						478,
						464,
						473
					]
				}
			],
			"sources": [
				{
					"fileName": "modules/functions/collection/index.ts",
					"line": 5,
					"character": 0
				}
			]
		},
		{
			"id": 505,
			"name": "dict",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "The `dict` module has functions for working with dictionaries.\nThese functions have no direct link with the model, they are generic functions for manipulating dictionaries.\nThese functions neither make nor modify anything in the model.\nIn addition to these functions, there are also inline functions available for working with dictionaries."
			},
			"children": [
				{
					"id": 520,
					"name": "DictFunc",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 521,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 522,
									"name": "new DictFunc",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 520,
										"name": "DictFunc"
									}
								}
							]
						},
						{
							"id": 523,
							"name": "Add",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/dict/index.ts",
									"line": 20,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 524,
									"name": "Add",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 525,
											"name": "dict",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										},
										{
											"id": 526,
											"name": "keys",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 527,
											"name": "values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 528,
							"name": "Remove",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/dict/index.ts",
									"line": 23,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 529,
									"name": "Remove",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 530,
											"name": "dict",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										},
										{
											"id": 531,
											"name": "keys",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 532,
							"name": "Replace",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/dict/index.ts",
									"line": 26,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 533,
									"name": "Replace",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 534,
											"name": "dict",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										},
										{
											"id": 535,
											"name": "old_keys",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 536,
											"name": "new_keys",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								521
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								523,
								528,
								532
							]
						}
					],
					"sources": [
						{
							"fileName": "modules/functions/dict/index.ts",
							"line": 18,
							"character": 13
						}
					]
				},
				{
					"id": 506,
					"name": "Add",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/dict/Add.ts",
							"line": 13,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 507,
							"name": "Add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds one or more key-value pairs to a dict. Existing keys with the same name will be overwritten.\n\\n",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 508,
									"name": "dict",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Dictionary to add the key-value pairs to."
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 509,
									"name": "keys",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A key or list of keys."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 510,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A value of list of values."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 511,
					"name": "Remove",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/dict/Remove.ts",
							"line": 12,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 512,
							"name": "Remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes keys from a dict. If the key does not exist, no action is taken and no error is thrown.\n\\n",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 513,
									"name": "dict",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The dict in which to remove keys"
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 514,
									"name": "keys",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The key or list of keys to remove."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 515,
					"name": "Replace",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/dict/Replace.ts",
							"line": 13,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 516,
							"name": "Replace",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces keys in a dict. If the key does not exist, no action is taken and no error is thrown.\n\\n",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 517,
									"name": "dict",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The dict in which to replace keys"
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 518,
									"name": "old_keys",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The old key or list of keys."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 519,
									"name": "new_keys",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The new key or list of keys."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						520
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						506,
						511,
						515
					]
				}
			],
			"sources": [
				{
					"fileName": "modules/functions/dict/index.ts",
					"line": 8,
					"character": 0
				}
			]
		},
		{
			"id": 537,
			"name": "edit",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "The `edit` module has functions for editing entities in the model.\nThese function modify the topology of objects: vertices, edges, wires and faces.\nSome functions return the IDs of the entities that are created or modified."
			},
			"children": [
				{
					"id": 578,
					"name": "EditFunc",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 579,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/edit/index.ts",
									"line": 48,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 580,
									"name": "new EditFunc",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 581,
											"name": "model",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "GIModel",
												"package": "@design-automation/mobius-sim",
												"name": "GIModel"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 578,
										"name": "EditFunc"
									}
								}
							]
						},
						{
							"id": 582,
							"name": "__enum__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/edit/index.ts",
									"line": 32,
									"character": 4
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 583,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 584,
											"name": "Delete",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/edit/index.ts",
													"line": 33,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 585,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 586,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/edit/index.ts",
																	"line": 34,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EDeleteMethod"
																}
															},
															"defaultValue": "Enum._EDeleteMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																586
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 587,
											"name": "Divide",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/edit/index.ts",
													"line": 36,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 588,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 589,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/edit/index.ts",
																	"line": 37,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EDivisorMethod"
																}
															},
															"defaultValue": "Enum._EDivisorMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																589
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 590,
											"name": "Ring",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/edit/index.ts",
													"line": 39,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 591,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 592,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/edit/index.ts",
																	"line": 40,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_ERingMethod"
																}
															},
															"defaultValue": "Enum._ERingMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																592
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 593,
											"name": "Weld",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/edit/index.ts",
													"line": 42,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 594,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 595,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/edit/index.ts",
																	"line": 43,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EWeldMethod"
																}
															},
															"defaultValue": "Enum._EWeldMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																595
															]
														}
													]
												}
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												584,
												587,
												590,
												593
											]
										}
									]
								}
							},
							"defaultValue": "..."
						},
						{
							"id": 596,
							"name": "__model__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/edit/index.ts",
									"line": 47,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "GIModel",
								"package": "@design-automation/mobius-sim",
								"name": "GIModel"
							}
						},
						{
							"id": 597,
							"name": "Delete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/edit/index.ts",
									"line": 51,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 598,
									"name": "Delete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 599,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 600,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EDeleteMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 601,
							"name": "Divide",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/edit/index.ts",
									"line": 54,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 602,
									"name": "Divide",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 603,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 604,
											"name": "divisor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 605,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EDivisorMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 606,
							"name": "Fuse",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/edit/index.ts",
									"line": 57,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 607,
									"name": "Fuse",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 608,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 609,
											"name": "tolerance",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 610,
							"name": "Hole",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/edit/index.ts",
									"line": 60,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 611,
									"name": "Hole",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 612,
											"name": "pgon",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 613,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 614,
							"name": "Reverse",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/edit/index.ts",
									"line": 63,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 615,
									"name": "Reverse",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 616,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 617,
							"name": "Ring",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/edit/index.ts",
									"line": 66,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 618,
									"name": "Ring",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 619,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 620,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_ERingMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 621,
							"name": "Shift",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/edit/index.ts",
									"line": 69,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 622,
									"name": "Shift",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 623,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 624,
											"name": "offset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 625,
							"name": "Weld",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/edit/index.ts",
									"line": 72,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 626,
									"name": "Weld",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 627,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 628,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EWeldMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								579
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								582,
								596
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								597,
								601,
								606,
								610,
								614,
								617,
								621,
								625
							]
						}
					],
					"sources": [
						{
							"fileName": "modules/functions/edit/index.ts",
							"line": 29,
							"character": 13
						}
					]
				},
				{
					"id": 573,
					"name": "Delete",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/edit/Delete.ts",
							"line": 35,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 574,
							"name": "Delete",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Deletes geometric entities: positions, points, polylines, polygons, and collections.\n\\n\n- When deleting positions, any topology that requires those positions will also be deleted.\n(For example, any vertices linked to the deleted position will also be deleted,\nwhich may in turn result in some edges being deleted, and so forth.)\n- When deleting objects (points, polylines, and polygons), topology is also deleted.\n- When deleting collections, the objects and other collections in the collection are also deleted.\n\\n\nTopological entities inside objects (wires, edges, vertices) cannot be deleted.\nIf a topological entity needs to be deleted, then the current approach is create a new object\nwith the desired topology, and then to delete the original object.\n\\n",
								"returns": "void",
								"tags": [
									{
										"tag": "example",
										"text": "`edit.Delete(polygon1, 'delete_selected')`"
									},
									{
										"tag": "example_info",
										"text": "Deletes `polygon1` from the model. The topology for\n`polygon1` will be deleted. In addition, any positions being used by `polygon1` will be deleted\nonly if they are not being used by other objects."
									},
									{
										"tag": "example",
										"text": "`edit.Delete(polygon1, 'keep_selected')`"
									},
									{
										"tag": "example_info",
										"text": "Deletes everything except `polygon1` from the model. The topology and positions for\n`polygon1` will not be deleted.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 575,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 576,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Positions, points, polylines, polygons, collections."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 577,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, delete or keep unused positions: `'delete_selected'` or `'keep_selected'`."
									},
									"type": {
										"type": "reference",
										"name": "_EDeleteMethod"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 538,
					"name": "Divide",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/edit/Divide.ts",
							"line": 44,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 539,
							"name": "Divide",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Divides edges into a set of shorter edges.\n\\n\n- If the `by_number` method is selected, then each edge is divided into\na fixed number of equal length shorter edges.\n- If the `by_length` method is selected, then each edge is divided into\nshorter edges of the specified length.\nThe length of the last segment will be the remainder.\n- If the `by_min_length` method is selected,\nthen the edge is divided into the number of shorter edges\nwith lengths equal to or greater than the minimum length specified.\n- If the `by_max_length` method is selected,\nthen the edge is divided into the number of shorter edges\nwith lengths equal to or less than the maximum length specified.\n\\n",
								"returns": "Entities, a list of new edges resulting from the divide operation.",
								"tags": [
									{
										"tag": "example",
										"text": "`segments1 = make.Divide(edge1, 5, by_number)`"
									},
									{
										"tag": "example_info",
										"text": "Creates a list of 5 equal length edges from edge1."
									},
									{
										"tag": "example",
										"text": "`segments2 = make.Divide(edge1, 5, by_length)`"
									},
									{
										"tag": "example_info",
										"text": "If edge1 has length 13, creates two new edges of length 5 and one new edge of length 3.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 540,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 541,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Edges, or entities from which edges can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 542,
									"name": "divisor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Segment length or number of segments."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 543,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, select the method for dividing edge: `'by_number', 'by_length', 'by_min_length'` or `'by_max_length'`."
									},
									"type": {
										"type": "reference",
										"name": "_EDivisorMethod"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				},
				{
					"id": 554,
					"name": "Fuse",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/edit/Fuse.ts",
							"line": 36,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 555,
							"name": "Fuse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Fuse positions that lie within a certain tolerance of one another.\nNew positions will be created.\n\\n\nThe existing positions are analysed and clustered into groups of positions that lie with the\ntolerance distance from one another. For each cluster, a new position is created at the centre\nof the cluster. The xyz coordinates of the new position will be calculated as the average of all\nthe existing positions in the cluster.\n\\n\nIf the positions that are fuse have vertices attached, then the vertices will become welded.\n(Note that when using the `edit.Weld()` function, there is no threshold tolerance. Even vertices\nthat are far apart can be welded together. Fusing allows only vertices that are close together\nto be welded.)\n\\n\nIn some cases, if edges are shorter than the tolerance, this can result in edges being deleted.\nThe deletion of edges may also result in polylines or polygons being deleted. (It is therefore\nadvisable to filter out deleted entities after applying the `edit.Fuse()` function. For example,\nif you have a list of polygons, after fusing, you can filter the list like this:\n`pgons = pgons#pg`.)\n\\n\nThe new positions that get generated are returned.\n\\n",
								"returns": "Entities, a list of new positions.\n"
							},
							"parameters": [
								{
									"id": 556,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 557,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Entities, a list of positions, or entities from which positions can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 558,
									"name": "tolerance",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The distance tolerance for fusing positions."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				},
				{
					"id": 544,
					"name": "Hole",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/edit/Hole.ts",
							"line": 32,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 545,
							"name": "Hole",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Makes one or more holes in a polygon.\n\\n\nThe holes are specified by lists of positions.\nThe positions must be on the polygon, i.e. they must be co-planar with the polygon and\nthey must be within the boundary of the polygon. (Even positions touching the edge of the polygon\ncan result in no hole being generated.)\n\\n\nMultiple holes can be created.\n- If the positions is a single list, then a single hole will be generated.\n- If the positions is a list of lists, then multiple holes will be generated.\n\\n",
								"returns": "Entities, a list of wires resulting from the hole(s).",
								"tags": [
									{
										"tag": "example",
										"text": "<a href=\"/editor?file=/assets/examples/Functions_edit.Hole_examples.mob&node=1\" target=\"_blank\"> Correct Example </a>"
									},
									{
										"tag": "example_info",
										"text": "A model showing proper usage of edit.Hole, such that a hole is created in the orignal polygons."
									},
									{
										"tag": "example",
										"text": "<a href=\"/editor?file=/assets/examples/Functions_edit.Hole_examples.mob&node=2\" target=\"_blank\"> Wrong Example </a>"
									},
									{
										"tag": "example_info",
										"text": "A model showing potential improper usage of edit.Hole, where the hole entities are outside of the original.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 546,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 547,
									"name": "pgon",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A polygon to make holes in. This polygon is modified by the function."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 548,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "List of positions, or nested lists of positions, or entities from which positions\ncan be extracted to create the holes."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				},
				{
					"id": 569,
					"name": "Reverse",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/edit/Reverse.ts",
							"line": 24,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 570,
							"name": "Reverse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Reverses direction of wires, polylines or polygons.\n\\n\nThe order of vertices and edges in the wires will be reversed.\n\\n\nFor polygons this also means that they will face in the opposite direction. The back face and\nfront face will be flipped. If the normal is calculated, it will face in the opposite direction.\n\\n",
								"returns": "void",
								"tags": [
									{
										"tag": "example",
										"text": "`edit.Reverse(polygon1)`"
									},
									{
										"tag": "example_info",
										"text": "Flips polygon and reverses its normal."
									},
									{
										"tag": "example",
										"text": "`edit.Reverse(polyline1)`"
									},
									{
										"tag": "example_info",
										"text": "Reverses the order of vertices and edges in the polyline.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 571,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 572,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Wire,polyline, polygon."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 559,
					"name": "Ring",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/edit/Ring.ts",
							"line": 26,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 560,
							"name": "Ring",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Opens or closes a polyline.\n\\n\nA polyline can be open or closed. A polyline consists of a sequence of vertices and edges.\nEdges connect pairs of vertices.\n- An open polyline has no edge connecting the first and last vertices. Closing a polyline\nadds this edge.\n- A closed polyline has an edge connecting the first and last vertices. Opening a polyline\ndeletes this edge.\n\\n",
								"returns": "void",
								"tags": [
									{
										"tag": "example",
										"text": "`edit.Ring([polyline1,polyline2,...], method='close')`"
									},
									{
										"tag": "example_info",
										"text": "If open, polylines are changed to closed; if already closed, nothing happens.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 561,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 562,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Polyline(s)."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 563,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the method to use: ``open`` or ``close``."
									},
									"type": {
										"type": "reference",
										"name": "_ERingMethod"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 564,
					"name": "Shift",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/edit/Shift.ts",
							"line": 33,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 565,
							"name": "Shift",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Shifts the order of the edges in a closed wire.\n\\n\nIn a closed wire (either a closed polyline or polygon), the edges form a closed ring. Any edge\n(or vertex) could be the first edge of the ring. In some cases, it is useful to have an edge in\na particular position in a ring. This function allows the edges to be shifted either forwards or\nbackwards around the ring. The order of the edges in the ring will remain unchanged.\n\\n\n- An offset of zero has no effect.\n- An offset of 1 will shift the edges so that the second edge becomes the first edge.\n- An offset of 2 will shift the edges so that the third edge becomes the first edge.\n- An offset of -1 will shift the edges so that the last edge becomes the first edge.\n\\n",
								"returns": "void",
								"tags": [
									{
										"tag": "example",
										"text": "`edit.Shift(polygon1, 1)`"
									},
									{
										"tag": "example_info",
										"text": "Shifts the edges in the polygon wire, so that every edge moves back by one position\nin the ring. The first edge will become the last edge."
									},
									{
										"tag": "example",
										"text": "`edit.Shift(polyline1, -1)`"
									},
									{
										"tag": "example_info",
										"text": "Shifts the edges in the closed polyline wire, so that every edge moves up by one position\nin the ring. The last edge will become the first edge.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 566,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 567,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Wire, face, polyline, polygon."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 568,
									"name": "offset",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The offset, a positive or negative integer."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 549,
					"name": "Weld",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/edit/Weld.ts",
							"line": 31,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 550,
							"name": "Weld",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Make or break welds between vertices.\nIf two vertices are welded, then they share the same position.\n\\n\n- When making a weld between vertices (`make_weld`), a new position is created and the old\n  positions are removed. The new position is calculated as the average of all the existing\n  positions of the vertices. The vertices will then be linked to the new position. This means\n  that if the position is later moved, then all vertices will be affected. The new position is\n  returned. The positions that become shared are returned.\n- When breaking a weld between vetices (`break_weld`), existing positions are duplicated. Each\n  vertex is then linked to one of these duplicate positions. If these positions are later moved,\n  then only one vertex will be affected.  The new positions that get generated are returned.\n\\n",
								"returns": "Entities, a list of new positions depending on type of weld.",
								"tags": [
									{
										"tag": "example",
										"text": "<a href=\"/editor?file=/assets/examples/Functions_edit.Weld_example.mob&node=1\" target=\"_blank\">\nExample model </a>"
									},
									{
										"tag": "example_info",
										"text": "A simple model with polylines, showing how to weld and break vertices.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 551,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 552,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Entities, a list of vertices, or entities from which vertices can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 553,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the method to use: `'make_weld'` or `'break_weld'`."
									},
									"type": {
										"type": "reference",
										"name": "_EWeldMethod"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						578
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						573,
						538,
						554,
						544,
						569,
						559,
						564,
						549
					]
				}
			],
			"sources": [
				{
					"fileName": "modules/functions/edit/index.ts",
					"line": 7,
					"character": 0
				}
			]
		},
		{
			"id": 629,
			"name": "intersect",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "The `intersect` module has functions for calculating intersections between different types of entities."
			},
			"children": [
				{
					"id": 640,
					"name": "IntersectFunc",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 641,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/intersect/index.ts",
									"line": 17,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 642,
									"name": "new IntersectFunc",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 643,
											"name": "model",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "GIModel",
												"package": "@design-automation/mobius-sim",
												"name": "GIModel"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 640,
										"name": "IntersectFunc"
									}
								}
							]
						},
						{
							"id": 644,
							"name": "__model__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/intersect/index.ts",
									"line": 16,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "GIModel",
								"package": "@design-automation/mobius-sim",
								"name": "GIModel"
							}
						},
						{
							"id": 645,
							"name": "PlaneEdge",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/intersect/index.ts",
									"line": 20,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 646,
									"name": "PlaneEdge",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 647,
											"name": "plane",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "TRay",
														"package": "@design-automation/mobius-sim",
														"name": "TRay"
													},
													{
														"type": "reference",
														"qualifiedName": "TPlane",
														"package": "@design-automation/mobius-sim",
														"name": "TPlane"
													}
												]
											}
										},
										{
											"id": 648,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 649,
							"name": "RayFace",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/intersect/index.ts",
									"line": 23,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 650,
									"name": "RayFace",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 651,
											"name": "ray",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "TRay",
												"package": "@design-automation/mobius-sim",
												"name": "TRay"
											}
										},
										{
											"id": 652,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								641
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								644
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								645,
								649
							]
						}
					],
					"sources": [
						{
							"fileName": "modules/functions/intersect/index.ts",
							"line": 14,
							"character": 13
						}
					]
				},
				{
					"id": 635,
					"name": "PlaneEdge",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/intersect/PlaneEdge.ts",
							"line": 33,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 636,
							"name": "PlaneEdge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculates the xyz intersection between a plane and a list of edges.\n\\n\nThis ignores the intersections between planes and polygon face triangles.\n\\n",
								"returns": "A list of xyz intersection coordinates.",
								"tags": [
									{
										"tag": "example",
										"text": "`coords = intersect.PlaneEdge(plane, polyline1)`"
									},
									{
										"tag": "example_info",
										"text": "Returns a list of coordinates where the plane intersects with the edges of polyline1.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 637,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 638,
									"name": "plane",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A plane."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "TRay",
												"package": "@design-automation/mobius-sim",
												"name": "TRay"
											},
											{
												"type": "reference",
												"qualifiedName": "TPlane",
												"package": "@design-automation/mobius-sim",
												"name": "TPlane"
											}
										]
									}
								},
								{
									"id": 639,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "An edge or list of edges, or entities from which edges can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "Txyz",
									"package": "@design-automation/mobius-sim",
									"name": "Txyz"
								}
							}
						}
					]
				},
				{
					"id": 630,
					"name": "RayFace",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/intersect/RayFace.ts",
							"line": 22,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 631,
							"name": "RayFace",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculates the xyz intersection between a ray and one or more polygons.\n\\n\nThe intersection between each polygon face triangle and the ray is caclulated.\nThis ignores the intersections between rays and edges (including polyline edges).\n\\n",
								"returns": "A list of xyz intersection coordinates.",
								"tags": [
									{
										"tag": "example",
										"text": "`coords = intersect.RayFace(ray, polygon1)`"
									},
									{
										"tag": "example_info",
										"text": "Returns a list of coordinates where the ray intersects with the polygon.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 632,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 633,
									"name": "ray",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A ray."
									},
									"type": {
										"type": "reference",
										"qualifiedName": "TRay",
										"package": "@design-automation/mobius-sim",
										"name": "TRay"
									}
								},
								{
									"id": 634,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A polygon or list of polygons."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "Txyz",
									"package": "@design-automation/mobius-sim",
									"name": "Txyz"
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						640
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						635,
						630
					]
				}
			],
			"sources": [
				{
					"fileName": "modules/functions/intersect/index.ts",
					"line": 5,
					"character": 0
				}
			]
		},
		{
			"id": 653,
			"name": "io",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "The `io` module has functions for importing and exporting."
			},
			"children": [
				{
					"id": 709,
					"name": "IoFunc",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 710,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/io/index.ts",
									"line": 54,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 711,
									"name": "new IoFunc",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 712,
											"name": "model",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "GIModel",
												"package": "@design-automation/mobius-sim",
												"name": "GIModel"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 709,
										"name": "IoFunc"
									}
								}
							]
						},
						{
							"id": 713,
							"name": "__enum__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/io/index.ts",
									"line": 34,
									"character": 4
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 714,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 715,
											"name": "Export",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/io/index.ts",
													"line": 35,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 716,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 717,
															"name": "data_format",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/io/index.ts",
																	"line": 36,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EIOExportDataFormat"
																}
															},
															"defaultValue": "Enum._EIOExportDataFormat"
														},
														{
															"id": 718,
															"name": "data_target",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/io/index.ts",
																	"line": 36,
																	"character": 52
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EIODataTarget"
																}
															},
															"defaultValue": "Enum._EIODataTarget"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																717,
																718
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 719,
											"name": "ExportData",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/io/index.ts",
													"line": 38,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 720,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 721,
															"name": "data_format",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/io/index.ts",
																	"line": 39,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EIOExportDataFormat"
																}
															},
															"defaultValue": "Enum._EIOExportDataFormat"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																721
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 722,
											"name": "Import",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/io/index.ts",
													"line": 41,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 723,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 724,
															"name": "data_format",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/io/index.ts",
																	"line": 42,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EIOImportDataFormat"
																}
															},
															"defaultValue": "Enum._EIOImportDataFormat"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																724
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 725,
											"name": "ImportData",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/io/index.ts",
													"line": 44,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 726,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 727,
															"name": "data_format",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/io/index.ts",
																	"line": 45,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EIOImportDataFormat"
																}
															},
															"defaultValue": "Enum._EIOImportDataFormat"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																727
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 728,
											"name": "Write",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/io/index.ts",
													"line": 47,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 729,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 730,
															"name": "data_target",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/io/index.ts",
																	"line": 48,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EIODataTarget"
																}
															},
															"defaultValue": "Enum._EIODataTarget"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																730
															]
														}
													]
												}
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												715,
												719,
												722,
												725,
												728
											]
										}
									]
								}
							},
							"defaultValue": "..."
						},
						{
							"id": 731,
							"name": "__model__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/io/index.ts",
									"line": 53,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "GIModel",
								"package": "@design-automation/mobius-sim",
								"name": "GIModel"
							}
						},
						{
							"id": 732,
							"name": "Export",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/io/index.ts",
									"line": 57,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 733,
									"name": "Export",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 734,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										},
										{
											"id": 735,
											"name": "file_name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 736,
											"name": "data_format",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EIOExportDataFormat"
											}
										},
										{
											"id": 737,
											"name": "data_target",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EIODataTarget"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 738,
							"name": "ExportData",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/io/index.ts",
									"line": 60,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 739,
									"name": "ExportData",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 740,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										},
										{
											"id": 741,
											"name": "data_format",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EIOExportDataFormat"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 742,
							"name": "Geoalign",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/io/index.ts",
									"line": 63,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 743,
									"name": "Geoalign",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 744,
											"name": "lat_long_o",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "Txy",
												"package": "@design-automation/mobius-sim",
												"name": "Txy"
											}
										},
										{
											"id": 745,
											"name": "lat_long_x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "Txy",
												"package": "@design-automation/mobius-sim",
												"name": "Txy"
											}
										},
										{
											"id": 746,
											"name": "elev",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 747,
							"name": "Geolocate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/io/index.ts",
									"line": 66,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 748,
									"name": "Geolocate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 749,
											"name": "lat_long",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "Txy",
												"package": "@design-automation/mobius-sim",
												"name": "Txy"
											}
										},
										{
											"id": 750,
											"name": "rot",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 751,
											"name": "elev",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 752,
							"name": "Import",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/io/index.ts",
									"line": 69,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 753,
									"name": "Import",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 754,
											"name": "data_url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 755,
											"name": "data_format",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EIOImportDataFormat"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 756,
							"name": "ImportData",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/io/index.ts",
									"line": 72,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 757,
									"name": "ImportData",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 758,
											"name": "model_data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 759,
											"name": "data_format",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EIOImportDataFormat"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 760,
							"name": "LatLong2XYZ",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/io/index.ts",
									"line": 75,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 761,
									"name": "LatLong2XYZ",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 762,
											"name": "lat_long",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "Txy",
												"package": "@design-automation/mobius-sim",
												"name": "Txy"
											}
										},
										{
											"id": 763,
											"name": "elev",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 764,
							"name": "Read",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/io/index.ts",
									"line": 78,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 765,
									"name": "Read",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 766,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 767,
							"name": "Write",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/io/index.ts",
									"line": 81,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 768,
									"name": "Write",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 769,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 770,
											"name": "file_name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 771,
											"name": "data_target",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EIODataTarget"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								710
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								713,
								731
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								732,
								738,
								742,
								747,
								752,
								756,
								760,
								764,
								767
							]
						}
					],
					"sources": [
						{
							"fileName": "modules/functions/io/index.ts",
							"line": 31,
							"character": 13
						}
					]
				},
				{
					"id": 677,
					"name": "Export",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/io/Export.ts",
							"line": 41,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 678,
							"name": "Export",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Export data from the model as a file.\n\\n\nIf you export to your hard disk,\nit will result in a popup in your browser, asking you to save the file.\n\\n\nIf you export to Local Storage, there will be no popup.\n\\n",
								"returns": "void",
								"tags": [
									{
										"tag": "example",
										"text": "`io.Export (#pg, 'my\\_model.obj', 'obj', 'Save to Hard Disk')`"
									},
									{
										"tag": "example_info",
										"text": "Exports all the polygons in the model as an OBJ, saved to the hard disk.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 679,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 680,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "(Optional) Entities to be exported. If null, the whole model will be exported."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								},
								{
									"id": 681,
									"name": "file_name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Name of the file as a string."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 682,
									"name": "data_format",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the export file format: `'gi', 'sim', 'obj_v', 'obj_ps', 'geojson'` or `'gltf'`."
									},
									"type": {
										"type": "reference",
										"name": "_EIOExportDataFormat"
									}
								},
								{
									"id": 683,
									"name": "data_target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, where the data is to be exported to: `'Save to Hard Disk'` or `'Save to Local Storage'`."
									},
									"type": {
										"type": "reference",
										"name": "_EIODataTarget"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 684,
					"name": "ExportData",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/io/ExportData.ts",
							"line": 29,
							"character": 23
						}
					],
					"signatures": [
						{
							"id": 685,
							"name": "ExportData",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Export data from the model as a string.\n\\n",
								"returns": "The model data as a string.",
								"tags": [
									{
										"tag": "example",
										"text": "`io.Export (#pg, 'my_model.obj', 'obj')`"
									},
									{
										"tag": "example_info",
										"text": "Exports all the polygons in the model as an OBJ.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 686,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 687,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "(Optional) Entities to be exported. If null, the whole model will be exported."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								},
								{
									"id": 688,
									"name": "data_format",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the export file format: `'gi', 'sim', 'obj_v', 'obj_ps', 'geojson'` or `'gltf'`."
									},
									"type": {
										"type": "reference",
										"name": "_EIOExportDataFormat"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 695,
					"name": "Geoalign",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/io/Geoalign.ts",
							"line": 26,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 696,
							"name": "Geoalign",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Set the geolocation of the Cartesian coordinate system.\nDoes the same as the Geolocate function, but with alternate parameters.\n\\n\nThe Cartesian coordinate system is geolocated by defining two points:\n- The latitude-longitude of the Cartesian origin.\n- The latitude-longitude of a point on the positive Cartesian X-axis.\n\\n",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 697,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 698,
									"name": "lat_long_o",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Set the latitude and longitude of the origin of the Cartesian coordinate\nsystem."
									},
									"type": {
										"type": "reference",
										"qualifiedName": "Txy",
										"package": "@design-automation/mobius-sim",
										"name": "Txy"
									}
								},
								{
									"id": 699,
									"name": "lat_long_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Set the latitude and longitude of a point on the x-axis of the Cartesian\ncoordinate system."
									},
									"type": {
										"type": "reference",
										"qualifiedName": "Txy",
										"package": "@design-automation/mobius-sim",
										"name": "Txy"
									}
								},
								{
									"id": 700,
									"name": "elev",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Set the elevation of the Cartesian coordinate system above the ground plane."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 689,
					"name": "Geolocate",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/io/Geolocate.ts",
							"line": 24,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 690,
							"name": "Geolocate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Set the geolocation of the Cartesian coordinate system.\nDoes the same as the Geoalign function, but with alternate parameters.\n\\n\nThe Cartesian coordinate system is geolocated by defining two points:\n- The latitude-longitude of the Cartesian origin.\n- The counter-clockwise rotation around the Cartesian origin, in radians.\n\\n",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 691,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 692,
									"name": "lat_long",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Set the latitude and longitude of the origin of the Cartesian coordinate system."
									},
									"type": {
										"type": "reference",
										"qualifiedName": "Txy",
										"package": "@design-automation/mobius-sim",
										"name": "Txy"
									}
								},
								{
									"id": 693,
									"name": "rot",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Set the counter-clockwise rotation of the Cartesian coordinate system, in radians."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 694,
									"name": "elev",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Set the elevation of the Cartesian coordinate system above the ground plane."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 671,
					"name": "Import",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/io/Import.ts",
							"line": 35,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 672,
							"name": "Import",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Imports data into the model.\n\\n\nThere are two ways of specifying the file location to be imported:\n- A url, e.g. \"https://www.dropbox.com/xxxx/my_data.obj\"\n- A file name in the local storage, e.g. \"my\\_data.obj\". See documentation on local storage in the menu for more info.\n\\n\nTo place a file in local storage, go to the Mobius menu, and select 'Local Storage' from the dropdown.\nNote that a script using a file in local storage may fail when others try to open the file.\n\\n",
								"returns": "A list of the positions, points, polylines, polygons and collections added to the model.",
								"tags": [
									{
										"tag": "example",
										"text": "`io.Import (\"my_data.obj\", obj)`"
									},
									{
										"tag": "example_info",
										"text": "Imports the data from my\\_data.obj, from local storage.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 673,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 674,
									"name": "data_url",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The url to retrieve the data from."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 675,
									"name": "data_format",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the file format: `'gi', 'sim', 'obj', 'geojson'` or `'CityJSON'`."
									},
									"type": {
										"type": "reference",
										"name": "_EIOImportDataFormat"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "TId",
												"package": "@design-automation/mobius-sim",
												"name": "TId"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "TId",
													"package": "@design-automation/mobius-sim",
													"name": "TId"
												}
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 676,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "modules/functions/io/Import.ts",
															"line": 35,
															"character": 125
														}
													]
												}
											}
										]
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 665,
					"name": "ImportData",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/io/ImportData.ts",
							"line": 20,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 666,
							"name": "ImportData",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Imports a string of geometry data into the model, in various formats.\nThe geometry will be added to the model.\n\\n",
								"returns": "A collection of entities added to the model.",
								"tags": [
									{
										"tag": "example",
										"text": "`io.ImportData (data_str, \"obj\")`"
									},
									{
										"tag": "example_info",
										"text": "Imports the data in obj format.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 667,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 668,
									"name": "model_data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The model data."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 669,
									"name": "data_format",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the file format: `'gi', 'sim', 'obj', 'geojson'` or `'CityJSON'`."
									},
									"type": {
										"type": "reference",
										"name": "_EIOImportDataFormat"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"qualifiedName": "TId",
										"package": "@design-automation/mobius-sim",
										"name": "TId"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "TId",
											"package": "@design-automation/mobius-sim",
											"name": "TId"
										}
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 670,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/io/ImportData.ts",
													"line": 20,
													"character": 117
												}
											]
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 701,
					"name": "LatLong2XYZ",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/io/LatLong2XYZ.ts",
							"line": 29,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 702,
							"name": "LatLong2XYZ",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Transform a coordinate from latitude-longitude Geodesic coordinate to a Cartesian XYZ coordinate,\nbased on the geolocation of the model.",
								"returns": "XYZ coordinates.\n"
							},
							"parameters": [
								{
									"id": 703,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 704,
									"name": "lat_long",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Latitude and longitude coordinates."
									},
									"type": {
										"type": "reference",
										"qualifiedName": "Txy",
										"package": "@design-automation/mobius-sim",
										"name": "Txy"
									}
								},
								{
									"id": 705,
									"name": "elev",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Set the elevation of the Cartesian coordinate system above the ground plane."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "Txyz",
								"package": "@design-automation/mobius-sim",
								"name": "Txyz"
							}
						}
					]
				},
				{
					"id": 654,
					"name": "Read",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/io/Read.ts",
							"line": 14,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 655,
							"name": "Read",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Read data from a Url or from local storage.",
								"returns": "The data.\n"
							},
							"parameters": [
								{
									"id": 656,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 657,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The data to be read (from URL or from Local Storage)."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 658,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "modules/functions/io/Read.ts",
															"line": 14,
															"character": 79
														}
													]
												}
											}
										]
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 659,
					"name": "Write",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/io/Write.ts",
							"line": 20,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 660,
							"name": "Write",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Write data to the hard disk or to the local storage.\nDepending on your browser's download settings,\na dialog box may pop up to manually confirm the action if writing to the hard disk.",
								"returns": "Whether the data is successfully saved. (True/false)\n"
							},
							"parameters": [
								{
									"id": 661,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 662,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The data to be saved (can be the url to the file)."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 663,
									"name": "file_name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The name to be saved in the file system as a string (file extension should be included)."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 664,
									"name": "data_target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, where the data is to be exported to: `'Save to Hard Disk'` or `'Save to Local Storage'`."
									},
									"type": {
										"type": "reference",
										"name": "_EIODataTarget"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"qualifiedName": "Boolean",
										"package": "typescript",
										"name": "Boolean"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 706,
					"name": "_getFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/io/_getFile.ts",
							"line": 98,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 707,
							"name": "_getFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 708,
									"name": "source",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						709
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						677,
						684,
						695,
						689,
						671,
						665,
						701,
						654,
						659,
						706
					]
				}
			],
			"sources": [
				{
					"fileName": "modules/functions/io/index.ts",
					"line": 5,
					"character": 0
				}
			]
		},
		{
			"id": 772,
			"name": "list",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "The `list` module has functions for working with lists of items.\nThese functions have no direct link with the model, they are generic functions for manipulating lists.\n/n\nThe functions are often used when manipulating lists of IDs of entities in the model.\nThese functions neither make nor modify anything in the model.\n/n\nIn addition to these functions, there are also various inline functions available for working with lists."
			},
			"children": [
				{
					"id": 799,
					"name": "ListFunc",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 800,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 801,
									"name": "new ListFunc",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 799,
										"name": "ListFunc"
									}
								}
							]
						},
						{
							"id": 802,
							"name": "__enum__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/list/index.ts",
									"line": 28,
									"character": 4
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 803,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 804,
											"name": "Add",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/list/index.ts",
													"line": 29,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 805,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 806,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/list/index.ts",
																	"line": 30,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EAddMethod"
																}
															},
															"defaultValue": "Enum._EAddMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																806
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 807,
											"name": "Remove",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/list/index.ts",
													"line": 32,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 808,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 809,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/list/index.ts",
																	"line": 33,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_ERemoveMethod"
																}
															},
															"defaultValue": "Enum._ERemoveMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																809
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 810,
											"name": "Replace",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/list/index.ts",
													"line": 35,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 811,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 812,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/list/index.ts",
																	"line": 36,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EReplaceMethod"
																}
															},
															"defaultValue": "Enum._EReplaceMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																812
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 813,
											"name": "Sort",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/list/index.ts",
													"line": 38,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 814,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 815,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/list/index.ts",
																	"line": 39,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_ESortMethod"
																}
															},
															"defaultValue": "Enum._ESortMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																815
															]
														}
													]
												}
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												804,
												807,
												810,
												813
											]
										}
									]
								}
							},
							"defaultValue": "..."
						},
						{
							"id": 816,
							"name": "Add",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/list/index.ts",
									"line": 44,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 817,
									"name": "Add",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 818,
											"name": "list",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 819,
											"name": "item",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 820,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EAddMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 821,
							"name": "Remove",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/list/index.ts",
									"line": 47,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 822,
									"name": "Remove",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 823,
											"name": "list",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 824,
											"name": "item",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 825,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_ERemoveMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 826,
							"name": "Replace",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/list/index.ts",
									"line": 50,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 827,
									"name": "Replace",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 828,
											"name": "list",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 829,
											"name": "old_item",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 830,
											"name": "new_item",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 831,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EReplaceMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 832,
							"name": "Sort",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/list/index.ts",
									"line": 53,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 833,
									"name": "Sort",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 834,
											"name": "list",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 835,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_ESortMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 836,
							"name": "Splice",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/list/index.ts",
									"line": 56,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 837,
									"name": "Splice",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 838,
											"name": "list",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 839,
											"name": "index",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 840,
											"name": "num_to_remove",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 841,
											"name": "items_to_insert",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								800
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								802
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								816,
								821,
								826,
								832,
								836
							]
						}
					],
					"sources": [
						{
							"fileName": "modules/functions/list/index.ts",
							"line": 25,
							"character": 13
						}
					]
				},
				{
					"id": 773,
					"name": "Add",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/list/Add.ts",
							"line": 28,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 774,
							"name": "Add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds an item to a list.",
								"returns": "void",
								"tags": [
									{
										"tag": "example",
										"text": "`append = list.Add([1,2,3], 4, 'at_end')`"
									},
									{
										"tag": "example_info",
										"text": "Expected value of list is `[1,2,3,4]`."
									},
									{
										"tag": "example",
										"text": "`append = list.Add([1,2,3], [4, 5], 'at_end')`"
									},
									{
										"tag": "example_info",
										"text": "Expected value of list is `[1,2,3,[4,5]]`."
									},
									{
										"tag": "example",
										"text": "`append = list.Add([1,2,3], [4,5], 'extend_end')`"
									},
									{
										"tag": "example_info",
										"text": "Expected value of list is `[1,2,3,4,5]`."
									},
									{
										"tag": "example",
										"text": "`append = list.Add([\"a\", \"c\", \"d\"], \"b\", 'alpha_descending')`"
									},
									{
										"tag": "example_info",
										"text": "Expected value of list is `[\"a\", \"b\", \"c\", \"d\"]`.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 775,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "List to add the item to."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 776,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Item to add."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 777,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, select the method: `'to_start', 'to_end', 'extend_start', 'extend_end',\n'alpha_descending', 'alpha_ascending', 'numeric_descending', 'numeric_ascending',\n'ID_descending'` or `'ID_ascending'`."
									},
									"type": {
										"type": "reference",
										"name": "_EAddMethod"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 778,
					"name": "Remove",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/list/Remove.ts",
							"line": 25,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 779,
							"name": "Remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes items in a list.\n\\n\nIf method is set to 'index', then item should be the index of the item to be replaced.\nNegative indexes are allowed.\nIf method is not set to 'index', then item should be the value.",
								"returns": "void",
								"tags": [
									{
										"tag": "example",
										"text": "`list.Remove(list, 3, 'index')`"
									},
									{
										"tag": "example_info",
										"text": "where `list = [0, 1, 2, 3]`. Expected new value of list is [0, 1, 2]."
									},
									{
										"tag": "example",
										"text": "`list.Remove(list, 3, 'all_values')`"
									},
									{
										"tag": "example_info",
										"text": "where `list = [3, 1, 2, 3, 4]`. Expected new value of list is  [1, 2, 4].\n"
									}
								]
							},
							"parameters": [
								{
									"id": 780,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The list in which to remove items."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 781,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The item to remove, either the index of the item or the value. Negative indexes are allowed."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 782,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, select the method for removing items from the list: `'index', 'first_value',\n'last_value'` or `'all_values'`."
									},
									"type": {
										"type": "reference",
										"name": "_ERemoveMethod"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 783,
					"name": "Replace",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/list/Replace.ts",
							"line": 27,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 784,
							"name": "Replace",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Replaces items in a list.\n\\n\nIf method is set to 'index', then old\\_item should be the index of the item to be replaced. Negative indexes are allowed.\nIf method is not set to 'index', then old\\_item should be the value to be replaced.",
								"returns": "void",
								"tags": [
									{
										"tag": "example",
										"text": "`list.Replace(list, 3, [6, 7, 8], 'last_value')`"
									},
									{
										"tag": "example_info",
										"text": "where `list = [3, 1, 2, 3, 4]`.\nExpected new value of list is `[3, 1, 2, [6, 7, 8], 4]`."
									},
									{
										"tag": "example",
										"text": "`list.Replace(list, 2, 0, 'index')`"
									},
									{
										"tag": "example_info",
										"text": "where `list = [0,1,2,3,4,5]`.\nExpected new value of list is `[0,1,0,3,4,5]`.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 785,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The list in which to replace items."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 786,
									"name": "old_item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The old item to replace."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 787,
									"name": "new_item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The new item."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 788,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, select the method for replacing items in the list: `'index', 'first_value',\n'last_value'` or `'all_values'`."
									},
									"type": {
										"type": "reference",
										"name": "_EReplaceMethod"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 789,
					"name": "Sort",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/list/Sort.ts",
							"line": 26,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 790,
							"name": "Sort",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sorts a list, based on the values of the items in the list. \\n For alphabetical sort, values are\nsorted character by character, numbers before upper case alphabets, upper case alphabets before\nlower case alphabets.",
								"returns": "void",
								"tags": [
									{
										"tag": "example",
										"text": "`list.Sort(list, 'alpha')`"
									},
									{
										"tag": "example_info",
										"text": "where `list = [\"1\",\"2\",\"10\",\"Orange\",\"apple\"]`. Expected value of list is\n`[\"1\",\"10\",\"2\",\"Orange\",\"apple\"]`."
									},
									{
										"tag": "example",
										"text": "`list.Sort(list, 'numeric')`"
									},
									{
										"tag": "example_info",
										"text": "where `list = [56,6,48]`. Expected value of list is `[6,48,56]`.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 791,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "List to sort."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 792,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, specifies the sort method to use: `'reverse', 'alpha_descending',\n'alpha_ascending', 'numeric_descending', 'numeric_ascending', 'ID_descending', 'ID_ascending',\n'shift_1', 'reverse_shift_1'` or `'random'`."
									},
									"type": {
										"type": "reference",
										"name": "_ESortMethod"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 793,
					"name": "Splice",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/list/Splice.ts",
							"line": 22,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 794,
							"name": "Splice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes and inserts items in a list.\n\\n\nIf no `items_to_add` are specified, then items are only removed.\nIf `num_to_remove` is 0, then values are only inserted.",
								"returns": "void",
								"tags": [
									{
										"tag": "example",
										"text": "`result = list.Splice(list1, 1, 3, [2.2, 3.3])`"
									},
									{
										"tag": "example_info",
										"text": "where list1 = `[10, 20, 30, 40, 50]`.\nExpected value of result is `[10, 2.2, 3.3, 50]`. New items were added where the items were removed.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 795,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "List to splice."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 796,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Zero-based index after which to start removing or inserting items."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 797,
									"name": "num_to_remove",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Number of items to remove."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 798,
									"name": "items_to_insert",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "(Optional) List of items to add, or null/empty list."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						799
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						773,
						778,
						783,
						789,
						793
					]
				}
			],
			"sources": [
				{
					"fileName": "modules/functions/list/index.ts",
					"line": 11,
					"character": 0
				}
			]
		},
		{
			"id": 842,
			"name": "make",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "The `make` module has functions for making new entities in the model.\nAll these functions return the IDs of the entities that are created."
			},
			"children": [
				{
					"id": 899,
					"name": "MakeFunc",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 900,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/make/index.ts",
									"line": 57,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 901,
									"name": "new MakeFunc",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 902,
											"name": "model",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "GIModel",
												"package": "@design-automation/mobius-sim",
												"name": "GIModel"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 899,
										"name": "MakeFunc"
									}
								}
							]
						},
						{
							"id": 903,
							"name": "__enum__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/make/index.ts",
									"line": 38,
									"character": 4
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 904,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 905,
											"name": "Cut",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/make/index.ts",
													"line": 39,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 906,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 907,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/make/index.ts",
																	"line": 40,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_ECutMethod"
																}
															},
															"defaultValue": "Enum._ECutMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																907
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 908,
											"name": "Extrude",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/make/index.ts",
													"line": 42,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 909,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 910,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/make/index.ts",
																	"line": 43,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EExtrudeMethod"
																}
															},
															"defaultValue": "Enum._EExtrudeMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																910
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 911,
											"name": "Loft",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/make/index.ts",
													"line": 45,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 912,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 913,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/make/index.ts",
																	"line": 46,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_ELoftMethod"
																}
															},
															"defaultValue": "Enum._ELoftMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																913
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 914,
											"name": "Polyline",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/make/index.ts",
													"line": 48,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 915,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 916,
															"name": "close",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/make/index.ts",
																	"line": 49,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EClose"
																}
															},
															"defaultValue": "Enum._EClose"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																916
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 917,
											"name": "Sweep",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/make/index.ts",
													"line": 51,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 918,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 919,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/make/index.ts",
																	"line": 52,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EExtrudeMethod"
																}
															},
															"defaultValue": "Enum._EExtrudeMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																919
															]
														}
													]
												}
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												905,
												908,
												911,
												914,
												917
											]
										}
									]
								}
							},
							"defaultValue": "..."
						},
						{
							"id": 920,
							"name": "__model__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/make/index.ts",
									"line": 56,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "GIModel",
								"package": "@design-automation/mobius-sim",
								"name": "GIModel"
							}
						},
						{
							"id": 921,
							"name": "Clone",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/make/index.ts",
									"line": 60,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 922,
									"name": "Clone",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 923,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 924,
							"name": "Copy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/make/index.ts",
									"line": 63,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 925,
									"name": "Copy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 926,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										},
										{
											"id": 927,
											"name": "vector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "Txyz",
														"package": "@design-automation/mobius-sim",
														"name": "Txyz"
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "Txyz",
															"package": "@design-automation/mobius-sim",
															"name": "Txyz"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 928,
							"name": "Cut",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/make/index.ts",
									"line": 66,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 929,
									"name": "Cut",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 930,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 931,
											"name": "plane",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "TPlane",
												"package": "@design-automation/mobius-sim",
												"name": "TPlane"
											}
										},
										{
											"id": 932,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_ECutMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 933,
							"name": "Extrude",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/make/index.ts",
									"line": 69,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 934,
									"name": "Extrude",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 935,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 936,
											"name": "dist",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "reference",
														"qualifiedName": "Txyz",
														"package": "@design-automation/mobius-sim",
														"name": "Txyz"
													}
												]
											}
										},
										{
											"id": 937,
											"name": "divisions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 938,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EExtrudeMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 939,
							"name": "Join",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/make/index.ts",
									"line": 72,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 940,
									"name": "Join",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 941,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 942,
							"name": "Loft",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/make/index.ts",
									"line": 75,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 943,
									"name": "Loft",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 944,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										},
										{
											"id": 945,
											"name": "divisions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 946,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_ELoftMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 947,
							"name": "Point",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/make/index.ts",
									"line": 78,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 948,
									"name": "Point",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 949,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 950,
							"name": "Polygon",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/make/index.ts",
									"line": 81,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 951,
									"name": "Polygon",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 952,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 953,
							"name": "Polyline",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/make/index.ts",
									"line": 84,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 954,
									"name": "Polyline",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 955,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										},
										{
											"id": 956,
											"name": "close",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EClose"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 957,
							"name": "Position",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/make/index.ts",
									"line": 87,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 958,
									"name": "Position",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 959,
											"name": "coords",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "Txyz",
														"package": "@design-automation/mobius-sim",
														"name": "Txyz"
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "Txyz",
															"package": "@design-automation/mobius-sim",
															"name": "Txyz"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"qualifiedName": "Txyz",
																"package": "@design-automation/mobius-sim",
																"name": "Txyz"
															}
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 960,
							"name": "Sweep",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/make/index.ts",
									"line": 90,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 961,
									"name": "Sweep",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 962,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 963,
											"name": "x_section",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 964,
											"name": "divisions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 965,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EExtrudeMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								900
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								903,
								920
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								921,
								924,
								928,
								933,
								939,
								942,
								947,
								950,
								953,
								957,
								960
							]
						}
					],
					"sources": [
						{
							"fileName": "modules/functions/make/index.ts",
							"line": 35,
							"character": 13
						}
					]
				},
				{
					"id": 895,
					"name": "Clone",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/make/Clone.ts",
							"line": 18,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 896,
							"name": "Clone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a new copy of specified entities to the model, and deletes the original entity.",
								"returns": "Entities, the cloned entity or a list of cloned entities.",
								"tags": [
									{
										"tag": "example",
										"text": "`copies = make.Clone([position1,polyine1,polygon1])`"
									},
									{
										"tag": "example_info",
										"text": "Creates a copy of position1, polyline1, and polygon1 and deletes the originals.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 897,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 898,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Entity or lists of entities to be copied. Entities can be positions, points, polylines, polygons and collections."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"qualifiedName": "TId",
										"package": "@design-automation/mobius-sim",
										"name": "TId"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "TId",
											"package": "@design-automation/mobius-sim",
											"name": "TId"
										}
									},
									{
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"qualifiedName": "TId",
												"package": "@design-automation/mobius-sim",
												"name": "TId"
											}
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 890,
					"name": "Copy",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/make/Copy.ts",
							"line": 45,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 891,
							"name": "Copy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a copy of one or more entities (without deleting the original entity).\n\\n\nPositions, objects, and collections can be copied. Sub-entities (vertices, edges, and\nwires) cannot be copied since they cannot exist without a parent entity.\n\\n\nWhen entities are copied, their positions are also copied. The original entities and the copied\nentities will not be welded (they will not share positions).\n\\n\nThe copy operation includes an option to also move entities, by a specified vector. If the vector\nis null, then the entities will not be moved.\n\\n\nThe vector argument is overloaded. If you supply a list of vectors, the function will try to find\na 1 -to-1 match between the list of entities and the list of vectors. In the overloaded case, if\nthe two lists do not have the same length, then an error will be thrown.\n\\n",
								"returns": "Entities, the copied entity or a list of copied entities.",
								"tags": [
									{
										"tag": "example",
										"text": "`copies = make.Copy([position1, polyine1, polygon1], [0,0,10])`"
									},
									{
										"tag": "example_info",
										"text": "Creates a copy of position1, polyine1, and polygon1 and moves all three entities 10\nunits in the Z direction.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 892,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 893,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Entity or lists of entities to be copied. Entities can be positions, points,\npolylines, polygons and collections."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								},
								{
									"id": 894,
									"name": "vector",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A vector to move the entities by after copying, can be `null`."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "Txyz",
												"package": "@design-automation/mobius-sim",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "Txyz",
													"package": "@design-automation/mobius-sim",
													"name": "Txyz"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"qualifiedName": "TId",
										"package": "@design-automation/mobius-sim",
										"name": "TId"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "TId",
											"package": "@design-automation/mobius-sim",
											"name": "TId"
										}
									},
									{
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"qualifiedName": "TId",
												"package": "@design-automation/mobius-sim",
												"name": "TId"
											}
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 884,
					"name": "Cut",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/make/Cut.ts",
							"line": 39,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 885,
							"name": "Cut",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Cuts polygons and polylines using a plane.\n\\n\n- If the 'keep\\_above' method is selected, then only the part of the cut entities above the plane are kept.\n- If the 'keep\\_below' method is selected, then only the part of the cut entities below the plane are kept.\n- If the 'keep\\_both' method is selected, then both the parts of the cut entities are kept.\n\\n\nCurrently does not support cutting polygons with holes.\n\\n\nIf 'keep\\_both' is selected, returns a list of two lists.\n`[[entities above the plane], [entities below the plane]]`.",
								"returns": "Entities, a list of three lists of entities resulting from the cut.\n\n"
							},
							"parameters": [
								{
									"id": 886,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 887,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Polylines or polygons, or entities from which polyline or polygons can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 888,
									"name": "plane",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The plane to cut with."
									},
									"type": {
										"type": "reference",
										"qualifiedName": "TPlane",
										"package": "@design-automation/mobius-sim",
										"name": "TPlane"
									}
								},
								{
									"id": 889,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the method for cutting: `'keep_above', 'keep_below'` or `'keep_both'`."
									},
									"type": {
										"type": "reference",
										"name": "_ECutMethod"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "TId",
											"package": "@design-automation/mobius-sim",
											"name": "TId"
										}
									},
									{
										"type": "tuple",
										"elements": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "TId",
													"package": "@design-automation/mobius-sim",
													"name": "TId"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "TId",
													"package": "@design-automation/mobius-sim",
													"name": "TId"
												}
											}
										]
									}
								]
							}
						}
					]
				},
				{
					"id": 866,
					"name": "Extrude",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/make/Extrude.ts",
							"line": 48,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 867,
							"name": "Extrude",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Extrudes geometry by distance or by vector.\n- Extrusion of a position, vertex, or point produces polylines;\n- Extrusion of an edge, wire, or polyline produces polygons;\n- Extrusion of a polygon produces new polygons, capped at the top.\n\\n\n\\n\nThe geometry that is generated depends on the method that is selected.\n- The 'quads' method will generate polygons.\n- The 'stringers' and 'ribs' methods will generate polylines.\n- The 'copies' method will generate copies of the input geometry type.",
								"returns": "Entities, a list of new polygons or polylines resulting from the extrude.",
								"tags": [
									{
										"tag": "example",
										"text": "`extrusion1 = make.Extrude(point1, 10, 2, 'quads')`"
									},
									{
										"tag": "example_info",
										"text": "Creates a polyline of total length 10 (with two edges of length 5 each) in the\nz-direction.\nIn this case, the 'quads' setting is ignored."
									},
									{
										"tag": "example",
										"text": "`extrusion2 = make.Extrude(polygon1, [0,5,0], 1, 'quads')`"
									},
									{
										"tag": "example_info",
										"text": "Extrudes polygon1 by 5 in the y-direction, creating a list of quad surfaces.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 868,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 869,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of entities, can be any type of entitiy."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 870,
									"name": "dist",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Number or vector. If number, assumed to be `[0,0,value]` (i.e. extrusion distance in\nz-direction)."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"qualifiedName": "Txyz",
												"package": "@design-automation/mobius-sim",
												"name": "Txyz"
											}
										]
									}
								},
								{
									"id": 871,
									"name": "divisions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Number of divisions to divide extrusion by. Minimum is 1."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 872,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, choose what to select when extruding edges: `'quads', 'stringers', 'ribs'` or `'copies'`."
									},
									"type": {
										"type": "reference",
										"name": "_EExtrudeMethod"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"qualifiedName": "TId",
										"package": "@design-automation/mobius-sim",
										"name": "TId"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "TId",
											"package": "@design-automation/mobius-sim",
											"name": "TId"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 880,
					"name": "Join",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/make/Join.ts",
							"line": 22,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 881,
							"name": "Join",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Joins existing polyline or polygons to create new polyline or polygons.\n\\n\nIn order to be joined, the polylines or polygons must be fused (i.e. share the same positions)\n\\n\nThe existing polygons are not affected.\n\\n\nNote: Joining polylines currently not implemented.",
								"returns": "Entities, a list of new polylines or polygons resulting from the join.\n"
							},
							"parameters": [
								{
									"id": 882,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 883,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Polylines or polygons, or entities from which polylines or polygons can be extracted."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				},
				{
					"id": 860,
					"name": "Loft",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/make/Loft.ts",
							"line": 33,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 861,
							"name": "Loft",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Lofts between entities.\n\\n\nThe geometry that is generated depends on the method that is selected.\n- The 'quads' method will generate polygons.\n- The 'stringers' and 'ribs' methods will generate polylines.\n- The 'copies' method will generate copies of the input geometry type.",
								"returns": "Entities, a list of new polygons or polylines resulting from the loft.",
								"tags": [
									{
										"tag": "example",
										"text": "<a href=\"/editor?file=/assets/gallery/building_examples/Chapel_Wavy_roof.mob&node=3\" target=\"_blank\"> Example model from the gallery, showing polylines being lofted. </a>"
									},
									{
										"tag": "example",
										"text": "`quads = make.Loft([polyline1,polyline2,polyline3], 1, 'open_quads')`"
									},
									{
										"tag": "example_info",
										"text": "Creates quad polygons lofting between polyline1, polyline2, polyline3."
									},
									{
										"tag": "example",
										"text": "`quads = make.Loft([polyline1,polyline2,polyline3], 1, 'closed_quads')`"
									},
									{
										"tag": "example_info",
										"text": "Creates quad polygons lofting between polyline1, polyline2, polyline3, and back to polyline1."
									},
									{
										"tag": "example",
										"text": "`quads = make.Loft([ [polyline1,polyline2], [polyline3,polyline4] ] , 1, 'open_quads')`"
									},
									{
										"tag": "example_info",
										"text": "Creates quad polygons lofting first between polyline1 and polyline2, and then between polyline3 and polyline4.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 862,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 863,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "List of entities, or list of lists of entities."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								},
								{
									"id": 864,
									"name": "divisions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The number of divisions in the resultant entities. Minimum is 1."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 865,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, if 'closed', then close the loft back to the first entity in the list:\n`'open_quads', 'closed_quads', 'open_stringers', 'closed_stringers', 'open_ribs', 'closed_ribs'` or `'copies'`."
									},
									"type": {
										"type": "reference",
										"name": "_ELoftMethod"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				},
				{
					"id": 847,
					"name": "Point",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/make/Point.ts",
							"line": 18,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 848,
							"name": "Point",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds one or more new points to the model. Points are objects that can be added to collections.",
								"returns": "Entities, new point or a list of new points.",
								"tags": [
									{
										"tag": "example",
										"text": "`point1 = make.Point(position1)`"
									},
									{
										"tag": "example_info",
										"text": "Creates a point at position1.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 849,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 850,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Position, or list of positions, or entities from which positions can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"qualifiedName": "TId",
										"package": "@design-automation/mobius-sim",
										"name": "TId"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "TId",
											"package": "@design-automation/mobius-sim",
											"name": "TId"
										}
									},
									{
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"qualifiedName": "TId",
												"package": "@design-automation/mobius-sim",
												"name": "TId"
											}
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 856,
					"name": "Polygon",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/make/Polygon.ts",
							"line": 30,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 857,
							"name": "Polygon",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds one or more new polygons to the model.",
								"returns": "Entities, new polygon, or a list of new polygons.",
								"tags": [
									{
										"tag": "example",
										"text": "`polygon1 = make.Polygon([pos1,pos2,pos3])`"
									},
									{
										"tag": "example_info",
										"text": "Creates a polygon with vertices pos1, pos2, pos3 in sequence."
									},
									{
										"tag": "example",
										"text": "`polygons = make.Polygon([[pos1,pos2,pos3], [pos3,pos4,pos5]])`"
									},
									{
										"tag": "example_info",
										"text": "Creates two polygons, the first with vertices at `[pos1,pos2,pos3]`, and the second\nwith vertices at `[pos3,pos4,pos5]`.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 858,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 859,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "List or nested lists of positions, or entities from which positions can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"qualifiedName": "TId",
										"package": "@design-automation/mobius-sim",
										"name": "TId"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "TId",
											"package": "@design-automation/mobius-sim",
											"name": "TId"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 851,
					"name": "Polyline",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/make/Polyline.ts",
							"line": 30,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 852,
							"name": "Polyline",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds one or more new polylines to the model. Polylines are objects.",
								"returns": "Entities, new polyline, or a list of new polylines.",
								"tags": [
									{
										"tag": "example",
										"text": "`polyline1 = make.Polyline([position1,position2,position3], 'close')`"
									},
									{
										"tag": "example_info",
										"text": "Creates a closed polyline with vertices position1, position2, position3 in sequence.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 853,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 854,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "List or nested lists of positions, or entities from which positions can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								},
								{
									"id": 855,
									"name": "close",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, `'open'` or `'close'`."
									},
									"type": {
										"type": "reference",
										"name": "_EClose"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"qualifiedName": "TId",
										"package": "@design-automation/mobius-sim",
										"name": "TId"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "TId",
											"package": "@design-automation/mobius-sim",
											"name": "TId"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 843,
					"name": "Position",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/make/Position.ts",
							"line": 22,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 844,
							"name": "Position",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds one or more new positions to the model. Positions are unique entities and cannot be added to\ncollections.",
								"returns": "A new position, or nested list of new positions.\nEach position is an entity with an xyz attribute, that can be called with `posi@xyz`.",
								"tags": [
									{
										"tag": "example",
										"text": "`position1 = make.Position([1,2,3])`"
									},
									{
										"tag": "example_info",
										"text": "Creates a position with coordinates x=1, y=2, z=3."
									},
									{
										"tag": "example",
										"text": "`positions = make.Position([[1,2,3],[3,4,5],[5,6,7]])`"
									},
									{
										"tag": "example_info",
										"text": "Creates three positions, with coordinates [1,2,3],[3,4,5] and [5,6,7].\n"
									}
								]
							},
							"parameters": [
								{
									"id": 845,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 846,
									"name": "coords",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of three numbers, or a list of lists of three numbers."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "Txyz",
												"package": "@design-automation/mobius-sim",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "Txyz",
													"package": "@design-automation/mobius-sim",
													"name": "Txyz"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "reference",
														"qualifiedName": "Txyz",
														"package": "@design-automation/mobius-sim",
														"name": "Txyz"
													}
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"qualifiedName": "TId",
										"package": "@design-automation/mobius-sim",
										"name": "TId"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "TId",
											"package": "@design-automation/mobius-sim",
											"name": "TId"
										}
									},
									{
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"qualifiedName": "TId",
												"package": "@design-automation/mobius-sim",
												"name": "TId"
											}
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 873,
					"name": "Sweep",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/make/Sweep.ts",
							"line": 31,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 874,
							"name": "Sweep",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sweeps a cross section wire along a backbone wire.",
								"returns": "Entities, a list of new polygons or polylines resulting from the sweep.\n"
							},
							"parameters": [
								{
									"id": 875,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 876,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Wires, or entities from which wires can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 877,
									"name": "x_section",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Cross section wire to sweep, or entity from which a wire can be extracted."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 878,
									"name": "divisions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Segment length or number of segments."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 879,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, select the method for sweeping: `'quads', 'stringers', 'ribs'` or `'copies'`."
									},
									"type": {
										"type": "reference",
										"name": "_EExtrudeMethod"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						899
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						895,
						890,
						884,
						866,
						880,
						860,
						847,
						856,
						851,
						843,
						873
					]
				}
			],
			"sources": [
				{
					"fileName": "modules/functions/make/index.ts",
					"line": 6,
					"character": 0
				}
			]
		},
		{
			"id": 966,
			"name": "material",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "The `material` module has functions for defining materials.\nThe material definitions are saved as attributes at the model level.\nFor more informtion, see the <a href=\"https://threejs.org/\" target=\"_blank\">threejs docs.</a>"
			},
			"children": [
				{
					"id": 1019,
					"name": "MaterialFunc",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 1020,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/material/index.ts",
									"line": 42,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1021,
									"name": "new MaterialFunc",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1022,
											"name": "model",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "GIModel",
												"package": "@design-automation/mobius-sim",
												"name": "GIModel"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1019,
										"name": "MaterialFunc"
									}
								}
							]
						},
						{
							"id": 1023,
							"name": "__enum__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/material/index.ts",
									"line": 32,
									"character": 4
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1024,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1025,
											"name": "LineMat",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/material/index.ts",
													"line": 33,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1026,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1027,
															"name": "select_vert_colors",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/material/index.ts",
																	"line": 34,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_Ecolors"
																}
															},
															"defaultValue": "Enum._Ecolors"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1027
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 1028,
											"name": "MeshMat",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/material/index.ts",
													"line": 36,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1029,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1030,
															"name": "select_side",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/material/index.ts",
																	"line": 37,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_ESide"
																}
															},
															"defaultValue": "Enum._ESide"
														},
														{
															"id": 1031,
															"name": "select_vert_colors",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/material/index.ts",
																	"line": 37,
																	"character": 38
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_Ecolors"
																}
															},
															"defaultValue": "Enum._Ecolors"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1030,
																1031
															]
														}
													]
												}
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1025,
												1028
											]
										}
									]
								}
							},
							"defaultValue": "..."
						},
						{
							"id": 1032,
							"name": "__model__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/material/index.ts",
									"line": 41,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "GIModel",
								"package": "@design-automation/mobius-sim",
								"name": "GIModel"
							}
						},
						{
							"id": 1033,
							"name": "Glass",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/material/index.ts",
									"line": 45,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1034,
									"name": "Glass",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1035,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1036,
											"name": "opacity",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1037,
							"name": "Lambert",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/material/index.ts",
									"line": 48,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1038,
									"name": "Lambert",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1039,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1040,
											"name": "emissive",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "TColor",
												"package": "@design-automation/mobius-sim",
												"name": "TColor"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1041,
							"name": "LineMat",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/material/index.ts",
									"line": 51,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1042,
									"name": "LineMat",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1043,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1044,
											"name": "color",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "TColor",
												"package": "@design-automation/mobius-sim",
												"name": "TColor"
											}
										},
										{
											"id": 1045,
											"name": "dash_gap_scale",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												]
											}
										},
										{
											"id": 1046,
											"name": "select_vert_colors",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_Ecolors"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1047,
							"name": "MeshMat",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/material/index.ts",
									"line": 54,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1048,
									"name": "MeshMat",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1049,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1050,
											"name": "color",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "TColor",
												"package": "@design-automation/mobius-sim",
												"name": "TColor"
											}
										},
										{
											"id": 1051,
											"name": "opacity",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1052,
											"name": "select_side",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_ESide"
											}
										},
										{
											"id": 1053,
											"name": "select_vert_colors",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_Ecolors"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1054,
							"name": "Phong",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/material/index.ts",
									"line": 57,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1055,
									"name": "Phong",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1056,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1057,
											"name": "emissive",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "TColor",
												"package": "@design-automation/mobius-sim",
												"name": "TColor"
											}
										},
										{
											"id": 1058,
											"name": "specular",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "TColor",
												"package": "@design-automation/mobius-sim",
												"name": "TColor"
											}
										},
										{
											"id": 1059,
											"name": "shininess",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1060,
							"name": "Physical",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/material/index.ts",
									"line": 60,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1061,
									"name": "Physical",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1062,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1063,
											"name": "emissive",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "TColor",
												"package": "@design-automation/mobius-sim",
												"name": "TColor"
											}
										},
										{
											"id": 1064,
											"name": "roughness",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1065,
											"name": "metalness",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1066,
											"name": "reflectivity",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1067,
							"name": "Set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/material/index.ts",
									"line": 63,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1068,
									"name": "Set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1069,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1070,
											"name": "material",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1071,
							"name": "Standard",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/material/index.ts",
									"line": 66,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1072,
									"name": "Standard",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1073,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1074,
											"name": "emissive",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "TColor",
												"package": "@design-automation/mobius-sim",
												"name": "TColor"
											}
										},
										{
											"id": 1075,
											"name": "roughness",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1076,
											"name": "metalness",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1020
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1023,
								1032
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1033,
								1037,
								1041,
								1047,
								1054,
								1060,
								1067,
								1071
							]
						}
					],
					"sources": [
						{
							"fileName": "modules/functions/material/index.ts",
							"line": 29,
							"character": 13
						}
					]
				},
				{
					"id": 987,
					"name": "Glass",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/material/Glass.ts",
							"line": 20,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 988,
							"name": "Glass",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a glass material with an opacity setting. The material will default to a Phong material.\n\\n\nIn order to assign a material to polygons in the model, a polygon attribute called 'material'\nneeds to be created. The value for each polygon must either be null, or must be a material name.\n\\n",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 989,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 990,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The name of the material."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 991,
									"name": "opacity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The opacity of the glass, between 0 (totally transparent) and 1 (totally opaque)."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 992,
					"name": "Lambert",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/material/Lambert.ts",
							"line": 22,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 993,
							"name": "Lambert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a Lambert material and saves it in the model attributes.\nIf a material with the same name already exits, these settings will be added to the existing material.\n\\n\n[See the threejs docs on Lambert materials](https://threejs.org/docs/#api/en/materials/MeshLambertMaterial)\n\\n\nIn order to assign a material to polygons in the model, a polygon attribute called 'material'\nneeds to be created. The value for each polygon must either be null, or must be a material name.\n\\n",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 994,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 995,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The name of the material."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 996,
									"name": "emissive",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The emissive color, as [r, g, b] values between 0 and 1. White is [1, 1, 1]."
									},
									"type": {
										"type": "reference",
										"qualifiedName": "TColor",
										"package": "@design-automation/mobius-sim",
										"name": "TColor"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 972,
					"name": "LineMat",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/material/LineMat.ts",
							"line": 39,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 973,
							"name": "LineMat",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a line material and saves it in the model attributes.\n\\n\n[See the threejs docs on LineBasicMaterials](https://threejs.org/docs/#api/en/materials/LineBasicMaterial)\n[See the threejs docs LineDashedMaterials](https://threejs.org/docs/#api/en/materials/LineDashedMaterial)\n\\n\nThe color of the material can either ignore or apply the vertex rgb colors.\nIf 'apply' is selected, then the actual color will be a combination of the material color\nand the vertex colors, as specified by the vertex attribute called 'rgb'.\nIn such a case, if material color is set to white, then it will\nhave no effect, and the color will be defined by the vertex [r,g,b] values.\n\\n\nIn order to assign a material to polylines in the model, a polyline attribute called 'material'\nwill be created. The value for each polyline must either be null, or must be a material name.\n\\n\nFor dashed lines, the 'dash\\_gap\\_scale' parameter can be set.\n- If 'dash\\_gap\\_scale' is null, it will result in a continuous line.\n- If 'dash\\_gap\\_scale' is a single number: dash = gap = dash\\_gap\\_scale, scale = 1.\n- If 'dash\\_gap\\_scale' is a list of two numbers: dash = dash\\_gap\\_scale[0], gap = dash\\_gap\\_scale[1], scale = 1.\n- If 'dash\\_gap\\_scale' is a list of three numbers: dash = dash\\_gap\\_scale[0], gap = dash\\_gap\\_scale[1], scale = dash\\_gap\\_scale[2].\n\\n\nDue to limitations of the OpenGL Core Profile with the WebGL renderer on most platforms,\nline widths cannot be rendered. As a result, lines width will always be set to 1.\n\\n",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 974,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 975,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The name of the material."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 976,
									"name": "color",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The diffuse color, as [r, g, b] values between 0 and 1. White is [1, 1, 1]."
									},
									"type": {
										"type": "reference",
										"qualifiedName": "TColor",
										"package": "@design-automation/mobius-sim",
										"name": "TColor"
									}
								},
								{
									"id": 977,
									"name": "dash_gap_scale",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Size of the dash and gap, and a scale factor. (The gap and scale are optional.)"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								},
								{
									"id": 978,
									"name": "select_vert_colors",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, select whether to use vertex colors if they exist: `'none'` or `'apply_rgb'`."
									},
									"type": {
										"type": "reference",
										"name": "_Ecolors"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 979,
					"name": "MeshMat",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/material/MeshMat.ts",
							"line": 40,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 980,
							"name": "MeshMat",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a basic mesh material and saves it in the model attributes.\n\\n\n[See the threejs docs on basic mesh materials](https://threejs.org/docs/#api/en/materials/MeshBasicMaterial)\n\\n\nThe color of the material can either ignore or apply the vertex rgb colors.\nIf 'apply' is selected, then the actual color will be a combination of the material color\nand the vertex colors, as specified by the a vertex attribute called 'rgb'.\nIn such a case, if material color is set to white, then it will\nhave no effect, and the color will be defined by the vertex [r,g,b] values.\n\\n\nAdditional material properties can be set by calling the functions for the more advanced materials.\nThese include LambertMaterial, PhongMaterial, StandardMaterial, and Physical Material.\nEach of these more advanced materials allows you to specify certain additional settings.\n\\n\nIn order to assign a material to polygons in the model, a polygon attribute called 'material'\nneeds to be created. The value for each polygon must either be null, or must be a material name.\n\\n",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 981,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 982,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The name of the material."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 983,
									"name": "color",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The diffuse color, as [r, g, b] values between 0 and 1. White is [1, 1, 1]."
									},
									"type": {
										"type": "reference",
										"qualifiedName": "TColor",
										"package": "@design-automation/mobius-sim",
										"name": "TColor"
									}
								},
								{
									"id": 984,
									"name": "opacity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The opacity of the glass, between 0 (totally transparent) and 1 (totally opaque)."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 985,
									"name": "select_side",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, select where to apply colors: `'front', 'back'`, or `'both'`."
									},
									"type": {
										"type": "reference",
										"name": "_ESide"
									}
								},
								{
									"id": 986,
									"name": "select_vert_colors",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, select whether to use vertex colors if they exist: `'none'` or `'apply_rgb'`."
									},
									"type": {
										"type": "reference",
										"name": "_Ecolors"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 997,
					"name": "Phong",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/material/Phong.ts",
							"line": 24,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 998,
							"name": "Phong",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a Phong material and saves it in the model attributes.\nIf a material with the same name already exits, these settings will be added to the existing material.\n\\n\n[See the threejs docs on Phong materials](https://threejs.org/docs/#api/en/materials/MeshPhongMaterial)\n\\n\nIn order to assign a material to polygons in the model, a polygon attribute called 'material'\nneeds to be created. The value for each polygon must either be null, or must be a material name.\n\\n",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 999,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1000,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The name of the material."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1001,
									"name": "emissive",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The emissive color, as [r, g, b] values between 0 and 1. White is [1, 1, 1]."
									},
									"type": {
										"type": "reference",
										"qualifiedName": "TColor",
										"package": "@design-automation/mobius-sim",
										"name": "TColor"
									}
								},
								{
									"id": 1002,
									"name": "specular",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The specular color, as [r, g, b] values between 0 and 1. White is [1, 1, 1]."
									},
									"type": {
										"type": "reference",
										"qualifiedName": "TColor",
										"package": "@design-automation/mobius-sim",
										"name": "TColor"
									}
								},
								{
									"id": 1003,
									"name": "shininess",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The shininess, between 0 and 100."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1011,
					"name": "Physical",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/material/Physical.ts",
							"line": 25,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1012,
							"name": "Physical",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a Physical material and saves it in the model attributes.\nIf a material with the same name already exits, these settings will be added to the existing material.\n\\n\n[See the threejs docs on Physical materials](https://threejs.org/docs/#api/en/materials/MeshPhysicalMaterial)\n\\n\nIn order to assign a material to polygons in the model, a polygon attribute called 'material'\nneeds to be created. The value for each polygon must either be null, or must be a material name.\n\\n",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 1013,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1014,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The name of the material."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1015,
									"name": "emissive",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The emissive color, as [r, g, b] values between 0 and 1. White is [1, 1, 1]."
									},
									"type": {
										"type": "reference",
										"qualifiedName": "TColor",
										"package": "@design-automation/mobius-sim",
										"name": "TColor"
									}
								},
								{
									"id": 1016,
									"name": "roughness",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The roughness, between 0 (smooth) and 1 (rough)."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1017,
									"name": "metalness",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The metalness, between 0 (non-metalic) and 1 (metalic)."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1018,
									"name": "reflectivity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The reflectivity, between 0 (non-reflective) and 1 (reflective)."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 967,
					"name": "Set",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/material/Set.ts",
							"line": 39,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 968,
							"name": "Set",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Assign a material to one or more polylines or polygons.\n\\n\nA material name is assigned to the polygons. The named material must be separately defined as a\nmaterial in the model attributes. See the `material.LineMat()` or `material.MeshMat()` functions.\n\\n\nThe material name is a string.\n\\n\nFor polylines, the `material` argument must be a single name.\n\\n\nFor polygons, the `material` argument can accept either a single name, or a\nlist of two names. If it is a single name, then the same material is assigned to both the\nfront and back of the polygon. If it is a list of two names, then the first material is assigned\nto the front, and the second material is assigned to the back.\n\\n",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 969,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 970,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The entities for which to set the material."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 971,
									"name": "material",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The name of the material."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1004,
					"name": "Standard",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/material/Standard.ts",
							"line": 26,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1005,
							"name": "Standard",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a Standard material and saves it in the model attributes.\nIf a material with the same name already exits, these settings will be added to the existing material.\n\\n\n[See the threejs docs on Standard materials](https://threejs.org/docs/#api/en/materials/MeshStandardMaterial)\n\\n\nIn order to assign a material to polygons in the model, a polygon attribute called 'material'\nneeds to be created. The value for each polygon must either be null, or must be a material name.\n\\n",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 1006,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1007,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The name of the material."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1008,
									"name": "emissive",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The emissive color, as [r, g, b] values between 0 and 1. White is [1, 1, 1]."
									},
									"type": {
										"type": "reference",
										"qualifiedName": "TColor",
										"package": "@design-automation/mobius-sim",
										"name": "TColor"
									}
								},
								{
									"id": 1009,
									"name": "roughness",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The roughness, between 0 (smooth) and 1 (rough)."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1010,
									"name": "metalness",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The metalness, between 0 (non-metalic) and 1 (metalic)."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1019
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						987,
						992,
						972,
						979,
						997,
						1011,
						967,
						1004
					]
				}
			],
			"sources": [
				{
					"fileName": "modules/functions/material/index.ts",
					"line": 7,
					"character": 0
				}
			]
		},
		{
			"id": 1077,
			"name": "modify",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "The `modify` module has functions for modifying existing entities in the model.\nThese functions do not make any new entities, and they do not change the topology of objects.\nThese functions only change attribute values.\nAll these functions have no return value."
			},
			"children": [
				{
					"id": 1115,
					"name": "ModifyFunc",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 1116,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/modify/index.ts",
									"line": 30,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1117,
									"name": "new ModifyFunc",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1118,
											"name": "model",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "GIModel",
												"package": "@design-automation/mobius-sim",
												"name": "GIModel"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1115,
										"name": "ModifyFunc"
									}
								}
							]
						},
						{
							"id": 1119,
							"name": "__model__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/modify/index.ts",
									"line": 29,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "GIModel",
								"package": "@design-automation/mobius-sim",
								"name": "GIModel"
							}
						},
						{
							"id": 1120,
							"name": "Mirror",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/modify/index.ts",
									"line": 33,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1121,
									"name": "Mirror",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1122,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1123,
											"name": "plane",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"qualifiedName": "TRay",
														"package": "@design-automation/mobius-sim",
														"name": "TRay"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "reference",
														"qualifiedName": "TPlane",
														"package": "@design-automation/mobius-sim",
														"name": "TPlane"
													},
													{
														"type": "reference",
														"qualifiedName": "Txyz",
														"package": "@design-automation/mobius-sim",
														"name": "Txyz"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1124,
							"name": "Move",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/modify/index.ts",
									"line": 36,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1125,
									"name": "Move",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1126,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1127,
											"name": "vectors",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "Txyz",
														"package": "@design-automation/mobius-sim",
														"name": "Txyz"
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "Txyz",
															"package": "@design-automation/mobius-sim",
															"name": "Txyz"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1128,
							"name": "Offset",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/modify/index.ts",
									"line": 39,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1129,
									"name": "Offset",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1130,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1131,
											"name": "dist",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1132,
							"name": "Remesh",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/modify/index.ts",
									"line": 42,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1133,
									"name": "Remesh",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1134,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1135,
							"name": "Rotate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/modify/index.ts",
									"line": 45,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1136,
									"name": "Rotate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1137,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1138,
											"name": "ray",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"qualifiedName": "TRay",
														"package": "@design-automation/mobius-sim",
														"name": "TRay"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "reference",
														"qualifiedName": "TPlane",
														"package": "@design-automation/mobius-sim",
														"name": "TPlane"
													},
													{
														"type": "reference",
														"qualifiedName": "Txyz",
														"package": "@design-automation/mobius-sim",
														"name": "Txyz"
													}
												]
											}
										},
										{
											"id": 1139,
											"name": "angle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1140,
							"name": "Scale",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/modify/index.ts",
									"line": 48,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1141,
									"name": "Scale",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1142,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1143,
											"name": "plane",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"qualifiedName": "TRay",
														"package": "@design-automation/mobius-sim",
														"name": "TRay"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "reference",
														"qualifiedName": "TPlane",
														"package": "@design-automation/mobius-sim",
														"name": "TPlane"
													},
													{
														"type": "reference",
														"qualifiedName": "Txyz",
														"package": "@design-automation/mobius-sim",
														"name": "Txyz"
													}
												]
											}
										},
										{
											"id": 1144,
											"name": "scale",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "reference",
														"qualifiedName": "Txyz",
														"package": "@design-automation/mobius-sim",
														"name": "Txyz"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1145,
							"name": "XForm",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/modify/index.ts",
									"line": 51,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1146,
									"name": "XForm",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1147,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1148,
											"name": "from_plane",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"qualifiedName": "TRay",
														"package": "@design-automation/mobius-sim",
														"name": "TRay"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "reference",
														"qualifiedName": "TPlane",
														"package": "@design-automation/mobius-sim",
														"name": "TPlane"
													},
													{
														"type": "reference",
														"qualifiedName": "Txyz",
														"package": "@design-automation/mobius-sim",
														"name": "Txyz"
													}
												]
											}
										},
										{
											"id": 1149,
											"name": "to_plane",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"qualifiedName": "TRay",
														"package": "@design-automation/mobius-sim",
														"name": "TRay"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "reference",
														"qualifiedName": "TPlane",
														"package": "@design-automation/mobius-sim",
														"name": "TPlane"
													},
													{
														"type": "reference",
														"qualifiedName": "Txyz",
														"package": "@design-automation/mobius-sim",
														"name": "Txyz"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1116
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1119
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1120,
								1124,
								1128,
								1132,
								1135,
								1140,
								1145
							]
						}
					],
					"sources": [
						{
							"fileName": "modules/functions/modify/index.ts",
							"line": 27,
							"character": 13
						}
					]
				},
				{
					"id": 1095,
					"name": "Mirror",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/modify/Mirror.ts",
							"line": 35,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1096,
							"name": "Mirror",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Mirrors entities across a plane.\n\\n",
								"returns": "void",
								"tags": [
									{
										"tag": "example",
										"text": "`modify.Mirror(polygon1, plane1)`"
									},
									{
										"tag": "example_info",
										"text": "Mirrors polygon1 across plane1.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1097,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1098,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "An entity or list of entities to mirror."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 1099,
									"name": "plane",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A plane to scale around. \\n\nGiven a ray, a plane will be generated that is perpendicular to the ray. \\n\nGiven an `xyz` location, a plane will be generated with an origin at that location and with axes parallel to the global axes. \\n\nGiven any entities, the centroid will be extracted,\nand a plane will be generated with an origin at the centroid, and with axes parallel to the global axes."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"qualifiedName": "TRay",
												"package": "@design-automation/mobius-sim",
												"name": "TRay"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "reference",
												"qualifiedName": "TPlane",
												"package": "@design-automation/mobius-sim",
												"name": "TPlane"
											},
											{
												"type": "reference",
												"qualifiedName": "Txyz",
												"package": "@design-automation/mobius-sim",
												"name": "Txyz"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1078,
					"name": "Move",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/modify/Move.ts",
							"line": 31,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1079,
							"name": "Move",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Moves entities. The direction and distance of movement is specified as a vector.\n\\n\nIf only one vector is given, then all entities are moved by the same vector.\nIf a list of vectors is given, then each entity will be moved by a different vector.\nIn this case, the number of vectors should be equal to the number of entities.\n\\n\nIf a position is shared between entites that are being moved by different vectors,\nthen the position will be moved by the average of the vectors.\n\\n",
								"returns": "void",
								"tags": [
									{
										"tag": "example",
										"text": "`modify.Move(pline1, [1,2,3])`"
									},
									{
										"tag": "example_info",
										"text": "Moves pline1 by [1,2,3]."
									},
									{
										"tag": "example",
										"text": "`modify.Move([pos1, pos2, pos3], [[0,0,1], [0,0,1], [0,1,0]] )`"
									},
									{
										"tag": "example_info",
										"text": "Moves pos1 by [0,0,1], pos2 by [0,0,1], and pos3 by [0,1,0]."
									},
									{
										"tag": "example",
										"text": "`modify.Move([pgon1, pgon2], [1,2,3] )`"
									},
									{
										"tag": "example_info",
										"text": "Moves both pgon1 and pgon2 by [1,2,3].\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1080,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1081,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "An entity or list of entities to move."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 1082,
									"name": "vectors",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A vector or a list of vectors."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "Txyz",
												"package": "@design-automation/mobius-sim",
												"name": "Txyz"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "Txyz",
													"package": "@design-automation/mobius-sim",
													"name": "Txyz"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1106,
					"name": "Offset",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/modify/Offset.ts",
							"line": 28,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1107,
							"name": "Offset",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Performs a simple geometrical offset on the wires, such that the wires are parallel to their\noriginal positions, modying the input entities. Works on 3D geometry.\n\\n\nSee `poly2d.OffsetChamfer, poly2d.OffsetMitre` and `poly2d.OffsetRound` for other offset\nfunctions that do not modify the input entities (but are limited to 2D).",
								"returns": "void",
								"tags": [
									{
										"tag": "example",
										"text": "<a href=\"/editor?file=/assets/examples/Functions_modify.Offset_3DExamples.mob&node=1\" target=\"_blank\"> 3D Example </a>"
									},
									{
										"tag": "example_info",
										"text": "A model showing offset used on 3D geometry."
									},
									{
										"tag": "example",
										"text": "<a href=\"/editor?file=/assets/examples/Functions_modify.Offset_Self-intersecting_Example.mob&node=1\" target=\"_blank\"> Wrong Example </a>"
									},
									{
										"tag": "example_info",
										"text": "A model showing self-intersecting geometries created by offset and how to fix it."
									},
									{
										"tag": "example",
										"text": "`modify.Offset(polygon1, 10)`"
									},
									{
										"tag": "example_info",
										"text": "Offsets the wires inside polygon1 by 10 units. Holes will also be offset.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1108,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1109,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Edges, wires, faces, polylines, polygons, collections."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 1110,
									"name": "dist",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The distance to offset by, can be either positive or negative."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1111,
					"name": "Remesh",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/modify/Remesh.ts",
							"line": 28,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1112,
							"name": "Remesh",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remesh a face or polygon.\n\\n\nWhen a face or polygon is deformed, the triangles that make up that face will sometimes become incorrect.\n\\n\nRemeshing will regenerate the triangulated mesh for the face.\n\\n\nRemeshing is not performed automatically as it would degrade performance.\nInstead, it is left up to the user to remesh only when it is actually required.\n\\n",
								"returns": "void",
								"tags": [
									{
										"tag": "example",
										"text": "<a href=\"/editor?file=/assets/examples/Functions_modify.Remesh_example.mob&node=1\" target=\"_blank\"> Example of Usage </a>"
									},
									{
										"tag": "example_info",
										"text": "A model showing proper usage of make.Remesh, to remove extra polygons created when modifying the model."
									},
									{
										"tag": "example",
										"text": "`modify.Remesh(polygon1)`"
									},
									{
										"tag": "example_info",
										"text": "Remeshes the face of the polygon.\n\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1113,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1114,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Single or list of faces, polygons, collections."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1083,
					"name": "Rotate",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/modify/Rotate.ts",
							"line": 37,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1084,
							"name": "Rotate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Rotates entities on a plane by an angle.\n\\n",
								"returns": "void",
								"tags": [
									{
										"tag": "example",
										"text": "`modify.Rotate(polyline1, plane1, PI)`"
									},
									{
										"tag": "example_info",
										"text": "Rotates polyline1 around the z-axis of plane1 by PI (i.e. 180 degrees).\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1085,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1086,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "An entity or list of entities to rotate."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 1087,
									"name": "ray",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A ray to rotate around. \\n\nGiven a plane, a ray will be created from the plane's z axis. \\n\nGiven an `xyz` location, a ray will be generated with an origin at this location, and a direction `[0, 0, 1]`. \\n\nGiven any entities, the centroid will be extracted,\nand a ray will be generated with an origin at this centroid, and a direction `[0, 0, 1]`."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"qualifiedName": "TRay",
												"package": "@design-automation/mobius-sim",
												"name": "TRay"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "reference",
												"qualifiedName": "TPlane",
												"package": "@design-automation/mobius-sim",
												"name": "TPlane"
											},
											{
												"type": "reference",
												"qualifiedName": "Txyz",
												"package": "@design-automation/mobius-sim",
												"name": "Txyz"
											}
										]
									}
								},
								{
									"id": 1088,
									"name": "angle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Angle (in radians)."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1089,
					"name": "Scale",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/modify/Scale.ts",
							"line": 39,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1090,
							"name": "Scale",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Scales entities relative to a plane.\n\\n",
								"returns": "void",
								"tags": [
									{
										"tag": "example",
										"text": "`modify.Scale(entities, plane1, 0.5)`"
									},
									{
										"tag": "example_info",
										"text": "Scales entities by 0.5 on plane1."
									},
									{
										"tag": "example",
										"text": "`modify.Scale(entities, plane1, [0.5, 1, 1])`"
									},
									{
										"tag": "example_info",
										"text": "Scales entities by 0.5 along the x axis of plane1, with no scaling along the y and z axes.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1091,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1092,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "An entity or list of entities to scale."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 1093,
									"name": "plane",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A plane to scale around. \\n\nGiven a ray, a plane will be generated that is perpendicular to the ray. \\n\nGiven an `xyz` location, a plane will be generated with an origin at that location and with axes parallel to the global axes. \\n\nGiven any entities, the centroid will be extracted,\nand a plane will be generated with an origin at the centroid, and with axes parallel to the global axes."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"qualifiedName": "TRay",
												"package": "@design-automation/mobius-sim",
												"name": "TRay"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "reference",
												"qualifiedName": "TPlane",
												"package": "@design-automation/mobius-sim",
												"name": "TPlane"
											},
											{
												"type": "reference",
												"qualifiedName": "Txyz",
												"package": "@design-automation/mobius-sim",
												"name": "Txyz"
											}
										]
									}
								},
								{
									"id": 1094,
									"name": "scale",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Scale factor, a single number to scale equally, or [scale_x, scale_y, scale_z] relative to the plane."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"qualifiedName": "Txyz",
												"package": "@design-automation/mobius-sim",
												"name": "Txyz"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1100,
					"name": "XForm",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/modify/XForm.ts",
							"line": 40,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1101,
							"name": "XForm",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Transforms entities from a source plane to a target plane.\n\\n",
								"returns": "void",
								"tags": [
									{
										"tag": "example",
										"text": "`modify.XForm(polygon1, plane1, plane2)`"
									},
									{
										"tag": "example_info",
										"text": "Transforms polygon1 from plane1 to plane2.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1102,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1103,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Vertex, edge, wire, position, point, polyline, polygon, collection."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 1104,
									"name": "from_plane",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Plane defining source plane for the transformation. \\n\nGiven a ray, a plane will be generated that is perpendicular to the ray. \\n\nGiven an `xyz` location, a plane will be generated with an origin at that location and with axes parallel to the global axes. \\n\nGiven any entities, the centroid will be extracted,\nand a plane will be generated with an origin at the centroid, and with axes parallel to the global axes."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"qualifiedName": "TRay",
												"package": "@design-automation/mobius-sim",
												"name": "TRay"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "reference",
												"qualifiedName": "TPlane",
												"package": "@design-automation/mobius-sim",
												"name": "TPlane"
											},
											{
												"type": "reference",
												"qualifiedName": "Txyz",
												"package": "@design-automation/mobius-sim",
												"name": "Txyz"
											}
										]
									}
								},
								{
									"id": 1105,
									"name": "to_plane",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Plane defining target plane for the transformation. \\n\nGiven a ray, a plane will be generated that is perpendicular to the ray. \\n\nGiven an `xyz` location, a plane will be generated with an origin at that location and with axes parallel to the global axes. \\n\nGiven any entities, the centroid will be extracted,\nand a plane will be generated with an origin at the centroid, and with axes parallel to the global axes."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"qualifiedName": "TRay",
												"package": "@design-automation/mobius-sim",
												"name": "TRay"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "reference",
												"qualifiedName": "TPlane",
												"package": "@design-automation/mobius-sim",
												"name": "TPlane"
											},
											{
												"type": "reference",
												"qualifiedName": "Txyz",
												"package": "@design-automation/mobius-sim",
												"name": "Txyz"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1115
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1095,
						1078,
						1106,
						1111,
						1083,
						1089,
						1100
					]
				}
			],
			"sources": [
				{
					"fileName": "modules/functions/modify/index.ts",
					"line": 8,
					"character": 0
				}
			]
		},
		{
			"id": 1150,
			"name": "pattern",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "The `pattern` module has functions for creating patterns of positions.\nThese functions all return lists of position IDs.\nThe list may be nested, depending on which function is selected."
			},
			"children": [
				{
					"id": 1216,
					"name": "PatternFunc",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 1217,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/pattern/index.ts",
									"line": 59,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1218,
									"name": "new PatternFunc",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1219,
											"name": "model",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "GIModel",
												"package": "@design-automation/mobius-sim",
												"name": "GIModel"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1216,
										"name": "PatternFunc"
									}
								}
							]
						},
						{
							"id": 1220,
							"name": "__enum__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/pattern/index.ts",
									"line": 36,
									"character": 4
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1221,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1238,
											"name": "Box",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/pattern/index.ts",
													"line": 52,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1239,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1240,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/pattern/index.ts",
																	"line": 53,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EBoxMethod"
																}
															},
															"defaultValue": "Enum._EBoxMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1240
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 1222,
											"name": "Grid",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/pattern/index.ts",
													"line": 37,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1223,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1224,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/pattern/index.ts",
																	"line": 38,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EGridMethod"
																}
															},
															"defaultValue": "Enum._EGridMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1224
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 1225,
											"name": "Interpolate",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/pattern/index.ts",
													"line": 40,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1226,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1228,
															"name": "close",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/pattern/index.ts",
																	"line": 41,
																	"character": 42
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EClose"
																}
															},
															"defaultValue": "Enum._EClose"
														},
														{
															"id": 1227,
															"name": "type",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/pattern/index.ts",
																	"line": 41,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_ECurveCatRomType"
																}
															},
															"defaultValue": "Enum._ECurveCatRomType"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1228,
																1227
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 1229,
											"name": "Linear",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/pattern/index.ts",
													"line": 43,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1230,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1231,
															"name": "close",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/pattern/index.ts",
																	"line": 44,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EClose"
																}
															},
															"defaultValue": "Enum._EClose"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1231
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 1232,
											"name": "Nurbs",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/pattern/index.ts",
													"line": 46,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1233,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1234,
															"name": "close",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/pattern/index.ts",
																	"line": 47,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EClose"
																}
															},
															"defaultValue": "Enum._EClose"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1234
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 1235,
											"name": "Polyhedron",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/pattern/index.ts",
													"line": 49,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1236,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1237,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/pattern/index.ts",
																	"line": 50,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EPolyhedronMethod"
																}
															},
															"defaultValue": "Enum._EPolyhedronMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1237
															]
														}
													]
												}
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1238,
												1222,
												1225,
												1229,
												1232,
												1235
											]
										}
									]
								}
							},
							"defaultValue": "..."
						},
						{
							"id": 1241,
							"name": "__model__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/pattern/index.ts",
									"line": 58,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "GIModel",
								"package": "@design-automation/mobius-sim",
								"name": "GIModel"
							}
						},
						{
							"id": 1242,
							"name": "Arc",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/pattern/index.ts",
									"line": 62,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1243,
									"name": "Arc",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1244,
											"name": "origin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "TPlane",
														"package": "@design-automation/mobius-sim",
														"name": "TPlane"
													},
													{
														"type": "reference",
														"qualifiedName": "Txyz",
														"package": "@design-automation/mobius-sim",
														"name": "Txyz"
													}
												]
											}
										},
										{
											"id": 1245,
											"name": "radius",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1246,
											"name": "num_positions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1247,
											"name": "arc_angle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1248,
							"name": "Bezier",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/pattern/index.ts",
									"line": 65,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1249,
									"name": "Bezier",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1250,
											"name": "coords",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "Txyz",
													"package": "@design-automation/mobius-sim",
													"name": "Txyz"
												}
											}
										},
										{
											"id": 1251,
											"name": "num_positions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1252,
							"name": "Box",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/pattern/index.ts",
									"line": 68,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1253,
									"name": "Box",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1254,
											"name": "origin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "TPlane",
														"package": "@design-automation/mobius-sim",
														"name": "TPlane"
													},
													{
														"type": "reference",
														"qualifiedName": "Txyz",
														"package": "@design-automation/mobius-sim",
														"name": "Txyz"
													}
												]
											}
										},
										{
											"id": 1255,
											"name": "size",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												]
											}
										},
										{
											"id": 1256,
											"name": "num_positions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												]
											}
										},
										{
											"id": 1257,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EBoxMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1258,
							"name": "Grid",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/pattern/index.ts",
									"line": 71,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1259,
									"name": "Grid",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1260,
											"name": "origin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "TPlane",
														"package": "@design-automation/mobius-sim",
														"name": "TPlane"
													},
													{
														"type": "reference",
														"qualifiedName": "Txyz",
														"package": "@design-automation/mobius-sim",
														"name": "Txyz"
													}
												]
											}
										},
										{
											"id": 1261,
											"name": "size",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												]
											}
										},
										{
											"id": 1262,
											"name": "num_positions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												]
											}
										},
										{
											"id": 1263,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EGridMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1264,
							"name": "Interpolate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/pattern/index.ts",
									"line": 74,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1265,
									"name": "Interpolate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1266,
											"name": "coords",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "Txyz",
													"package": "@design-automation/mobius-sim",
													"name": "Txyz"
												}
											}
										},
										{
											"id": 1267,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_ECurveCatRomType"
											}
										},
										{
											"id": 1268,
											"name": "tension",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1269,
											"name": "close",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EClose"
											}
										},
										{
											"id": 1270,
											"name": "num_positions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1271,
							"name": "Line",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/pattern/index.ts",
									"line": 77,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1272,
									"name": "Line",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1273,
											"name": "origin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "TPlane",
														"package": "@design-automation/mobius-sim",
														"name": "TPlane"
													},
													{
														"type": "reference",
														"qualifiedName": "Txyz",
														"package": "@design-automation/mobius-sim",
														"name": "Txyz"
													}
												]
											}
										},
										{
											"id": 1274,
											"name": "length",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1275,
											"name": "num_positions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1276,
							"name": "Linear",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/pattern/index.ts",
									"line": 80,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1277,
									"name": "Linear",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1278,
											"name": "coords",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "Txyz",
													"package": "@design-automation/mobius-sim",
													"name": "Txyz"
												}
											}
										},
										{
											"id": 1279,
											"name": "close",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EClose"
											}
										},
										{
											"id": 1280,
											"name": "num_positions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1281,
							"name": "Nurbs",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/pattern/index.ts",
									"line": 83,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1282,
									"name": "Nurbs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1283,
											"name": "coords",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "Txyz",
													"package": "@design-automation/mobius-sim",
													"name": "Txyz"
												}
											}
										},
										{
											"id": 1284,
											"name": "degree",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1285,
											"name": "close",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EClose"
											}
										},
										{
											"id": 1286,
											"name": "num_positions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1287,
							"name": "Polyhedron",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/pattern/index.ts",
									"line": 86,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1288,
									"name": "Polyhedron",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1289,
											"name": "origin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "TPlane",
														"package": "@design-automation/mobius-sim",
														"name": "TPlane"
													},
													{
														"type": "reference",
														"qualifiedName": "Txyz",
														"package": "@design-automation/mobius-sim",
														"name": "Txyz"
													}
												]
											}
										},
										{
											"id": 1290,
											"name": "radius",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1291,
											"name": "detail",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1292,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EPolyhedronMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1293,
							"name": "Rectangle",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/pattern/index.ts",
									"line": 89,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1294,
									"name": "Rectangle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1295,
											"name": "origin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "TPlane",
														"package": "@design-automation/mobius-sim",
														"name": "TPlane"
													},
													{
														"type": "reference",
														"qualifiedName": "Txyz",
														"package": "@design-automation/mobius-sim",
														"name": "Txyz"
													}
												]
											}
										},
										{
											"id": 1296,
											"name": "size",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1217
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1220,
								1241
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1242,
								1248,
								1252,
								1258,
								1264,
								1271,
								1276,
								1281,
								1287,
								1293
							]
						}
					],
					"sources": [
						{
							"fileName": "modules/functions/pattern/index.ts",
							"line": 33,
							"character": 13
						}
					]
				},
				{
					"id": 1189,
					"name": "Arc",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/pattern/Arc.ts",
							"line": 75,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1190,
							"name": "Arc",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates positions in an arc or circle pattern.\n\\n\nThe `origin` parameter specifies the centre of the polyhedron for which positions will be\ngenerated. The origin can be specified as either a |coordinate| or a |plane|. If a coordinate\nis given, then a plane will be automatically generated, aligned with the global XY plane.\n\\n\nThe positions will be generated for an arc aligned with the origin XY plane.\nSo if the origin plane is rotated, then the rotated will also be rotated.\n\\n\nThe `radius` parameter specifies the size of the arc.\n\\n\nThe `num_positions` parameter specifies the total number of positions to be generated on the arc.\n\\n\nThe `arc_angle` specifies the angle of the arc, in radians. Angles start at the X-axis of the\norigin plane and move in a counter-clockwise direction. Two angles are needed to define an arc,\na `start_angle` and `end_angle`. The angles may be positive or negative, and may be\ngreater than `2*PI` or smaller than `-2*PI`.\n\\n\nPositions will always be generated in sequence, from the start angle towards the end angle.\n- If the start angle is smaller than the end angle, then the positions will be generated in\ncounter-clockwise order.\n- If the start angle is greater than the end angle, then the positions will be generated in\nclockwise order.\n\\n\nThe angle may either be given as a single number, as a list of two numbers, or as `null`:\n- If the angle is given as a single number, then the arc angles will be set to be\n`[0, end_angle]`. This means that the start of the arc will coincide with the X-axis\nof the origin plane.\n- If the angle is given as a list of two numbers, then they will be set to be\n`[start_angle, end_angle]`.\n- If the angle is set to `null`, then the arc angles will be set to be\n`[0, 2*PI]`. In addition, duplicate positions at start and end of the arc are\nautomatically removed.\n\\n\nNote that setting the arc angle to null is not the same as setting it to `2*PI`.\nWhen setting the arc angle to `2*PI`, you will get duplicate positions at the start and end\nof the arc.\n\\n",
								"returns": "Entities, a list of positions.",
								"tags": [
									{
										"tag": "example",
										"text": "`posis = pattern.Arc([0,0,0], 10, 12, PI)`"
									},
									{
										"tag": "example_info",
										"text": "Creates a list of 12 positions distributed equally along a semicircle of radius 10\nstarting at an angle of 0 and ending at an angle of 180 degrees, rotating in a counter-clockwise\ndirection.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1191,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1192,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A |coordinate| or a |plane|, specifying the centre of the arc.\nIf a coordinate is given, then the plane is assumed to be aligned with the global XY plane."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "TPlane",
												"package": "@design-automation/mobius-sim",
												"name": "TPlane"
											},
											{
												"type": "reference",
												"qualifiedName": "Txyz",
												"package": "@design-automation/mobius-sim",
												"name": "Txyz"
											}
										]
									}
								},
								{
									"id": 1193,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Radius of circle as a number."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1194,
									"name": "num_positions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Number of positions to be distributed equally along the arc."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1195,
									"name": "arc_angle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Angle of arc (in radians). If a list of two numbers is given, then the first\nnumber specifies the arc start angle, and the second number the arc end angle, i.e.\n`[arc_start_angle, arc_end_angle]`. If a single numer is specified, then the angles will be set\nto `[0, arc_end_angle]`. If `null` is given, then the angles will be set to `[0, 2 * PI]`."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				},
				{
					"id": 1196,
					"name": "Bezier",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/pattern/Bezier.ts",
							"line": 38,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1197,
							"name": "Bezier",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates positions in a Bezier curve pattern, defined by a list of coordinates.\n\\n\nThe Bezier is created as either a quadratic or cubic Bezier. It is always an open curve.\n\\n\nThe positions are created along the curve at equal parameter values.\nThis means that the euclidean distance between the positions will not necessarily be equal.\n\\n\nFor the quadratic Bezier, three coordinates are required.\nFor the cubic Bezier, four coordinates are required.\n\\n\nThe `coords` parameter gives the list of |coordinates|\n(three coords for quadratics, four coords for cubics).\nThe first and last coordinates in the list are the start and end positions of the curve.\nThe middle coordinates act as the control points for controlling the shape of the curve.\n\\n\nThe `num_positions` parameter specifies the total number of positions to be generated.\n\\n\nFor more information, see the wikipedia article:\n<a href=\"https://en.wikipedia.org/wiki/B%C3%A9zier_curve\" target=\"_blank\">Bezier_curve</a>.\n\\n",
								"returns": "Entities, a list of positions.",
								"tags": [
									{
										"tag": "example",
										"text": "`posis = pattern.Bezier([[0,0,0], [10,0,50], [20,0,0]], 20)`"
									},
									{
										"tag": "example_info",
										"text": "Creates a list of 20 positions distributed along a Bezier curve.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1198,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1199,
									"name": "coords",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A |coordinate| or a |plane| (three coords for quadratics, four coords for cubics).\nIf a coordinate is given, then the plane is assumed to be aligned with the global XY plane."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "Txyz",
											"package": "@design-automation/mobius-sim",
											"name": "Txyz"
										}
									}
								},
								{
									"id": 1200,
									"name": "num_positions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Number of positions to be distributed along the Bezier."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				},
				{
					"id": 1175,
					"name": "Box",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/pattern/Box.ts",
							"line": 146,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1176,
							"name": "Box",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates positions in a box pattern. Positions are only generated on the outer surface of the box.\nNo positions are generated in the interior of the box.\n\\n\nThe `origin` parameter specifies the centre of the box for which positions will be\ngenerated. The origin can be specified as either a |coordinate| or a |plane|. If a coordinate\nis given, then a plane will be automatically generated, aligned with the global XY plane.\n\\n\nThe positions will be generated for a box aligned with the origin XY plane.\nSo if the origin plane is rotated, then the box will also be rotated.\n\\n\nThe `size` parameter specifies the size of the box.\n- If only one number is given, then the width, length, and height are assumed to be equal.\n- If a list of two numbers is given, then they will be interpreted as `[width, length]`,\nand the height will be the same as the length.\n- If a list of three numbers is given, then they will be interpreted as `[width, length, height]`.\n\\n\nThe width dimension will be in the X-direction of the origin plane,\nthe length in the Y direction, and the height in the Z-direction.\n\\n\nThe `num_positions` parameter specifies the number of columns, rows, and layers of positions\nin the box.\n- If only one number is given, then the box is assumed to have equal number columns, rows,\nand layers.\n- If a list of two numbers is given, then they will be interpreted as `[columns, rows]`,\nand the number of layers will be the same as the rows.\n- If a list of three numbers is given, then they will be interpreted as `[columns, rows, layers]`.\n\\n\nThe `columns` will be parallel to the Y-direction of the origin plane,\nand the `rows` will be parallel to the X-direction of the origin plane.\nThe layers are stacked up in the Z-direction of the origin plane.\n\\n\nFor example, consider the following function call:\n`posis = pattern.Box(XY, [10,20,30], [2,3,2], 'flat')`\nThis will generate the following box:\n\\n\n![An example of pattern.Box](assets/typedoc-json/docMDimgs/pattern_box.png)\n\\n\nBelow are the varying results when calling the function with the method set to\n`flat`, `columns`, `rows` `layers` and `quads`:\n\\n\n`posis = pattern.Box(XY, [10,20,30], [2,3,2], 'flat')`\n```\nposis = [\"ps0\", \"ps1\", \"ps2\", \"ps3\", \"ps4\", \"ps5\", \"ps6\", \"ps7\", \"ps8\", \"ps9\", \"ps10\", \"ps11\"]\n```\n\\n\n`posis = pattern.Box(XY, [10,20,30], [2,3,2], 'columns')`\n```\nposis = [\n    [\"ps0\", \"ps2\", \"ps4\", \"ps6\", \"ps8\", \"ps10\"],\n    [\"ps1\", \"ps3\", \"ps5\", \"ps7\", \"ps9\", \"ps11\"]\n]\n```\n\\n\n`posis = pattern.Box(XY, [10,20,30], [2,3,2], 'rows')`\n```\nposis = [\n    [\"ps0\", \"ps1\", \"ps6\", \"ps7\"],\n    [\"ps2\", \"ps3\", \"ps8\", \"ps9\"],\n    [\"ps4\", \"ps5\", \"ps10\", \"ps11\"]\n]\n```\n\\n\n`posis = pattern.Box(XY, [10,20,30], [2,3,2], 'layers')`\n```\nposis = [\n    [\"ps0\", \"ps1\", \"ps2\", \"ps3\", \"ps4\", \"ps5\"],\n    [\"ps6\", \"ps7\", \"ps8\", \"ps9\", \"ps10\", \"ps11\"]\n]\n```\n\\n\n`posis = pattern.Box(XY, [10,20,30], [2,3,2], 'quads')`\n```\nposis = [\n    [\"ps0\", \"ps2\", \"ps3\", \"ps1\"],\n    [\"ps2\", \"ps4\", \"ps5\", \"ps3\"],\n    [\"ps0\", \"ps1\", \"ps7\", \"ps6\"],\n    [\"ps1\", \"ps3\", \"ps9\", \"ps7\"],\n    [\"ps3\", \"ps5\", \"ps11\", \"ps9\"],\n    [\"ps5\", \"ps4\", \"ps10\", \"ps11\"],\n    [\"ps4\", \"ps2\", \"ps8\", \"ps10\"],\n    [\"ps2\", \"ps0\", \"ps6\", \"ps8\"],\n    [\"ps6\", \"ps7\", \"ps9\", \"ps8\"],\n    [\"ps8\", \"ps9\", \"ps11\", \"ps10\"]\n]\n```\n\\n\nWhen the method is set to `columns` or `rows`, polylines can be generated as follows:\n```\nposis = pattern.Box(XY, [10,20,30], [2,3,2], 'rows')\nplines = make.Polyline(posis, 'open')\n```\nWhen the method is set to quads, polygons on the box surface can be generated as follows:\n```\nposis = pattern.Box(XY, [10,20,30], [2,3,2], 'quads')\npgons = make.Polygon(posis)\n```\n\\n",
								"returns": "Entities, a list of positions, or a list of lists of positions\n(depending on the 'method' setting).",
								"tags": [
									{
										"tag": "example",
										"text": "`posis = pattern.Box(XY, [10,20,30], [3,4,5], 'quads')`"
									},
									{
										"tag": "example_info",
										"text": "Returns positions in a box pattern. The size of the box is 10 wide (in X direction)\n20 long (Y direction), and 30 high (Z direction). The box has 3 columns, 4 rows, and 5 layers.\nThis results in a total of 12 (i.e. 3 x 4) positions in the top and bottom layers, and 10\npositions in the middle two layers. The positions are returned as nested lists, where each\nsub-list contains positions for one quadrilateral.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1177,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1178,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A |coordinate| or a |plane|.\nIf a coordinate is given, then the plane is assumed to be aligned with the global XY plane."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "TPlane",
												"package": "@design-automation/mobius-sim",
												"name": "TPlane"
											},
											{
												"type": "reference",
												"qualifiedName": "Txyz",
												"package": "@design-automation/mobius-sim",
												"name": "Txyz"
											}
										]
									}
								},
								{
									"id": 1179,
									"name": "size",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The width, length, and height of the box.\nIf a single number is given, then the width, length, and height are assumed to be equal.\nIf a list of two numbers is given, then they will be interpreted as `[width, length]`,\nand the height is assumed to be equal to the length.\nIf a list of three numbers is given, then they will be interpreted as `[width, length, height]`."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										]
									}
								},
								{
									"id": 1180,
									"name": "num_positions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Number of columns, rows, and layers of positions in the box.\nIf a single number is given, then the number of columns, rows, and layers are assumed to be equal.\nIf a list of two numbers is given, then they will be interpreted as `[columns, rows]`,\nand the number of layers is assumed to be equal to the number of rows.\nIf a list of three numbers is given, then they will be interpreted as `[columns, rows, layers]`."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										]
									}
								},
								{
									"id": 1181,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, define the way the coords will be returned as lists: `'flat', 'rows',\n'columns', 'layers'` or `'quads'`."
									},
									"type": {
										"type": "reference",
										"name": "_EBoxMethod"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "TId",
											"package": "@design-automation/mobius-sim",
											"name": "TId"
										}
									},
									{
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"qualifiedName": "TId",
												"package": "@design-automation/mobius-sim",
												"name": "TId"
											}
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 1168,
					"name": "Grid",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/pattern/Grid.ts",
							"line": 122,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1169,
							"name": "Grid",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates positions in a grid pattern.\n\\n\nThe `origin` parameter specifies the centre of the grid for which positions will be\ngenerated. The origin can be specified as either a |coordinate| or a |plane|. If a coordinate\nis given, then a plane will be automatically generated, aligned with the global XY plane.\n\\n\nThe positions will be generated for a grid on the origin XY plane. So if the origin plane is\nrotated, then the grid will also be rotated.\n\\n\nThe `size` parameter specifies the size of the grid.\n- If only one number is given, then width and length are assumed to be equal.\n- If a list of two numbers is given, then they will be interpreted as `[width, length]`.\n\\n\nThe width dimension will be in the X-direction of the origin plane, and the length will be in\nthe Y direction of the origin plane.\n\\n\nThe `num_positions` parameter specifies the number of columns and rows of positions in the grid.\n- If only one number is given, then the grid is assumed to have equal number columns and rows.\n- If a list of two numbers is given, then they will be interpreted as `[columns, rows]`.\n\\n\nThe `columns` will be parallel to the Y-direction of the origin plane,\nand the `rows` will be parallel to the X-direction of the origin plane.\n\\n\nFor example, consider the following function call:\n`posis = pattern.Grid(XY, [10, 20], [3, 5], 'flat')`\nThis will generate the following grid:\n\\n\n![An example of pattern.Grid](assets/typedoc-json/docMDimgs/pattern_grid.png)\n\\n\nThe positions can either be returned as a flat list or as nested lists.\nFor the nested lists, three options are available:\n- `columns`: Each nested list represents a column of positions.\n- `rows`: Each nested list represents a row of positions.\n- `quads`: Each nested list represents four positions, forming a quadrilateral. Neighbouring\nquadrilaterals share positions.\n\\n\nBelow are the varying results when calling the function with the method set to\n`flat`, `columns`, `rows` and `quads`:\n\\n\n`posis = pattern.Grid(XY, [10,20], [2,3], 'flat')`\n```\nposis = [\"ps0\", \"ps1\", \"ps2\", \"ps3\", \"ps4\", \"ps5\"]\n```\n\\n\n`posis = pattern.Grid(XY, [10,20], [2,3], 'columns')`\n```\nposis = [\n    [\"ps0\", \"ps2\", \"ps4\"],\n    [\"ps1\", \"ps3\", \"ps5\"]\n]\n```\n\\n\n`posis = pattern.Grid(XY, [10,20], [2,3], 'rows')`\n```\nposis = [\n    [\"ps0\", \"ps1\"],\n    [\"ps2\", \"ps3\"],\n    [\"ps4\", \"ps5\"]\n]\n```\n\\n\n`posis = pattern.Grid(XY, [10,20], [2,3], 'quads')`\n```\nposis = [\n    [\"ps0\", \"ps1\", \"ps3\", \"ps2\"],\n    [\"ps2\", \"ps3\", \"ps5\", \"ps4\"]\n]\n```\n\\n\nWhen the method is set to `columns` or `rows`, polylines can be generated as follows:\n```\nposis = pattern.Grid(XY, [10,20], [2,3], 'rows')\nplines = make.Polyline(posis, 'open')\n```\nWhen the method is set to quads, polygons can be generated as follows:\n```\nposis = pattern.Grid(XY, [10,20], [2,3], 'quads')\npgons = make.Polygon(posis)\n```\n\\n",
								"returns": "Entities, a list of positions, or a list of lists of positions\n(depending on the 'method' setting).",
								"tags": [
									{
										"tag": "example",
										"text": "`posis = pattern.Grid([0,0,0], 10, 3, 'flat')`"
									},
									{
										"tag": "example_info",
										"text": "Creates a list of 9 positions on a 3x3 square grid with a size of 10."
									},
									{
										"tag": "example",
										"text": "`posis = pattern.Grid([0,0,0], [10,20], [3,4], 'flat')`"
									},
									{
										"tag": "example_info",
										"text": "Creates a list of 12 positions on a 3x4 grid. The grid as a width of 10\nand a length of 20. The positions are returned as a flat list.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1170,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1171,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A |coordinate| or a |plane|.\nIf a coordinate is given, then the plane is assumed to be aligned with the global XY plane."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "TPlane",
												"package": "@design-automation/mobius-sim",
												"name": "TPlane"
											},
											{
												"type": "reference",
												"qualifiedName": "Txyz",
												"package": "@design-automation/mobius-sim",
												"name": "Txyz"
											}
										]
									}
								},
								{
									"id": 1172,
									"name": "size",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The width and length of grid.\nIf a single number is given, then the width and length are assumed to be equal.\nIf a list of two numbers is given, then they will be interpreted as `[width, length]`."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										]
									}
								},
								{
									"id": 1173,
									"name": "num_positions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Number of columns and rows of positions in the grid.\nIf a single number is given, then the number of columns and rows are assumed to be equal.\nIf a list of two numbers is given, then they will be interpreted as `[columns, rows]`."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										]
									}
								},
								{
									"id": 1174,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, define the way the coords will be return as lists: `'flat', 'rows',\n'columns'` or `'quads'`."
									},
									"type": {
										"type": "reference",
										"name": "_EGridMethod"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "TId",
											"package": "@design-automation/mobius-sim",
											"name": "TId"
										}
									},
									{
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"qualifiedName": "TId",
												"package": "@design-automation/mobius-sim",
												"name": "TId"
											}
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 1208,
					"name": "Interpolate",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/pattern/Interpolate.ts",
							"line": 41,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1209,
							"name": "Interpolate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates positions in a spline pattern. Returns a list of new positions.\nIt is a type of interpolating spline (a curve that goes through its control points).\n\\n\nThe input is a list of XYZ coordinates. These act as the control points for creating the Spline curve.\nThe positions that get generated will be divided equally between the control points.\nFor example, if you define 4 control points for a closed spline, and set 'num_positions' to be 40,\nthen you will get 8 positions between each pair of control points,\nirrespective of the distance between the control points.\n\\n\nThe spline curve can be created in three ways: 'centripetal', 'chordal', or 'catmullrom'.\n\\n\nFor more information, see the wikipedia article:\n<a href=\"https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline\">Catmull–Rom spline</a>.\n\\n\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/2/2f/Catmull-Rom_examples_with_parameters..png\"\nalt=\"Curve types\" width=\"150\">\n\\n",
								"returns": "Entities, a list of positions.",
								"tags": [
									{
										"tag": "example",
										"text": "`posis = pattern.Spline([[0,0,0], [10,0,50], [20,0,0], [30,0,20], [40,0,10]],\n'chordal','close', 0.2, 50)`"
									},
									{
										"tag": "example_info",
										"text": "Creates a list of 50 positions distributed along a spline curve pattern.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1210,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1211,
									"name": "coords",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of |coordinates|."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "Txyz",
											"package": "@design-automation/mobius-sim",
											"name": "Txyz"
										}
									}
								},
								{
									"id": 1212,
									"name": "type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the type of interpolation algorithm: 'centripetal', 'chordal', or 'catmullrom'."
									},
									"type": {
										"type": "reference",
										"name": "_ECurveCatRomType"
									}
								},
								{
									"id": 1213,
									"name": "tension",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Curve tension, between 0 and 1. This only has an effect when the 'type' is set\nto 'catmullrom'."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1214,
									"name": "close",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, `'open'` or `'close'`."
									},
									"type": {
										"type": "reference",
										"name": "_EClose"
									}
								},
								{
									"id": 1215,
									"name": "num_positions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Number of positions to be distributed distributed along the spline."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				},
				{
					"id": 1151,
					"name": "Line",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/pattern/Line.ts",
							"line": 40,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1152,
							"name": "Line",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a set of positions in a straight line pattern.\n\\n\nThe `origin` parameter specifies the centre of the straight line along which positions will be\ngenerated. The origin can be specified as either a |coordinate| or a |plane|. If a coordinate\nis given, then a plane will be automatically generated, aligned with the global XY plane.\n\\n\nThe positions will be generated along a straight line aligned with the X axis of the origin\nplane.\n\\n\nReturns the list of new positions.\n\\n",
								"returns": "Entities, a list of new positions.\n"
							},
							"parameters": [
								{
									"id": 1153,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1154,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A |coordinate| or a |plane|.\nIf a coordinate is given, then the plane is assumed to be aligned with the global XY plane."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "TPlane",
												"package": "@design-automation/mobius-sim",
												"name": "TPlane"
											},
											{
												"type": "reference",
												"qualifiedName": "Txyz",
												"package": "@design-automation/mobius-sim",
												"name": "Txyz"
											}
										]
									}
								},
								{
									"id": 1155,
									"name": "length",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A number. The length of the line along which positions will be generated."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1156,
									"name": "num_positions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "An integer. The number of positions to be generated."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				},
				{
					"id": 1157,
					"name": "Linear",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/pattern/Linear.ts",
							"line": 43,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1158,
							"name": "Linear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a set of positions by linear interpolation between the specified |coordinates|. \\n The\n`num_positions` parameter specifies the number of positions to be generated between each pair of\ncoordinates. \\n The `method` parameter specifies whether to close the loop of coordinates. If set\nto `close`, then positions are also generated between the last and first coordinates in the list.\n\\n For the `num_positions` parameters:\n- `num_positions = 0`: No positions are generated.\n- `num_positions = 1`: No new coordinates are calculated. If `close` is true, then positions are\n  generated at all coordinates in the input list. If `close` is false, then positions are\n  generated at all coordinates in the input list except the last coordinate (which is ignored).\n- `num_positions = 2`: No new coordinates are calculated. Positions are generated at all\n  coordinates in the input list. (The `close` parameter has no effect.)\n- `num_positions = 3`: For each pair of coordinates, one additional coordinate is calculated by\n  linear interpolation.\n- `num_positions = 4`: For each pair of coordinates, two additional coordinates are calculated by\n  linear interpolation.\n- etc\n \\n\n For example, lets consider a case where you specify three coordinates, set the method to\n  `close` and set `num_positions` to 4. In this case, there will be 3 pairs of coordinates, `[0,\n  1]`, `[1, 2]` and `[2, 0]`. For each pair of coordinates, 2 new calculations are calculated.\n  This results in a total of 9 coordinates. So 9 positions will be generated. \\n Returns the list\n  of new position IDs. \\n",
								"returns": "Entities, a list of new position IDs.",
								"tags": [
									{
										"tag": "example",
										"text": "`posis = pattern.Linear([[0,0,0], [10,0,0]], false, 3)`"
									},
									{
										"tag": "example_info",
										"text": "Generates 3 positions, located at [0,0,0], [5,0,0], and [10,0,0]."
									},
									{
										"tag": "example",
										"text": "`posis = pattern.Linear([[0,0,0], [10,0,0], [10,10,0]], 'close', 4)`"
									},
									{
										"tag": "example_info",
										"text": "Generates 9 positions. Two new coordinates are calculated between each pair of\ninput positions.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1159,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1160,
									"name": "coords",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of |coordinates|."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "Txyz",
											"package": "@design-automation/mobius-sim",
											"name": "Txyz"
										}
									}
								},
								{
									"id": 1161,
									"name": "close",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, `'open'` or `'close'`."
									},
									"type": {
										"type": "reference",
										"name": "_EClose"
									}
								},
								{
									"id": 1162,
									"name": "num_positions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The number of positions to generate."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				},
				{
					"id": 1201,
					"name": "Nurbs",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/pattern/Nurbs.ts",
							"line": 42,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1202,
							"name": "Nurbs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates positions in a NURBS curve pattern, defined by a list of coordinates.\n\\n\nThe positions are created along the curve according to the parametric equation of the curve.\nThis means that the euclidean distance between the positions will not necessarily be equal.\nFor open BSpline curves, the positions at the start and end tend to be closer together.\n\\n\nThe `coords` parameter gives the list of |coordinates| for generating the curve.\n- If the curve is open, then the first and last coordinates in the list are the start and end\npositions of the curve. The middle coordinates act as the control points for controlling the\nshape of the curve.\n- If the curve is closed, then all coordinates act as the control points for controlling the\nshape of the curve.\n\\n\nThe degree (between 2 and 5) of the curve defines how smooth the curve is.\nQuadratic: degree = 2\nCubic: degree = 3\nQuartic: degree = 4.\n\\n\nThe number of coordinates should be at least one greater than the degree of the curve.\n\\n\nThe `num_positions` parameter specifies the total number of positions to be generated.\n\\n",
								"returns": "Entities, a list of positions.",
								"tags": [
									{
										"tag": "example",
										"text": "`posis = pattern.Nurbs([[0,0,0], [10,0,50], [20,0,50], [30,0,0]], 3, 'open', 20)`"
									},
									{
										"tag": "example_info",
										"text": "Creates a list of 20 positions distributed along a Nurbs curve.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1203,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1204,
									"name": "coords",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of |coordinates| (must be at least three)."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "Txyz",
											"package": "@design-automation/mobius-sim",
											"name": "Txyz"
										}
									}
								},
								{
									"id": 1205,
									"name": "degree",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The degree of the curve, an integer between 2 and 5."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1206,
									"name": "close",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, `'close'` or `'open'`."
									},
									"type": {
										"type": "reference",
										"name": "_EClose"
									}
								},
								{
									"id": 1207,
									"name": "num_positions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Number of positions to be distributed along the Bezier."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				},
				{
					"id": 1182,
					"name": "Polyhedron",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/pattern/Polyhedron.ts",
							"line": 106,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1183,
							"name": "Polyhedron",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates positions in a polyhedron pattern.\n\\n\nThe five regular polyhedrons can be generated:\n- Tetrahedron (4 triangular faces)\n- Cube (4 square faces)\n- Octahedron (8 triangular faces)\n- Icosahedron (20 triangular faces)\n- Dodecahedron (12 pentagon faces)\n\\n\nThe `origin` parameter specifies the centre of the polyhedron for which positions will be\ngenerated. The origin can be specified as either a |coordinate| or a |plane|. If a coordinate\nis given, then a plane will be automatically generated, aligned with the global XY plane.\n\\n\nThe positions will be generated for a polyhedron aligned with the origin XY plane.\nSo if the origin plane is rotated, then the polyhedron will also be rotated.\n\\n\nThe `radius` parameter specifies the size of the polyhedron.\nAll positions that are generated are projected onto the surface of a sphere,\nwith the specified `radius`.\n\\n\nThe faces of the regular polyhedron can be further subdivided by specifying the level of\n`detail`. (When subdivided, it will no longer be regular polyhedrons.)\n\\n\nFor tetrahedrons, octahedrons, and icosahedrons, the `detail` subdivides as follows:\n- Detail = 0: No subdivision\n- Detail = 1: Each triangle edge is subdivided into two edges.\n- Detail = 2: Each triangle edge is subdivided into three edges.\n- etc\n\\n\nCubes and dodecahedrons do not have triangular faces. So in these cases, the first level of\n`detail` converts each non-triangular face into triangles by adding a position at the centre of\nthe face. The `detail` subdivides as follows:\n- Detail = 0: No subdivision.\n- Detail = 1: Convert non-triangular faces into triangles.\n- Detail = 2: Each triangle edge is subdivided into two edges.\n- Detail = 3: Each triangle edge is subdivided into three edges.\n- etc\n\\n\nThe positions can either be returned as a flat list or as nested lists.\nThe nested lists represent the faces of the polyhedron.\nHowever, note that only the positions are returned.\nIf you want to have polygon faces, you need to generate polygons from the positions.\n\\n\nFor example, calling the function with `detail = 0` and `method = 'flat_tetra'`,\nwill result in the following positions:\n```\nposis = [\"ps0\", \"ps1\", \"ps2\", \"ps3\"]\n```\nIf you change the method to `method = 'face_tetra'`, then you will get the following nested lists.\n```\nposis = [\n    [\"ps2\", \"ps1\", \"ps0\"],\n    [\"ps0\", \"ps3\", \"ps2\"],\n    [\"ps1\", \"ps3\", \"ps0\"],\n    [\"ps2\", \"ps3\", \"ps1\"]\n]\n```\nNotice that the number of positions is the same in both cases\n(i.e. in both cases there are 4 positions: 'ps0', 'ps1', 'ps2', 'ps3').\nWhen `face_tetra` is selected selected, the positions are organised into 4 lists,\nrepresenting the 4 faces of the tetrahedron.\n\\n\nThe nested lists can be passed to the `make.Polygon` function in order to generated polygonal faces.\nHere is an example:\n\\n\n```\nposis = pattern.Polyhedron(XY, 10, 0, 'face_tetra')\npgons = make.Polygon(posis)\n```\n\\n\n![Tetrahedron with triangular faces](assets/typedoc-json/docMDimgs/polyhedron_tetra.png)\n\\n",
								"returns": "Entities, a list of positions.",
								"tags": [
									{
										"tag": "example",
										"text": "`posis = pattern.Polyhedron(XY, 20, 0, 'face_tetra')`"
									},
									{
										"tag": "example_info",
										"text": "Creates positions in a regular tetrahedron pattern, with a radius of 20. The\npositions are returned as nested lists, where each list contains the positions for one face.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1184,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1185,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A |coordinate| or a |plane|, specifying the origin of the polyhedron.\nIf a coordinate is given, then the plane is assumed to be aligned with the global XY plane."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "TPlane",
												"package": "@design-automation/mobius-sim",
												"name": "TPlane"
											},
											{
												"type": "reference",
												"qualifiedName": "Txyz",
												"package": "@design-automation/mobius-sim",
												"name": "Txyz"
											}
										]
									}
								},
								{
									"id": 1186,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A number. The radius of the polyhedron."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1187,
									"name": "detail",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "An integer. The level of detail for the polyhedron."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1188,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the Type of polyhedron to generate: `'flat_tetra', 'flat_cube', 'flat_octa',\n'flat_icosa', 'flat_dodeca', 'face_tetra', 'face_cube', 'face_octa', 'face_icosa'` or `'face_dodeca'`."
									},
									"type": {
										"type": "reference",
										"name": "_EPolyhedronMethod"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "TId",
											"package": "@design-automation/mobius-sim",
											"name": "TId"
										}
									},
									{
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"qualifiedName": "TId",
												"package": "@design-automation/mobius-sim",
												"name": "TId"
											}
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 1163,
					"name": "Rectangle",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/pattern/Rectangle.ts",
							"line": 50,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1164,
							"name": "Rectangle",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates four positions in a rectangle pattern.\n\\n\nThe `origin` parameter specifies the centre of the rectangle for which positions will be\ngenerated. The origin can be specified as either a |coordinate| or a |plane|. If a coordinate\nis given, then a plane will be automatically generated, aligned with the global XY plane.\n\\n\nThe positions will be generated for a rectangle on the origin XY plane. So if the origin plane is\nrotated, then the rectangle will also be rotated.\n\\n\nThe `size` parameter specifies the size of the rectangle. If only one number is given,\nthen width and length are assumed to be equal. If a list of two numbers is given,\nthen they will be interpreted as `[width, length]`.The width dimension will be in the\nX-direction of the origin plane, and the length will be in the Y direction of the origin plane.\n\\n\nReturns a list of new positions.\n\\n",
								"returns": "Entities, a list of four positions.",
								"tags": [
									{
										"tag": "example",
										"text": "`posis = pattern.Rectangle([0,0,0], 10)`"
									},
									{
										"tag": "example_info",
										"text": "Creates a list of 4 coords, being the vertices of a 10 by 10 square."
									},
									{
										"tag": "example",
										"text": "`posis = pattern.Rectangle(XY, [10,20])`"
									},
									{
										"tag": "example_info",
										"text": "Creates a list of 4 positions in a rectangle pattern. The rectangle has a width of\n10 (in the X direction) and a length of 20 (in the Y direction).\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1165,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1166,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A |coordinate| or a |plane|.\nIf a coordinate is given, then the plane is assumed to be aligned with the global XY plane."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "TPlane",
												"package": "@design-automation/mobius-sim",
												"name": "TPlane"
											},
											{
												"type": "reference",
												"qualifiedName": "Txyz",
												"package": "@design-automation/mobius-sim",
												"name": "Txyz"
											}
										]
									}
								},
								{
									"id": 1167,
									"name": "size",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Size of rectangle. If number, assume square of that length;\nif list of two numbers, x and y lengths respectively."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1216
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1189,
						1196,
						1175,
						1168,
						1208,
						1151,
						1157,
						1201,
						1182,
						1163
					]
				}
			],
			"sources": [
				{
					"fileName": "modules/functions/pattern/index.ts",
					"line": 7,
					"character": 0
				}
			]
		},
		{
			"id": 1297,
			"name": "poly2d",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "The `poly2D` module has a set of functions for working with 2D polygons, with the results\nprojected on the XY plane.\n\\n\nAll the functions create new entities and do not modify the original geometry."
			},
			"children": [
				{
					"id": 1356,
					"name": "Poly2dFunc",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 1357,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/poly2d/index.ts",
									"line": 60,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1358,
									"name": "new Poly2dFunc",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1359,
											"name": "model",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "GIModel",
												"package": "@design-automation/mobius-sim",
												"name": "GIModel"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1356,
										"name": "Poly2dFunc"
									}
								}
							]
						},
						{
							"id": 1360,
							"name": "__enum__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/poly2d/index.ts",
									"line": 40,
									"character": 4
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1361,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1362,
											"name": "BBoxPolygon",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/poly2d/index.ts",
													"line": 41,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1363,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1364,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/poly2d/index.ts",
																	"line": 42,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EBBoxMethod"
																}
															},
															"defaultValue": "Enum._EBBoxMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1364
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 1365,
											"name": "Boolean",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/poly2d/index.ts",
													"line": 44,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1366,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1367,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/poly2d/index.ts",
																	"line": 45,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EBooleanMethod"
																}
															},
															"defaultValue": "Enum._EBooleanMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1367
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 1368,
											"name": "OffsetChamfer",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/poly2d/index.ts",
													"line": 47,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1369,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1370,
															"name": "end_type",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/poly2d/index.ts",
																	"line": 48,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EOffset"
																}
															},
															"defaultValue": "Enum._EOffset"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1370
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 1371,
											"name": "OffsetMitre",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/poly2d/index.ts",
													"line": 50,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1372,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1373,
															"name": "end_type",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/poly2d/index.ts",
																	"line": 51,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EOffset"
																}
															},
															"defaultValue": "Enum._EOffset"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1373
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 1374,
											"name": "OffsetRound",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/poly2d/index.ts",
													"line": 53,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1375,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1376,
															"name": "end_type",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/poly2d/index.ts",
																	"line": 54,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EOffsetRound"
																}
															},
															"defaultValue": "Enum._EOffsetRound"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1376
															]
														}
													]
												}
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1362,
												1365,
												1368,
												1371,
												1374
											]
										}
									]
								}
							},
							"defaultValue": "..."
						},
						{
							"id": 1377,
							"name": "__model__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/poly2d/index.ts",
									"line": 59,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "GIModel",
								"package": "@design-automation/mobius-sim",
								"name": "GIModel"
							}
						},
						{
							"id": 1378,
							"name": "BBoxPolygon",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/poly2d/index.ts",
									"line": 63,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1379,
									"name": "BBoxPolygon",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1380,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1381,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EBBoxMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1382,
							"name": "Boolean",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/poly2d/index.ts",
									"line": 66,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1383,
									"name": "Boolean",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1384,
											"name": "a_entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1385,
											"name": "b_entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1386,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EBooleanMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1387,
							"name": "Clean",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/poly2d/index.ts",
									"line": 69,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1388,
									"name": "Clean",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1389,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1390,
											"name": "tolerance",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1391,
							"name": "ConvexHull",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/poly2d/index.ts",
									"line": 72,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1392,
									"name": "ConvexHull",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1393,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1394,
							"name": "Delaunay",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/poly2d/index.ts",
									"line": 75,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1395,
									"name": "Delaunay",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1396,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1397,
							"name": "OffsetChamfer",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/poly2d/index.ts",
									"line": 78,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1398,
									"name": "OffsetChamfer",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1399,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1400,
											"name": "dist",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1401,
											"name": "end_type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EOffset"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1402,
							"name": "OffsetMitre",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/poly2d/index.ts",
									"line": 81,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1403,
									"name": "OffsetMitre",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1404,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1405,
											"name": "dist",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1406,
											"name": "limit",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1407,
											"name": "end_type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EOffset"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1408,
							"name": "OffsetRound",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/poly2d/index.ts",
									"line": 84,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1409,
									"name": "OffsetRound",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1410,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1411,
											"name": "dist",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1412,
											"name": "tolerance",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1413,
											"name": "end_type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EOffsetRound"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1414,
							"name": "Stitch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/poly2d/index.ts",
									"line": 87,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1415,
									"name": "Stitch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1416,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1417,
											"name": "tolerance",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1418,
							"name": "Union",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/poly2d/index.ts",
									"line": 90,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1419,
									"name": "Union",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1420,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1421,
							"name": "Voronoi",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/poly2d/index.ts",
									"line": 93,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1422,
									"name": "Voronoi",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1423,
											"name": "pgons",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1424,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1357
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1360,
								1377
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1378,
								1382,
								1387,
								1391,
								1394,
								1397,
								1402,
								1408,
								1414,
								1418,
								1421
							]
						}
					],
					"sources": [
						{
							"fileName": "modules/functions/poly2d/index.ts",
							"line": 37,
							"character": 13
						}
					]
				},
				{
					"id": 1311,
					"name": "BBoxPolygon",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/poly2d/BBoxPolygon.ts",
							"line": 41,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1312,
							"name": "BBoxPolygon",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a polygon that is a 2D bounding box of the entities.\n\\n\nFor the method, 'aabb' generates an Axis Aligned Bounding Box, and 'obb' generates an Oriented Bounding Box.\n\\n\nSee `calc.BBox` and `visualize.BBox` for calculating and visualizng 3D BBox polylines instead.",
								"returns": "A new polygon, the bounding box of the positions.\n"
							},
							"parameters": [
								{
									"id": 1313,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1314,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of positions, or entities from which positions can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 1315,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the method for generating the bounding box: `'aabb'` or `'obb'`."
									},
									"type": {
										"type": "reference",
										"name": "_EBBoxMethod"
									}
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "TId",
								"package": "@design-automation/mobius-sim",
								"name": "TId"
							}
						}
					]
				},
				{
					"id": 1320,
					"name": "Boolean",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/poly2d/Boolean.ts",
							"line": 48,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1321,
							"name": "Boolean",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Perform a boolean operation on polylines or polygons.\n\\n\nThe entities in A can be either polyline or polygons.\nThe entities in B must be polygons.\nThe polygons in B are first unioned before the operation is performed.\nThe boolean operation is then performed between each polyline or polygon in A, and the unioned B polygons.\n\\n\nIf A is an empty list, then an empty list is returned.\nIf B is an empty list, then the A list is returned.\n\\n\nThe input polygons or polylines are not deleted.",
								"returns": "A list of new polylines and polygons.\n"
							},
							"parameters": [
								{
									"id": 1322,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1323,
									"name": "a_entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of polyline or polygons, or entities from which polyline or polygons can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 1324,
									"name": "b_entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of polygons, or entities from which polygons can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 1325,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the boolean operator to apply: `'intersect', 'difference'` or `'symmetric'`."
									},
									"type": {
										"type": "reference",
										"name": "_EBooleanMethod"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				},
				{
					"id": 1351,
					"name": "Clean",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/poly2d/Clean.ts",
							"line": 45,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1352,
							"name": "Clean",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Clean a polyline or polygon.\n\\n\nVertices that are closer together than the specified tolerance will be merged.\nVertices that are colinear within the tolerance distance will be deleted.\n\\n",
								"returns": "A list of new polylines or polygons.\n"
							},
							"parameters": [
								{
									"id": 1353,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1354,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of polylines or polygons, or entities from which polylines or polygons can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 1355,
									"name": "tolerance",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The tolerance for deleting vertices from the polyline.\n(If nothing happens, try using a smaller tolerance number from 0-2.\nResults of tolerance can be checked with query.Get vertices.)"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				},
				{
					"id": 1307,
					"name": "ConvexHull",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/poly2d/ConvexHull.ts",
							"line": 33,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1308,
							"name": "ConvexHull",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a convex hull from a list of positions.\n\\n\nFor more information, see the wikipedia article:\n<a href=\"https://en.wikipedia.org/wiki/Convex_hull\" target=\"_blank\">Convex_Hull</a>\n\\n\n<img\nsrc=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/8e/Extreme_points.svg/330px-Extreme_points.svg.png\"\nalt=\"Convex hull example\" width=\"150\">\n\\n\nIn the image above, the convex hull of the red set is the blue and red convex set.",
								"returns": "A list of new polygons, the convex hull of the positions.\n"
							},
							"parameters": [
								{
									"id": 1309,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1310,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of positions, or entities from which positions can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "TId",
								"package": "@design-automation/mobius-sim",
								"name": "TId"
							}
						}
					]
				},
				{
					"id": 1303,
					"name": "Delaunay",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/poly2d/Delaunay.ts",
							"line": 33,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1304,
							"name": "Delaunay",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a delaunay triangulation of a set of positions.\n\\n\nA Delaunay triangulation for a given set of positions (`entities`) is a triangulation, DT(P), such\nthat no position in `entities` is inside the circumcircle of any triangle in DT(P).\nSee the wikipedia page for more info: <a href=\"https://en.wikipedia.org/wiki/Delaunay_triangulation\" target=\"_blank\">\nDelanuay triangulation</a>.\n\\n\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/d/db/Delaunay_circumcircles_vectorial.svg\">\n\\n",
								"returns": "A list of new polygons.\n"
							},
							"parameters": [
								{
									"id": 1305,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1306,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of positions, or entities from which positions can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				},
				{
					"id": 1333,
					"name": "OffsetChamfer",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/poly2d/OffsetChamfer.ts",
							"line": 41,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1334,
							"name": "OffsetChamfer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Offset a polyline or polygon, with chamfered/squared joints. The original entities are unmodified.\n\\n\nThe types of joints of the generated offset polygon are shown below.\nThe red border indicates the generated offset polygon, whereas the black polygon\nis the original/input polygon.\n\\n\n![Examples of offset joints](/assets/typedoc-json/docMDimgs/funcs_poly2d_offsets_joints_examples.png)\n\\n\nSee `poly2d.OffsetMitre` and `poly2d.OffsetRound` to use different joints while offsetting.\nAlternatively, try `modify.Offset` for a different offset operation that works in 3D and modifies\nthe original entities.\n\\n\nFor open polylines, the type of ends can be changed with `end\\_type`, shown below.\n\\n\n![Examples of offset ends](/assets/typedoc-json/docMDimgs/funcs_poly2d_offsets_examples.png)\n\\n",
								"returns": "A list of new polygons.\n"
							},
							"parameters": [
								{
									"id": 1335,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1336,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of polyines or polygons, or entities from which polylines or polygons can\nbe extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 1337,
									"name": "dist",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Offset distance, a number."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1338,
									"name": "end_type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the type of end shape for open polylines: `'square_end'` or `'butt_end'`."
									},
									"type": {
										"type": "reference",
										"name": "_EOffset"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				},
				{
					"id": 1326,
					"name": "OffsetMitre",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/poly2d/OffsetMitre.ts",
							"line": 46,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1327,
							"name": "OffsetMitre",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Offset a polyline or polygon, with mitered joints. The original entities are unmodified.\n\\n\nThe types of joints of the generated offset polygon are shown below.\nThe red border indicates the generated offset polygon, whereas the black polygon\nis the original/input polygon.\n\\n\n![Examples of offset joints](/assets/typedoc-json/docMDimgs/funcs_poly2d_offsets_joints_examples.png)\n\\n\nSee `poly2d.OffsetChamfer` and `poly2d.OffsetRound` to use different joints while offsetting.\nAlternatively, try `modify.Offset` for a different offset operation that works in 3D and modifies\nthe original entities.\n\\n\nFor open polylines, the type of ends can be changed with `end\\_type`, shown below.\n\\n\n![Examples of offset ends](/assets/typedoc-json/docMDimgs/funcs_poly2d_offsets_examples.png)\n\\n\n`limit` determines how far a mitered joint can be offset if it is at a sharp angle (see above image).\nIf the mitered joint's length exceeds the `limit`, a \"squared\" offsetting is created at the joint.",
								"returns": "A list of new polygons.\n"
							},
							"parameters": [
								{
									"id": 1328,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1329,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of polylines or polygons, or entities from which polylines or polygons can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 1330,
									"name": "dist",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Offset distance, a number."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1331,
									"name": "limit",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Mitre limit, a number."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1332,
									"name": "end_type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the type of end shape for open polylines: `'square_end'` or `'butt_end'`."
									},
									"type": {
										"type": "reference",
										"name": "_EOffset"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				},
				{
					"id": 1339,
					"name": "OffsetRound",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/poly2d/OffsetRound.ts",
							"line": 53,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1340,
							"name": "OffsetRound",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Offset a polyline or polygon, with round joints. The original entities are unmodified.\n\\n\nThe types of joints of the generated offset polygon are shown below.\nThe red border indicates the generated offset polygon, whereas the black polygon\nis the original/input polygon.\n\\n\n![Examples of offset joints](/assets/typedoc-json/docMDimgs/funcs_poly2d_offsets_joints_examples.png)\n\\n\nSee `poly2d.OffsetMitre` and `poly2d.OffsetChamfer` to use different joints while offsetting.\nAlternatively, try `modify.Offset` for a different offset operation that works in 3D and modifies\nthe original entities.\n\\n\nFor open polylines, the type of ends can be changed with `end\\_type`, shown below.\n\\n\n![Examples of offset ends](/assets/typedoc-json/docMDimgs/funcs_poly2d_offsetRound_examples.png)\n\\n",
								"returns": "A list of new polygons.\n"
							},
							"parameters": [
								{
									"id": 1341,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1342,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of polylines or polygons, or entities from which polylines or polygons can\nbe extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 1343,
									"name": "dist",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Offset distance, a number."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1344,
									"name": "tolerance",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The tolerance for the rounded corners, a number that is more than 0. In general,\nthe smaller the number, the rounder the joints. Will also apply to `round_end` if selected."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1345,
									"name": "end_type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the type of end shape for open polylines: `'square_end', 'butt_end'` or `'round_end'`."
									},
									"type": {
										"type": "reference",
										"name": "_EOffsetRound"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				},
				{
					"id": 1346,
					"name": "Stitch",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/poly2d/Stitch.ts",
							"line": 34,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1347,
							"name": "Stitch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds vertices to polyline and polygons at all locations where edges intersect one another.\nThe vertices are welded.\nThis can be useful for creating networks that can be used for shortest path calculations.\n\\n\nThe input polyline and polygons are copied.\n\\n",
								"returns": "Copies of the input polyline and polygons, stitched.\n"
							},
							"parameters": [
								{
									"id": 1348,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1349,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of polylines or polygons, or entities from which polylines or polygons can\nbe extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 1350,
									"name": "tolerance",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The tolerance for extending open plines if they are almost intersecting."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				},
				{
					"id": 1316,
					"name": "Union",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/poly2d/Union.ts",
							"line": 26,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1317,
							"name": "Union",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create the union of a set of polygons. The original polygons are not edited.",
								"returns": "A list of new polygons.\n"
							},
							"parameters": [
								{
									"id": 1318,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1319,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of polygons, or entities from which polygons can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				},
				{
					"id": 1298,
					"name": "Voronoi",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/poly2d/Voronoi.ts",
							"line": 40,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1299,
							"name": "Voronoi",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a voronoi subdivision of one or more polygons.\n\\n\nA Voronoi diagram is a partition of a plane into regions close to each of a given set of positions.\nSee the wikipedia page for more info: <a href=\"https://en.wikipedia.org/wiki/Voronoi_diagram\" target=\"_blank\">\nVoronoi Diagrams</a>.\n<a href=\"https://github.com/d3/d3-voronoi#readme\" target=\"_blank\">See the source github for\ninteractive examples and more information on calculating voronoi subdivisions.</a>\n\\n\n![Examples of voronoi outputs](/assets/typedoc-json/docMDimgs/funcs_poly2d_voronoi_examples.png)",
								"returns": "A list of new polygons.\n"
							},
							"parameters": [
								{
									"id": 1300,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1301,
									"name": "pgons",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A polygon, list of polygons, or entities from which polygons can be extracted. (This/these will be subdivided.)"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 1302,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of positions, or entities from which positions can be extracted.\n(Each of these will be within a generated polygon.)"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1356
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1311,
						1320,
						1351,
						1307,
						1303,
						1333,
						1326,
						1339,
						1346,
						1316,
						1298
					]
				}
			],
			"sources": [
				{
					"fileName": "modules/functions/poly2d/index.ts",
					"line": 9,
					"character": 0
				}
			]
		},
		{
			"id": 1425,
			"name": "query",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "The `query` module has functions for querying entities in the the model.\nMost of these functions all return a list of IDs of entities in the model."
			},
			"children": [
				{
					"id": 1469,
					"name": "QueryFunc",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 1470,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/query/index.ts",
									"line": 60,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1471,
									"name": "new QueryFunc",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1472,
											"name": "model",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "GIModel",
												"package": "@design-automation/mobius-sim",
												"name": "GIModel"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1469,
										"name": "QueryFunc"
									}
								}
							]
						},
						{
							"id": 1473,
							"name": "__enum__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/query/index.ts",
									"line": 31,
									"character": 4
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1474,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1475,
											"name": "Edge",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/query/index.ts",
													"line": 32,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1476,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1477,
															"name": "edge_query_enum",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/query/index.ts",
																	"line": 33,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EEdgeMethod"
																}
															},
															"defaultValue": "Enum._EEdgeMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1477
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 1478,
											"name": "Filter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/query/index.ts",
													"line": 35,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1479,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1480,
															"name": "operator_enum",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/query/index.ts",
																	"line": 36,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EFilterOperator"
																}
															},
															"defaultValue": "Enum._EFilterOperator"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1480
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 1481,
											"name": "Get",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/query/index.ts",
													"line": 38,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1482,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1483,
															"name": "ent_type_enum",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/query/index.ts",
																	"line": 39,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EEntType"
																}
															},
															"defaultValue": "Enum._EEntType"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1483
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 1484,
											"name": "Invert",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/query/index.ts",
													"line": 41,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1485,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1486,
															"name": "ent_type_enum",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/query/index.ts",
																	"line": 42,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EEntType"
																}
															},
															"defaultValue": "Enum._EEntType"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1486
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 1487,
											"name": "Neighbor",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/query/index.ts",
													"line": 44,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1488,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1489,
															"name": "ent_type_enum",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/query/index.ts",
																	"line": 45,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EEntType"
																}
															},
															"defaultValue": "Enum._EEntType"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1489
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 1490,
											"name": "Perimeter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/query/index.ts",
													"line": 47,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1491,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1492,
															"name": "ent_type",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/query/index.ts",
																	"line": 48,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EEntType"
																}
															},
															"defaultValue": "Enum._EEntType"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1492
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 1493,
											"name": "Sort",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/query/index.ts",
													"line": 50,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1494,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1495,
															"name": "method_enum",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/query/index.ts",
																	"line": 51,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_ESortMethod"
																}
															},
															"defaultValue": "Enum._ESortMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1495
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 1496,
											"name": "Type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/query/index.ts",
													"line": 53,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1497,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1498,
															"name": "type_query_enum",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/query/index.ts",
																	"line": 54,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_ETypeQueryEnum"
																}
															},
															"defaultValue": "Enum._ETypeQueryEnum"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1498
															]
														}
													]
												}
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1475,
												1478,
												1481,
												1484,
												1487,
												1490,
												1493,
												1496
											]
										}
									]
								}
							},
							"defaultValue": "..."
						},
						{
							"id": 1499,
							"name": "__model__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/query/index.ts",
									"line": 59,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "GIModel",
								"package": "@design-automation/mobius-sim",
								"name": "GIModel"
							}
						},
						{
							"id": 1500,
							"name": "Edge",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/query/index.ts",
									"line": 63,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1501,
									"name": "Edge",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1502,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1503,
											"name": "edge_query_enum",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EEdgeMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1504,
							"name": "Filter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/query/index.ts",
									"line": 66,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1505,
									"name": "Filter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1506,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1507,
											"name": "attrib",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "number"
																	}
																]
															}
														]
													}
												]
											}
										},
										{
											"id": 1508,
											"name": "operator_enum",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EFilterOperator"
											}
										},
										{
											"id": 1509,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "intrinsic",
														"name": "object"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1510,
							"name": "Get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/query/index.ts",
									"line": 69,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1511,
									"name": "Get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1512,
											"name": "ent_type_enum",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EEntType"
											}
										},
										{
											"id": 1513,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1514,
							"name": "Invert",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/query/index.ts",
									"line": 72,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1515,
									"name": "Invert",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1516,
											"name": "ent_type_enum",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EEntType"
											}
										},
										{
											"id": 1517,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1518,
							"name": "Neighbor",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/query/index.ts",
									"line": 75,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1519,
									"name": "Neighbor",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1520,
											"name": "ent_type_enum",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EEntType"
											}
										},
										{
											"id": 1521,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1522,
							"name": "Perimeter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/query/index.ts",
									"line": 78,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1523,
									"name": "Perimeter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1524,
											"name": "ent_type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EEntType"
											}
										},
										{
											"id": 1525,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1526,
							"name": "Sort",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/query/index.ts",
									"line": 81,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1527,
									"name": "Sort",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1528,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 1529,
											"name": "attrib",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "number"
																	}
																]
															}
														]
													}
												]
											}
										},
										{
											"id": 1530,
											"name": "method_enum",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_ESortMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1531,
							"name": "Type",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/query/index.ts",
									"line": 84,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1532,
									"name": "Type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1533,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1534,
											"name": "type_query_enum",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_ETypeQueryEnum"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1470
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1473,
								1499
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1500,
								1504,
								1510,
								1514,
								1518,
								1522,
								1526,
								1531
							]
						}
					],
					"sources": [
						{
							"fileName": "modules/functions/query/index.ts",
							"line": 28,
							"character": 13
						}
					]
				},
				{
					"id": 1459,
					"name": "Edge",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/query/Edge.ts",
							"line": 28,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1460,
							"name": "Edge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Given an edge, returns other edges.\n- If \"previous\" is selected, it returns the previous edge in the wire or null if there is no previous edge.\n- If \"next\" is selected, it returns the next edge in the wire or null if there is no next edge.\n- If \"both\" is selected, it returns a list of two edges, [previous, next]. Either can be null.\n- If \"touching\" is selected, it returns a list of edges from other wires that share the same start and end positions (in any order).",
								"returns": "Entities, an edge or list of edges, or null.\n"
							},
							"parameters": [
								{
									"id": 1461,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1462,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "An edge or list of edges."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 1463,
									"name": "edge_query_enum",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, select the types of edges to return: `'previous', 'next', 'both'` or `'touching'`."
									},
									"type": {
										"type": "reference",
										"name": "_EEdgeMethod"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"qualifiedName": "TId",
										"package": "@design-automation/mobius-sim",
										"name": "TId"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "TId",
											"package": "@design-automation/mobius-sim",
											"name": "TId"
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 1431,
					"name": "Filter",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/query/Filter.ts",
							"line": 34,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1432,
							"name": "Filter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Filter a list of entities based on an attribute value.\n\\n\nThe result will always be a list of entities, even if there is only one entity.\nIn a case where you want only one entity, remember to get the first item in the list.\n\\n",
								"returns": "Entities, a list of entities that match the conditions specified in 'operater\\_enum' and 'value'.\n"
							},
							"parameters": [
								{
									"id": 1433,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1434,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "List of entities to filter. The entities must all be of the same type."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 1435,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The attribute to use for filtering. Can be `name`, `[name, index]`, or `[name,\nkey]`."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												]
											}
										]
									}
								},
								{
									"id": 1436,
									"name": "operator_enum",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the operator to use for filtering: `'==', '!=', '>=', '<=', '>', '<'` or `'='`."
									},
									"type": {
										"type": "reference",
										"name": "_EFilterOperator"
									}
								},
								{
									"id": 1437,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The attribute value to use for filtering."
									},
									"type": {
										"type": "reference",
										"qualifiedName": "TAttribDataTypes",
										"package": "@design-automation/mobius-sim",
										"name": "TAttribDataTypes"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "TId",
											"package": "@design-automation/mobius-sim",
											"name": "TId"
										}
									},
									{
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"qualifiedName": "TId",
												"package": "@design-automation/mobius-sim",
												"name": "TId"
											}
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 1426,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/query/Get.ts",
							"line": 35,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1427,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get entities from a list of entities.\nFor example, you can get the position entities from a list of polygon entities.\n\\n\nThe result will always be a list of entities, even if there is only one entity.\nIn a case where you want only one entity, remember to get the first item in the list.\n\\n\nThe resulting list of entities will not contain duplicate entities.\n\\n",
								"returns": "Entities, a list of entities.",
								"tags": [
									{
										"tag": "example",
										"text": "`positions = query.Get('positions', [polyline1, polyline2])`"
									},
									{
										"tag": "example_info",
										"text": "Returns a list of positions that are part of polyline1 and polyline2.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1428,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1429,
									"name": "ent_type_enum",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the type of entity to get: `'ps', '_v', '_e', '_w', 'pt', 'pl',\n'pg',` or `'co'`."
									},
									"type": {
										"type": "reference",
										"name": "_EEntType"
									}
								},
								{
									"id": 1430,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "(Optional) List of entities to get entities from, or null to get from all entities in the model."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "TId",
											"package": "@design-automation/mobius-sim",
											"name": "TId"
										}
									},
									{
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"qualifiedName": "TId",
												"package": "@design-automation/mobius-sim",
												"name": "TId"
											}
										}
									}
								]
							}
						}
					]
				},
				{
					"id": 1438,
					"name": "Invert",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/query/Invert.ts",
							"line": 34,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1439,
							"name": "Invert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a list of entities that are not part of the specified entities.\nFor example, you can get the position entities that are not part of a list of polygon entities.\n\\n\nThis function does the opposite of `query.Get()`.\nWhile `query.Get()` gets entities that are part of the list of entities,\nthis function gets the entities that are not part of the list of entities.\n\\n",
								"returns": "Entities, a list of entities that match the type specified in '`ent_type_enum`', and that are not in `entities`.",
								"tags": [
									{
										"tag": "example",
										"text": "`positions = query.Invert('positions', [polyline1, polyline2])`"
									},
									{
										"tag": "example_info",
										"text": "Returns a list of positions that are not part of polyline1 and polyline2.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1440,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1441,
									"name": "ent_type_enum",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, specifies what type of entities will be returned: `'ps', '_v', '_e',\n'_w', 'pt', 'pl', 'pg'`, or `'co'`."
									},
									"type": {
										"type": "reference",
										"name": "_EEntType"
									}
								},
								{
									"id": 1442,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "List of entities to be excluded."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				},
				{
					"id": 1454,
					"name": "Neighbor",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/query/Neighbor.ts",
							"line": 30,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1455,
							"name": "Neighbor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a list of neighboring entities. In order to qualify as a neighbor,\nentities must not be part of the set of input entities, but must be welded to one or more entities in the input.\n\\n",
								"returns": "Entities, a list of welded neighbors",
								"tags": [
									{
										"tag": "example",
										"text": "`query.neighbor('edges', [polyline1,polyline2,polyline3])`"
									},
									{
										"tag": "example_info",
										"text": "Returns list of edges that are welded to polyline1, polyline2, or polyline3.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1456,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1457,
									"name": "ent_type_enum",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, select the types of neighbors to return: `'ps', '_v', '_e', '_w', 'pt', 'pl',\n'pg',` or `'co'`."
									},
									"type": {
										"type": "reference",
										"name": "_EEntType"
									}
								},
								{
									"id": 1458,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "List of entities."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				},
				{
					"id": 1449,
					"name": "Perimeter",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/query/Perimeter.ts",
							"line": 30,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1450,
							"name": "Perimeter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a list of perimeter entities. In order to qualify as a perimeter entity,\nentities must be part of the set of input entities and must have naked edges.\n\\n",
								"returns": "Entities, a list of perimeter entities.",
								"tags": [
									{
										"tag": "example",
										"text": "`query.Perimeter('edges', [polygon1,polygon2,polygon])`"
									},
									{
										"tag": "example_info",
										"text": "Returns list of edges that are at the perimeter of polygon1, polygon2, or polygon3.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1451,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1452,
									"name": "ent_type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, select the type of perimeter entities to return: `'ps', '_v', '_e', '_w',\n'pt', 'pl', 'pg',` or `'co'`."
									},
									"type": {
										"type": "reference",
										"name": "_EEntType"
									}
								},
								{
									"id": 1453,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "List of entities."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				},
				{
					"id": 1443,
					"name": "Sort",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/query/Sort.ts",
							"line": 32,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1444,
							"name": "Sort",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sorts entities based on an attribute.\n\\n\nIf the attribute is a list, index can also be specified as follows: `#@name1[index]`.\n\\n",
								"returns": "Entities, a list of sorted entities.",
								"tags": [
									{
										"tag": "example",
										"text": "`sorted_list = query.Sort( [pos1, pos2, pos3], #@xyz[2], descending)`"
									},
									{
										"tag": "example_info",
										"text": "Returns a list of three positions, sorted according to the descending z value.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1445,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1446,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "List of two or more entities to be sorted, all of the same entity type."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 1447,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Attribute name to use for sorting. Can be `name`, `[name, index]`, or `[name, key]`."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												]
											}
										]
									}
								},
								{
									"id": 1448,
									"name": "method_enum",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, sort: `'descending'` or `'ascending'`."
									},
									"type": {
										"type": "reference",
										"name": "_ESortMethod"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				},
				{
					"id": 1464,
					"name": "Type",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/query/Type.ts",
							"line": 35,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1465,
							"name": "Type",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks the type of an entity. \\n\n- For is\\_used\\_posi, returns true if the entity is a posi, and it is used by at least one\n  vertex.\n- For is\\_unused\\_posi, it returns the opposite of is\\_used\\_posi.\n- For is\\_object, returns true if the entity is a point, a polyline, or a polygon.\n- For is\\_topology, returns true if the entity is a vertex, an edge, a wire, or a face.\n- For is\\_point\\_topology, is\\_polyline\\_topology, and is\\_polygon\\_topology, returns true if the\n  entity is a topological entity, and it is part of an object of the specified type.\n- For is\\_open, returns true if the entity is a wire or polyline and is open.\n- For is\\_closed, it returns the opposite of is\\_open.\n- For is\\_hole, returns true if the entity is a wire, and it defines a hole in a face.\n- For has\\_holes, returns true if the entity is a face or polygon, and it has holes.\n- For has\\_no\\_holes, it returns the opposite of has\\_holes.",
								"returns": "Boolean or list of booleans in input sequence.",
								"tags": [
									{
										"tag": "example",
										"text": "`query.Type([polyline1, polyline2, polygon1], is_polyline)`"
									},
									{
										"tag": "example_info",
										"text": "Returns a list `[true, true, false]` if polyline1 and polyline2 are polylines but\npolygon1 is not a polyline.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1466,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1467,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "An entity, or a list of entities."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 1468,
									"name": "type_query_enum",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, select the conditions to test against: `'exists', 'is_position',\n'is_used_posi', 'is_unused_posi', 'is_vertex', 'is_edge', 'is_wire', 'is_point',\n'is_polyline', 'is_polygon', 'is_collection', 'is_object', 'is_topology',\n'is_point_topology', 'is_polyline_topology', 'is_polygon_topology', 'is_open',\n'is_closed', 'is_hole', 'has_holes'` or `'has_no_holes'`."
									},
									"type": {
										"type": "reference",
										"name": "_ETypeQueryEnum"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "boolean"
										}
									}
								]
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1469
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1459,
						1431,
						1426,
						1438,
						1454,
						1449,
						1443,
						1464
					]
				}
			],
			"sources": [
				{
					"fileName": "modules/functions/query/index.ts",
					"line": 6,
					"character": 0
				}
			]
		},
		{
			"id": 1535,
			"name": "util",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "The `util` module has some utility functions used for debugging."
			},
			"children": [
				{
					"id": 1587,
					"name": "UtilFunc",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 1588,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/util/index.ts",
									"line": 43,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1589,
									"name": "new UtilFunc",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1590,
											"name": "model",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "GIModel",
												"package": "@design-automation/mobius-sim",
												"name": "GIModel"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1587,
										"name": "UtilFunc"
									}
								}
							]
						},
						{
							"id": 1591,
							"name": "__enum__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/util/index.ts",
									"line": 36,
									"character": 4
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1592,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1593,
											"name": "HTTPRequest",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/util/index.ts",
													"line": 37,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1594,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1595,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/util/index.ts",
																	"line": 38,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_HTTPRequestMethod"
																}
															},
															"defaultValue": "Enum._HTTPRequestMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1595
															]
														}
													]
												}
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1593
											]
										}
									]
								}
							},
							"defaultValue": "..."
						},
						{
							"id": 1596,
							"name": "__model__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/util/index.ts",
									"line": 42,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "GIModel",
								"package": "@design-automation/mobius-sim",
								"name": "GIModel"
							}
						},
						{
							"id": 1597,
							"name": "EntityInfo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/util/index.ts",
									"line": 46,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1598,
									"name": "EntityInfo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1599,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1632,
							"name": "HTTPRequest",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/util/index.ts",
									"line": 76,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 1633,
									"name": "HTTPRequest",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1634,
											"name": "request_data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1635,
											"name": "request_url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1636,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_HTTPRequestMethod"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 1600,
							"name": "ModelCheck",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/util/index.ts",
									"line": 49,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1601,
									"name": "ModelCheck",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1602,
							"name": "ModelCompare",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/util/index.ts",
									"line": 52,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 1603,
									"name": "ModelCompare",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1604,
											"name": "input_data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 1605,
							"name": "ModelInfo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/util/index.ts",
									"line": 55,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1606,
									"name": "ModelInfo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1607,
							"name": "ModelMerge",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/util/index.ts",
									"line": 58,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 1608,
									"name": "ModelMerge",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1609,
											"name": "input_data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 1610,
							"name": "ParamInfo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/util/index.ts",
									"line": 61,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1611,
									"name": "ParamInfo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1612,
											"name": "__constList__",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1613,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {}
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1614,
							"name": "Select",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/util/index.ts",
									"line": 64,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1615,
									"name": "Select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1616,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "array",
															"elementType": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1617,
							"name": "SendData",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/util/index.ts",
									"line": 67,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1618,
									"name": "SendData",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1619,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1620,
							"name": "VrHotspot",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/util/index.ts",
									"line": 70,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1621,
									"name": "VrHotspot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1622,
											"name": "point",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1623,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1624,
											"name": "camera_rot",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1625,
							"name": "VrPanorama",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/util/index.ts",
									"line": 73,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1626,
									"name": "VrPanorama",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1627,
											"name": "point",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1628,
											"name": "back_url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1629,
											"name": "back_rot",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1630,
											"name": "fore_url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1631,
											"name": "fore_rot",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1588
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1591,
								1596
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1597,
								1632,
								1600,
								1602,
								1605,
								1607,
								1610,
								1614,
								1617,
								1620,
								1625
							]
						}
					],
					"sources": [
						{
							"fileName": "modules/functions/util/index.ts",
							"line": 33,
							"character": 13
						}
					]
				},
				{
					"id": 1565,
					"name": "EntityInfo",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/util/EntityInfo.ts",
							"line": 16,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1566,
							"name": "EntityInfo",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a html string representation of one or more entities in the model.\nThe string can be printed to the console for viewing.",
								"returns": "Text that summarises what is in the model, click print to see this text.\n\n"
							},
							"parameters": [
								{
									"id": 1567,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1568,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "One or more objects or collections."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 1540,
					"name": "HTTPRequest",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/util/httpRequest.ts",
							"line": 20,
							"character": 23
						}
					],
					"signatures": [
						{
							"id": 1541,
							"name": "HTTPRequest",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a http request to a URL.\nTypically used with a server that runs simulations, or to download data.",
								"returns": "The request response: JSON data in the form of a dictionary.",
								"tags": [
									{
										"tag": "example",
										"text": "`data = util.HTTPRequest(null, \"websiteurl.com\", \"GET\")`"
									},
									{
										"tag": "exampleinfo",
										"text": "This will show the website in the console.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1542,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1543,
									"name": "request_data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Request data. Can be 'null' to request everything."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 1544,
									"name": "request_url",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Request url, as a string."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1545,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, HTTP method: `'GET', 'POST', 'PATCH', 'DELETE'` or `'PUT'`."
									},
									"type": {
										"type": "reference",
										"name": "_HTTPRequestMethod"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 1572,
					"name": "ModelCheck",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/util/ModelCheck.ts",
							"line": 11,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1573,
							"name": "ModelCheck",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks the internal consistency of the model. Used for debugigng Mobius.",
								"returns": "Text that summarises what is in the model, click print to see this text.\n"
							},
							"parameters": [
								{
									"id": 1574,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 1575,
					"name": "ModelCompare",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/util/ModelCompare.ts",
							"line": 29,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 1576,
							"name": "ModelCompare",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Compares two models. Used for grading models.\n\\n\nChecks that every entity in this model also exists in the input_data.\n\\n\nAdditional entities in the input data will not affect the score.\n\\n\nAttributes at the model level are ignored except for the `material` attributes.\n\\n\nFor grading, this model is assumed to be the answer model, and the input model is assumed to be\nthe model submitted by the student.\n\\n\nThe order or entities in this model may be modified in the comparison process.\n\\n\nFor specifying the location of the GI Model, you can either specify a URL, or the name of a file\nin LocalStorage.\nIn the latter case, you do not specify a path, you just specify the file name, e.g. 'my_model.gi'",
								"returns": "Text that summarises the comparison between the two models.\n"
							},
							"parameters": [
								{
									"id": 1577,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1578,
									"name": "input_data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The location of the GI Model to compare this model to."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 1569,
					"name": "ModelInfo",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/util/ModelInfo.ts",
							"line": 12,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1570,
							"name": "ModelInfo",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a html string representation of the contents of this model.\nThe string can be printed to the console for viewing.",
								"returns": "Text that summarises what is in the model, click print to see this text.\n"
							},
							"parameters": [
								{
									"id": 1571,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 1579,
					"name": "ModelMerge",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/util/ModelMerge.ts",
							"line": 19,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 1580,
							"name": "ModelMerge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Merges data from another model into this model.\nThis is the same as importing the model, except that no collection is created.\n\\n\nFor specifying the location of the GI Model, you can either specify a URL, or the name of a file\nin LocalStorage.\nIn the latter case, you do not specify a path, you just specify the file name, e.g. 'my_model.gi'",
								"returns": "Text that summarises the comparison between the two models.\n"
							},
							"parameters": [
								{
									"id": 1581,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1582,
									"name": "input_data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The location of the GI Model to import into this model."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "TId",
											"package": "@design-automation/mobius-sim",
											"name": "TId"
										}
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 1560,
					"name": "ParamInfo",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/util/ParamInfo.ts",
							"line": 13,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1561,
							"name": "ParamInfo",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a html string representation of the parameters in the model.\nThe string can be printed to the console for viewing.",
								"returns": "A dictionary that summarises what is in the model.\n"
							},
							"parameters": [
								{
									"id": 1562,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1563,
									"name": "__constList__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1564,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {}
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 1536,
					"name": "Select",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/util/Select.ts",
							"line": 12,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1537,
							"name": "Select",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Select entities in the model.",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 1538,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1539,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The entities to be selected."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1583,
					"name": "SendData",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/util/SendData.ts",
							"line": 12,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1584,
							"name": "SendData",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Post a message to the parent window. Used when Mobius is embedded in an external website.",
								"returns": "A message in the parent window.\n"
							},
							"parameters": [
								{
									"id": 1585,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1586,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The data to send, a list or a dictionary."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1546,
					"name": "VrHotspot",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/util/VrHotspot.ts",
							"line": 19,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 1547,
							"name": "VrHotspot",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creta a VR hotspot. In the VR Viewer, you can teleport to such hotspots.\n\\n",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 1548,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1549,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A point object to be used for creating hotspots."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1550,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A name for the VR hotspots. If `null`, a default name will be created."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1551,
									"name": "camera_rot",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The rotation of the camera direction when you teleport to the hotspot. The\nrotation is specified in degrees, in the counter-clockwise direction, starting from the Y axis.\nIf `null`, the camera rotation will default to 0."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1552,
					"name": "VrPanorama",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/util/VrPanorama.ts",
							"line": 23,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 1553,
							"name": "VrPanorama",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a VR panorama hotspot. In the VR Viewer, you can teleport to such hotspots.When you enter\nthe hotspot, the panorama images will be loaded into the view. \\n",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 1554,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1555,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The point object to be used for creating a panorama. If this point is already\ndefined as a VR hotspot, then the panorama hotspot will inherit the name and camera angle."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1556,
									"name": "back_url",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The URL of the 360 degree panorama image to be used for the background."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1557,
									"name": "back_rot",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The rotation of the background panorama image, in degrees, in the\ncounter-clockwise direction. If `null`, then rotation will be 0."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1558,
									"name": "fore_url",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The URL of the 360 degree panorama image to be used for the foreground. If `null`\nthen no foreground image will be used."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1559,
									"name": "fore_rot",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The rotation of the forground panorama image, in degrees, in the\ncounter-clockwise direction. If `null`, then the foreground rotation will be equal to the background rotation."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1587
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1565,
						1540,
						1572,
						1575,
						1569,
						1579,
						1560,
						1536,
						1583,
						1546,
						1552
					]
				}
			],
			"sources": [
				{
					"fileName": "modules/functions/util/index.ts",
					"line": 5,
					"character": 0
				}
			]
		},
		{
			"id": 1637,
			"name": "visualize",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"comment": {
				"shortText": "The `visualize` module has functions for defining various settings for the 3D viewer.\nColor is saved as vertex attributes."
			},
			"children": [
				{
					"id": 1674,
					"name": "VisualizeFunc",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 1675,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/visualize/index.ts",
									"line": 39,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1676,
									"name": "new VisualizeFunc",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1677,
											"name": "model",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "GIModel",
												"package": "@design-automation/mobius-sim",
												"name": "GIModel"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1674,
										"name": "VisualizeFunc"
									}
								}
							]
						},
						{
							"id": 1678,
							"name": "__enum__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/visualize/index.ts",
									"line": 29,
									"character": 4
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1679,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1680,
											"name": "Edge",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/visualize/index.ts",
													"line": 30,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1681,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1682,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/visualize/index.ts",
																	"line": 31,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EEdgeMethod"
																}
															},
															"defaultValue": "Enum._EEdgeMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1682
															]
														}
													]
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 1683,
											"name": "Mesh",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "modules/functions/visualize/index.ts",
													"line": 33,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1684,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1685,
															"name": "method",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "modules/functions/visualize/index.ts",
																	"line": 34,
																	"character": 12
																}
															],
															"type": {
																"type": "query",
																"queryType": {
																	"type": "reference",
																	"name": "_EMeshMethod"
																}
															},
															"defaultValue": "Enum._EMeshMethod"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1685
															]
														}
													]
												}
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1680,
												1683
											]
										}
									]
								}
							},
							"defaultValue": "..."
						},
						{
							"id": 1686,
							"name": "__model__",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/visualize/index.ts",
									"line": 38,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "GIModel",
								"package": "@design-automation/mobius-sim",
								"name": "GIModel"
							}
						},
						{
							"id": 1687,
							"name": "BBox",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/visualize/index.ts",
									"line": 42,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1688,
									"name": "BBox",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1689,
											"name": "bboxes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "TBBox",
												"package": "@design-automation/mobius-sim",
												"name": "TBBox"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1690,
							"name": "Color",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/visualize/index.ts",
									"line": 45,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1691,
									"name": "Color",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1692,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1693,
											"name": "color",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "TColor",
												"package": "@design-automation/mobius-sim",
												"name": "TColor"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1694,
							"name": "Edge",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/visualize/index.ts",
									"line": 48,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1695,
									"name": "Edge",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1696,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1697,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EEdgeMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1698,
							"name": "Gradient",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/visualize/index.ts",
									"line": 51,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1699,
									"name": "Gradient",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1700,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1701,
											"name": "attrib",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												]
											}
										},
										{
											"id": 1702,
											"name": "range",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												]
											}
										},
										{
											"id": 1703,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EColorRampMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1704,
							"name": "Mesh",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/visualize/index.ts",
									"line": 54,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1705,
									"name": "Mesh",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1706,
											"name": "entities",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1707,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "_EMeshMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1708,
							"name": "Plane",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/visualize/index.ts",
									"line": 57,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1709,
									"name": "Plane",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1710,
											"name": "planes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "TPlane",
														"package": "@design-automation/mobius-sim",
														"name": "TPlane"
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "TPlane",
															"package": "@design-automation/mobius-sim",
															"name": "TPlane"
														}
													}
												]
											}
										},
										{
											"id": 1711,
											"name": "scale",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1712,
							"name": "Ray",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "modules/functions/visualize/index.ts",
									"line": 60,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1713,
									"name": "Ray",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1714,
											"name": "rays",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "TRay",
														"package": "@design-automation/mobius-sim",
														"name": "TRay"
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"qualifiedName": "TRay",
															"package": "@design-automation/mobius-sim",
															"name": "TRay"
														}
													}
												]
											}
										},
										{
											"id": 1715,
											"name": "scale",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1675
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1678,
								1686
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1687,
								1690,
								1694,
								1698,
								1704,
								1708,
								1712
							]
						}
					],
					"sources": [
						{
							"fileName": "modules/functions/visualize/index.ts",
							"line": 26,
							"character": 13
						}
					]
				},
				{
					"id": 1670,
					"name": "BBox",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/visualize/BBox.ts",
							"line": 28,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1671,
							"name": "BBox",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Visualises a bounding box by adding geometry to the model.\n\\n\nSee `calc.BBox` for creating the bounding box.\nTo create polygons of the bounding box instead, see `poly2d.BBoxPolygon`.\n\\n\nThe bounding box is an imaginary box that completely contains all the geometry.\nThe box is always aligned with the global x, y, and z axes.\n\\n\nThe bounding box consists of a list of lists, as follows [[x, y, z], [x, y, z], [x, y, z], [x, y, z]].\n- The first [x, y, z] is the coordinates of the centre of the bounding box.\n- The second [x, y, z] is the corner of the bounding box with the lowest x, y, z values.\n- The third [x, y, z] is the corner of the bounding box with the highest x, y, z values.\n- The fourth [x, y, z] is the dimensions of the bounding box.",
								"returns": "Entities, twelve polylines representing the box.",
								"tags": [
									{
										"tag": "example",
										"text": "`bbox1 = calc.BBox(geometry)`, `bbox_vis = visualize.BBox(bbox1)`"
									},
									{
										"tag": "example_info",
										"text": "Creates a box around the inital geometry.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1672,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1673,
									"name": "bboxes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of 4 lists (created from `calc.BBox`)."
									},
									"type": {
										"type": "reference",
										"qualifiedName": "TBBox",
										"package": "@design-automation/mobius-sim",
										"name": "TBBox"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				},
				{
					"id": 1638,
					"name": "Color",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/visualize/Color.ts",
							"line": 29,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1639,
							"name": "Color",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets color by creating a vertex attribute called 'rgb' and setting the value.\n\\n\nSee\n<a href=\"https://www.w3schools.com/colors/colors_rgb.asp?color=rgb(0,%200,%200)\" target=\"_blank\">w3schools</a>\nfor examples of RGB colors. To convert RGB(255, 255, 255) to RGB(1, 1, 1), enter vecDiv([`rgb_255_numbers`], 255).",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 1640,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1641,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The entities for which to set the color."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 1642,
									"name": "color",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The color, [0,0,0] is black, [1,1,1] is white. vecDiv([255, 255, 255], 255) is also white."
									},
									"type": {
										"type": "reference",
										"qualifiedName": "TColor",
										"package": "@design-automation/mobius-sim",
										"name": "TColor"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1650,
					"name": "Edge",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/visualize/Edge.ts",
							"line": 30,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1651,
							"name": "Edge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Controls how edges are visualized by setting the visibility of the edge.\n\\n\nThe method can either be 'visible' or 'hidden'.\n- 'visible' means that an edge line will be visible.\n- 'hidden' means that no edge lines will be visible.\n\\n",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 1652,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1653,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A list of edges, or other entities from which edges can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 1654,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, `'visible'` or `'hidden'`."
									},
									"type": {
										"type": "reference",
										"name": "_EEdgeMethod"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1643,
					"name": "Gradient",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/visualize/Gradient.ts",
							"line": 44,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1644,
							"name": "Gradient",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Generates a colour range based on a numeric attribute.\nSets the color by creating a vertex attribute called 'rgb' and setting the value.\n\\n\nThe available gradients are from <a href=\"https://colorbrewer2.org/\">Color Brewer. </a>\nIf a custom gradient is desired, the inline expression `colScale()` can be used instead.\nRefer to its documentation for more information.",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 1645,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1646,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The entities for which to set the color."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 1647,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The numeric attribute to be used to create the gradient.\nYou can specify an attribute with an index. For example, ['xyz', 2] will create a gradient based on height."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										]
									}
								},
								{
									"id": 1648,
									"name": "range",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The range of the attribute. If a list of 2 numbers is input, [minimum, maximum].\nIf only one number, it defaults to [0, maximum]. If null, then the range will be auto-calculated."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										]
									}
								},
								{
									"id": 1649,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the colour gradient to use: `'false_color', 'black_body', 'white_red',\n'white_green', 'white_blue', 'blue_red', 'green_red', 'blue_green', 'grey_scale', 'OrRd', 'PuBu',\n'BuPu', 'Oranges', 'BuGn', 'YlOrBr', 'YlGn', 'Reds', 'RdPu', 'Greens', 'YlGnBu', 'Purples',\n'GnBu', 'Greys', 'YlOrRd', 'PuRd', 'Blues', 'PuBuGn', 'Viridis', 'Spectral', 'RdYlGn', 'RdBu',\n'PiYG', 'PRGn', 'RdYlBu', 'BrBG', 'RdGy', 'PuOr', 'Set2', 'Accent', 'Set1', 'Set3', 'Dark2',\n'Paired', 'Pastel2'` or `'Pastel1'`."
									},
									"type": {
										"type": "reference",
										"name": "_EColorRampMethod"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1655,
					"name": "Mesh",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/visualize/Mesh.ts",
							"line": 31,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1656,
							"name": "Mesh",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Controls how polygon meshes are visualized by creating normals on vertices.\n\\n\nThe method can either be 'faceted' or 'smooth'.\n- 'faceted' means that the normal direction for each vertex will be perpendicular to the polygon to which it belongs.\n- 'smooth' means that the normal direction for each vertex will be the average of all polygons welded to this vertex.\n\\n",
								"returns": "void\n"
							},
							"parameters": [
								{
									"id": 1657,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1658,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Vertices belonging to polygons, or entities from which polygon vertices can be extracted."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 1659,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Enum, the types of normals to create: `'faceted'` or `'smooth'`."
									},
									"type": {
										"type": "reference",
										"name": "_EMeshMethod"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 1665,
					"name": "Plane",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/visualize/Plane.ts",
							"line": 31,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1666,
							"name": "Plane",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Visualises a plane or a list of planes by creating polylines.",
								"returns": "Entities, a square plane polyline and three axis polyline.",
								"tags": [
									{
										"tag": "example",
										"text": "`plane1 = visualize.Plane(position1, vector1, [0,1,0])`"
									},
									{
										"tag": "example_info",
										"text": "Creates a plane with position1 on it and normal = cross product of vector1 with y-axis.\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1667,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1668,
									"name": "planes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A plane or a list of planes."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "TPlane",
												"package": "@design-automation/mobius-sim",
												"name": "TPlane"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "TPlane",
													"package": "@design-automation/mobius-sim",
													"name": "TPlane"
												}
											}
										]
									}
								},
								{
									"id": 1669,
									"name": "scale",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A number. Scales the size of the visualized plane."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				},
				{
					"id": 1660,
					"name": "Ray",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "modules/functions/visualize/Ray.ts",
							"line": 32,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1661,
							"name": "Ray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Visualises a ray or a list of rays by creating a polyline with an arrow head.",
								"returns": "Entities, a line with an arrow head representing the ray.",
								"tags": [
									{
										"tag": "example",
										"text": "`ray1 = visualize.Ray([[1,2,3],[0,0,1]])`\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1662,
									"name": "__model__",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"qualifiedName": "GIModel",
										"package": "@design-automation/mobius-sim",
										"name": "GIModel"
									}
								},
								{
									"id": 1663,
									"name": "rays",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Polylines representing the ray or rays."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "TRay",
												"package": "@design-automation/mobius-sim",
												"name": "TRay"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"qualifiedName": "TRay",
													"package": "@design-automation/mobius-sim",
													"name": "TRay"
												}
											}
										]
									}
								},
								{
									"id": 1664,
									"name": "scale",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A number. Scales the arrow head of the vector."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"qualifiedName": "TId",
									"package": "@design-automation/mobius-sim",
									"name": "TId"
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1674
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1670,
						1638,
						1650,
						1643,
						1655,
						1665,
						1660
					]
				}
			],
			"sources": [
				{
					"fileName": "modules/functions/visualize/index.ts",
					"line": 6,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "Namespaces",
			"kind": 4,
			"children": [
				1716,
				1,
				248,
				364,
				458,
				505,
				537,
				629,
				653,
				772,
				842,
				966,
				1077,
				1150,
				1297,
				1425,
				1535,
				1637
			]
		}
	],
	"sources": [
		{
			"fileName": "modules/doc_export.ts",
			"line": 1,
			"character": 0
		}
	]
}